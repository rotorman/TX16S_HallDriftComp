
TX16S_I2C_LSM6DS33_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  0800c780  0800c780  0001c780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0f4  0800d0f4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0f4  0800d0f4  0001d0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0fc  0800d0fc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0fc  0800d0fc  0001d0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d100  0800d100  0001d100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca8  200001ec  0800d2f0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e94  0800d2f0  00020e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa50  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004076  00000000  00000000  0003fc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00043ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  000455d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af41  00000000  00000000  00046d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ecdc  00000000  00000000  00071c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4ef0  00000000  00000000  00090955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00185845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bf8  00000000  00000000  00185898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c764 	.word	0x0800c764

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	0800c764 	.word	0x0800c764

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <serialPrintf>:
#define CRLF "\r\n"

#define PRINTF_BUFFER_SIZE    128

void serialPrintf(const char * format, ...)
{
 8000f60:	b40f      	push	{r0, r1, r2, r3}
 8000f62:	b590      	push	{r4, r7, lr}
 8000f64:	b0a5      	sub	sp, #148	; 0x94
 8000f66:	af00      	add	r7, sp, #0
	va_list arglist;
	char tmp[PRINTF_BUFFER_SIZE + 1];

	snprintf(tmp, PRINTF_BUFFER_SIZE, "+%05lums: ", HAL_GetTick());
 8000f68:	f002 fb84 	bl	8003674 <HAL_GetTick>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	1d38      	adds	r0, r7, #4
 8000f70:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <serialPrintf+0x7c>)
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	f009 f97e 	bl	800a274 <sniprintf>
	va_start(arglist, format);
 8000f78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	vsnprintf(tmp + strlen(tmp), PRINTF_BUFFER_SIZE - strlen(tmp), format, arglist);
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f934 	bl	80001f0 <strlen>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	189c      	adds	r4, r3, r2
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f92d 	bl	80001f0 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f1c3 0180 	rsb	r1, r3, #128	; 0x80
 8000f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000fa0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f009 f9c5 	bl	800a334 <vsniprintf>
	tmp[PRINTF_BUFFER_SIZE] = '\0';
 8000faa:	2300      	movs	r3, #0
 8000fac:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	va_end(arglist);

	const char *t = tmp;
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	HAL_UART_Transmit(&huart6, (uint8_t *) t, strlen(t), 10);
 8000fb6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000fba:	f7ff f919 	bl	80001f0 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <serialPrintf+0x80>)
 8000fca:	f006 fefc 	bl	8007dc6 <HAL_UART_Transmit>
}
 8000fce:	bf00      	nop
 8000fd0:	3794      	adds	r7, #148	; 0x94
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000fd8:	b004      	add	sp, #16
 8000fda:	4770      	bx	lr
 8000fdc:	0800c780 	.word	0x0800c780
 8000fe0:	2000095c 	.word	0x2000095c

08000fe4 <I2C_LSM6DS33_ReadRegister>:
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStructure);
}

bool I2C_LSM6DS33_ReadRegister(uint8_t reg, uint8_t * buf, uint8_t len)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	if (HAL_I2C_Master_Transmit(&hi2c2, LSM6DS33_I2C_ADDR << 1, &reg, 1, 10000) != HAL_OK)
 8000ff4:	1dfa      	adds	r2, r7, #7
 8000ff6:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	21d4      	movs	r1, #212	; 0xd4
 8001000:	481d      	ldr	r0, [pc, #116]	; (8001078 <I2C_LSM6DS33_ReadRegister+0x94>)
 8001002:	f003 fbbb 	bl	800477c <HAL_I2C_Master_Transmit>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d011      	beq.n	8001030 <I2C_LSM6DS33_ReadRegister+0x4c>
	{
		TRACE("I2C ERROR: ReadRegister write reg. address failed");
 800100c:	f002 fb32 	bl	8003674 <HAL_GetTick>
 8001010:	ee07 0a90 	vmov	s15, r0
 8001014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001018:	ee17 0a90 	vmov	r0, s15
 800101c:	f7ff faa4 	bl	8000568 <__aeabi_f2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4815      	ldr	r0, [pc, #84]	; (800107c <I2C_LSM6DS33_ReadRegister+0x98>)
 8001026:	f7ff ff9b 	bl	8000f60 <serialPrintf>
		asm("bkpt 255");
 800102a:	beff      	bkpt	0x00ff
		return false;
 800102c:	2300      	movs	r3, #0
 800102e:	e01f      	b.n	8001070 <I2C_LSM6DS33_ReadRegister+0x8c>
	}

	if (HAL_I2C_Master_Receive(&hi2c2, LSM6DS33_I2C_ADDR << 1, buf, len, 10000) != HAL_OK)
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	b29b      	uxth	r3, r3
 8001034:	f242 7210 	movw	r2, #10000	; 0x2710
 8001038:	9200      	str	r2, [sp, #0]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	21d4      	movs	r1, #212	; 0xd4
 800103e:	480e      	ldr	r0, [pc, #56]	; (8001078 <I2C_LSM6DS33_ReadRegister+0x94>)
 8001040:	f003 fc9a 	bl	8004978 <HAL_I2C_Master_Receive>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d011      	beq.n	800106e <I2C_LSM6DS33_ReadRegister+0x8a>
	{
		TRACE("I2C ERROR: ReadRegister read register failed");
 800104a:	f002 fb13 	bl	8003674 <HAL_GetTick>
 800104e:	ee07 0a90 	vmov	s15, r0
 8001052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001056:	ee17 0a90 	vmov	r0, s15
 800105a:	f7ff fa85 	bl	8000568 <__aeabi_f2d>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4807      	ldr	r0, [pc, #28]	; (8001080 <I2C_LSM6DS33_ReadRegister+0x9c>)
 8001064:	f7ff ff7c 	bl	8000f60 <serialPrintf>
		asm("bkpt 255");
 8001068:	beff      	bkpt	0x00ff
		return false;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <I2C_LSM6DS33_ReadRegister+0x8c>
	}
	return true;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200006f4 	.word	0x200006f4
 800107c:	0800c78c 	.word	0x0800c78c
 8001080:	0800c7c8 	.word	0x0800c7c8

08001084 <I2C_LSM6DS33_WriteRegister>:

bool I2C_LSM6DS33_WriteRegister(uint8_t reg, uint8_t * buf, uint8_t len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af02      	add	r7, sp, #8
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
	uint8_t uAddrAndBuf[15];
	uAddrAndBuf[0] = reg;
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	733b      	strb	r3, [r7, #12]

	if (len > 0)
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d014      	beq.n	80010c8 <I2C_LSM6DS33_WriteRegister+0x44>
	{
		for (int i = 0;i < len;i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e00d      	b.n	80010c0 <I2C_LSM6DS33_WriteRegister+0x3c>
		{
			uAddrAndBuf[i + 1] = buf[i];
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	441a      	add	r2, r3
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	f107 0120 	add.w	r1, r7, #32
 80010b4:	440b      	add	r3, r1
 80010b6:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (int i = 0;i < len;i++)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3301      	adds	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbed      	blt.n	80010a4 <I2C_LSM6DS33_WriteRegister+0x20>
		}
	}

	if (HAL_I2C_Master_Transmit(&hi2c2, LSM6DS33_I2C_ADDR << 1, uAddrAndBuf, len + 1, 10000) != HAL_OK)
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3301      	adds	r3, #1
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f107 020c 	add.w	r2, r7, #12
 80010d4:	f242 7110 	movw	r1, #10000	; 0x2710
 80010d8:	9100      	str	r1, [sp, #0]
 80010da:	21d4      	movs	r1, #212	; 0xd4
 80010dc:	480e      	ldr	r0, [pc, #56]	; (8001118 <I2C_LSM6DS33_WriteRegister+0x94>)
 80010de:	f003 fb4d 	bl	800477c <HAL_I2C_Master_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d011      	beq.n	800110c <I2C_LSM6DS33_WriteRegister+0x88>
	{
		TRACE("I2C ERROR: WriteRegister failed");
 80010e8:	f002 fac4 	bl	8003674 <HAL_GetTick>
 80010ec:	ee07 0a90 	vmov	s15, r0
 80010f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f4:	ee17 0a90 	vmov	r0, s15
 80010f8:	f7ff fa36 	bl	8000568 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4806      	ldr	r0, [pc, #24]	; (800111c <I2C_LSM6DS33_WriteRegister+0x98>)
 8001102:	f7ff ff2d 	bl	8000f60 <serialPrintf>
		asm("bkpt 255");
 8001106:	beff      	bkpt	0x00ff
		return false;
 8001108:	2300      	movs	r3, #0
 800110a:	e000      	b.n	800110e <I2C_LSM6DS33_WriteRegister+0x8a>
	}
	return true;
 800110c:	2301      	movs	r3, #1
}
 800110e:	4618      	mov	r0, r3
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200006f4 	.word	0x200006f4
 800111c:	0800c800 	.word	0x0800c800

08001120 <IMUgetConf>:

bool IMUgetConf(void)
{
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af02      	add	r7, sp, #8
	uint8_t ui8_regs[2] = {0};
 8001126:	2300      	movs	r3, #0
 8001128:	80bb      	strh	r3, [r7, #4]

	if (!I2C_LSM6DS33_ReadRegister(LSM6DS33_CTRL1_XL_ADDR, ui8_regs, 2))
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2202      	movs	r2, #2
 800112e:	4619      	mov	r1, r3
 8001130:	2010      	movs	r0, #16
 8001132:	f7ff ff57 	bl	8000fe4 <I2C_LSM6DS33_ReadRegister>
 8001136:	4603      	mov	r3, r0
 8001138:	f083 0301 	eor.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d010      	beq.n	8001164 <IMUgetConf+0x44>
	{
		TRACE("ERROR: LSM6DS33 did not respond to I2C address");
 8001142:	f002 fa97 	bl	8003674 <HAL_GetTick>
 8001146:	ee07 0a90 	vmov	s15, r0
 800114a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114e:	ee17 0a90 	vmov	r0, s15
 8001152:	f7ff fa09 	bl	8000568 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	48bb      	ldr	r0, [pc, #748]	; (8001448 <IMUgetConf+0x328>)
 800115c:	f7ff ff00 	bl	8000f60 <serialPrintf>
		return false;
 8001160:	2300      	movs	r3, #0
 8001162:	e20d      	b.n	8001580 <IMUgetConf+0x460>
	}

	switch ((ui8_regs[0] >> 4) & 0x0F) // CTRL1_XL
 8001164:	793b      	ldrb	r3, [r7, #4]
 8001166:	091b      	lsrs	r3, r3, #4
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	2b0a      	cmp	r3, #10
 8001170:	d858      	bhi.n	8001224 <IMUgetConf+0x104>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <IMUgetConf+0x58>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	080011a5 	.word	0x080011a5
 800117c:	080011cb 	.word	0x080011cb
 8001180:	080011d3 	.word	0x080011d3
 8001184:	080011db 	.word	0x080011db
 8001188:	080011e3 	.word	0x080011e3
 800118c:	080011eb 	.word	0x080011eb
 8001190:	080011f3 	.word	0x080011f3
 8001194:	080011fd 	.word	0x080011fd
 8001198:	08001207 	.word	0x08001207
 800119c:	08001211 	.word	0x08001211
 80011a0:	0800121b 	.word	0x0800121b
	{
		case LSM6DS33_ODR_0Hz:			IMUsettings.linacc_odr = 0; TRACE("LSM6DS33 lin. acc. output turned off"); break;
 80011a4:	4ba9      	ldr	r3, [pc, #676]	; (800144c <IMUgetConf+0x32c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	801a      	strh	r2, [r3, #0]
 80011aa:	f002 fa63 	bl	8003674 <HAL_GetTick>
 80011ae:	ee07 0a90 	vmov	s15, r0
 80011b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b6:	ee17 0a90 	vmov	r0, s15
 80011ba:	f7ff f9d5 	bl	8000568 <__aeabi_f2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	48a3      	ldr	r0, [pc, #652]	; (8001450 <IMUgetConf+0x330>)
 80011c4:	f7ff fecc 	bl	8000f60 <serialPrintf>
 80011c8:	e03d      	b.n	8001246 <IMUgetConf+0x126>
		case LSM6DS33_ODR_12_5Hz:		IMUsettings.linacc_odr = 13; break;
 80011ca:	4ba0      	ldr	r3, [pc, #640]	; (800144c <IMUgetConf+0x32c>)
 80011cc:	220d      	movs	r2, #13
 80011ce:	801a      	strh	r2, [r3, #0]
 80011d0:	e039      	b.n	8001246 <IMUgetConf+0x126>
		case LSM6DS33_ODR_26Hz:			IMUsettings.linacc_odr = 26; break;
 80011d2:	4b9e      	ldr	r3, [pc, #632]	; (800144c <IMUgetConf+0x32c>)
 80011d4:	221a      	movs	r2, #26
 80011d6:	801a      	strh	r2, [r3, #0]
 80011d8:	e035      	b.n	8001246 <IMUgetConf+0x126>
		case LSM6DS33_ODR_52Hz:			IMUsettings.linacc_odr = 52; break;
 80011da:	4b9c      	ldr	r3, [pc, #624]	; (800144c <IMUgetConf+0x32c>)
 80011dc:	2234      	movs	r2, #52	; 0x34
 80011de:	801a      	strh	r2, [r3, #0]
 80011e0:	e031      	b.n	8001246 <IMUgetConf+0x126>
		case LSM6DS33_ODR_104Hz:		IMUsettings.linacc_odr = 104; break;
 80011e2:	4b9a      	ldr	r3, [pc, #616]	; (800144c <IMUgetConf+0x32c>)
 80011e4:	2268      	movs	r2, #104	; 0x68
 80011e6:	801a      	strh	r2, [r3, #0]
 80011e8:	e02d      	b.n	8001246 <IMUgetConf+0x126>
		case LSM6DS33_ODR_208Hz:		IMUsettings.linacc_odr = 208; break;
 80011ea:	4b98      	ldr	r3, [pc, #608]	; (800144c <IMUgetConf+0x32c>)
 80011ec:	22d0      	movs	r2, #208	; 0xd0
 80011ee:	801a      	strh	r2, [r3, #0]
 80011f0:	e029      	b.n	8001246 <IMUgetConf+0x126>
		case LSM6DS33_ODR_416Hz:		IMUsettings.linacc_odr = 417; break;
 80011f2:	4b96      	ldr	r3, [pc, #600]	; (800144c <IMUgetConf+0x32c>)
 80011f4:	f240 12a1 	movw	r2, #417	; 0x1a1
 80011f8:	801a      	strh	r2, [r3, #0]
 80011fa:	e024      	b.n	8001246 <IMUgetConf+0x126>
		case LSM6DS33_ODR_833Hz:		IMUsettings.linacc_odr = 833; break;
 80011fc:	4b93      	ldr	r3, [pc, #588]	; (800144c <IMUgetConf+0x32c>)
 80011fe:	f240 3241 	movw	r2, #833	; 0x341
 8001202:	801a      	strh	r2, [r3, #0]
 8001204:	e01f      	b.n	8001246 <IMUgetConf+0x126>
		case LSM6DS33_ODR_1_66kHz:		IMUsettings.linacc_odr = 1667; break;
 8001206:	4b91      	ldr	r3, [pc, #580]	; (800144c <IMUgetConf+0x32c>)
 8001208:	f240 6283 	movw	r2, #1667	; 0x683
 800120c:	801a      	strh	r2, [r3, #0]
 800120e:	e01a      	b.n	8001246 <IMUgetConf+0x126>
		case LSM6DS33_ODR_3_33kHz:		IMUsettings.linacc_odr = 3333; break;
 8001210:	4b8e      	ldr	r3, [pc, #568]	; (800144c <IMUgetConf+0x32c>)
 8001212:	f640 5205 	movw	r2, #3333	; 0xd05
 8001216:	801a      	strh	r2, [r3, #0]
 8001218:	e015      	b.n	8001246 <IMUgetConf+0x126>
		case LSM6DS33_ODR_6_66kHz:		IMUsettings.linacc_odr = 6667; break;
 800121a:	4b8c      	ldr	r3, [pc, #560]	; (800144c <IMUgetConf+0x32c>)
 800121c:	f641 220b 	movw	r2, #6667	; 0x1a0b
 8001220:	801a      	strh	r2, [r3, #0]
 8001222:	e010      	b.n	8001246 <IMUgetConf+0x126>
		default: 						TRACE("ERROR: LSM6DS33 lin.acc. output data rate at illegal setting"); return false; break;
 8001224:	f002 fa26 	bl	8003674 <HAL_GetTick>
 8001228:	ee07 0a90 	vmov	s15, r0
 800122c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001230:	ee17 0a90 	vmov	r0, s15
 8001234:	f7ff f998 	bl	8000568 <__aeabi_f2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4885      	ldr	r0, [pc, #532]	; (8001454 <IMUgetConf+0x334>)
 800123e:	f7ff fe8f 	bl	8000f60 <serialPrintf>
 8001242:	2300      	movs	r3, #0
 8001244:	e19c      	b.n	8001580 <IMUgetConf+0x460>
	}
	if (IMUsettings.linacc_odr > 0) 	TRACE("LSM6DS33 lin. acc. output at %i Hz", IMUsettings.linacc_odr);
 8001246:	4b81      	ldr	r3, [pc, #516]	; (800144c <IMUgetConf+0x32c>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	2b00      	cmp	r3, #0
 800124e:	dd12      	ble.n	8001276 <IMUgetConf+0x156>
 8001250:	f002 fa10 	bl	8003674 <HAL_GetTick>
 8001254:	ee07 0a90 	vmov	s15, r0
 8001258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125c:	ee17 0a90 	vmov	r0, s15
 8001260:	f7ff f982 	bl	8000568 <__aeabi_f2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4978      	ldr	r1, [pc, #480]	; (800144c <IMUgetConf+0x32c>)
 800126a:	f9b1 1000 	ldrsh.w	r1, [r1]
 800126e:	9100      	str	r1, [sp, #0]
 8001270:	4879      	ldr	r0, [pc, #484]	; (8001458 <IMUgetConf+0x338>)
 8001272:	f7ff fe75 	bl	8000f60 <serialPrintf>

	switch ((ui8_regs[0] >> 2) & 0x03)
 8001276:	793b      	ldrb	r3, [r7, #4]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b03      	cmp	r3, #3
 8001282:	d81b      	bhi.n	80012bc <IMUgetConf+0x19c>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <IMUgetConf+0x16c>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	0800129d 	.word	0x0800129d
 8001290:	080012b5 	.word	0x080012b5
 8001294:	080012a5 	.word	0x080012a5
 8001298:	080012ad 	.word	0x080012ad
	{
		case LSM6DS33_LA_FS_2G:			IMUsettings.linacc_mG = 0.061; break;
 800129c:	4b6b      	ldr	r3, [pc, #428]	; (800144c <IMUgetConf+0x32c>)
 800129e:	4a6f      	ldr	r2, [pc, #444]	; (800145c <IMUgetConf+0x33c>)
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	e01c      	b.n	80012de <IMUgetConf+0x1be>
		case LSM6DS33_LA_FS_4G:			IMUsettings.linacc_mG = 0.122; break;
 80012a4:	4b69      	ldr	r3, [pc, #420]	; (800144c <IMUgetConf+0x32c>)
 80012a6:	4a6e      	ldr	r2, [pc, #440]	; (8001460 <IMUgetConf+0x340>)
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	e018      	b.n	80012de <IMUgetConf+0x1be>
		case LSM6DS33_LA_FS_8G:			IMUsettings.linacc_mG = 0.244; break;
 80012ac:	4b67      	ldr	r3, [pc, #412]	; (800144c <IMUgetConf+0x32c>)
 80012ae:	4a6d      	ldr	r2, [pc, #436]	; (8001464 <IMUgetConf+0x344>)
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	e014      	b.n	80012de <IMUgetConf+0x1be>
		case LSM6DS33_LA_FS_16G:		IMUsettings.linacc_mG = 0.488; break;
 80012b4:	4b65      	ldr	r3, [pc, #404]	; (800144c <IMUgetConf+0x32c>)
 80012b6:	4a6c      	ldr	r2, [pc, #432]	; (8001468 <IMUgetConf+0x348>)
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	e010      	b.n	80012de <IMUgetConf+0x1be>
		default:						TRACE("ERROR: LSM6DS33 lin. acc full scale value at illegal setting"); return false; break;
 80012bc:	f002 f9da 	bl	8003674 <HAL_GetTick>
 80012c0:	ee07 0a90 	vmov	s15, r0
 80012c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c8:	ee17 0a90 	vmov	r0, s15
 80012cc:	f7ff f94c 	bl	8000568 <__aeabi_f2d>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4865      	ldr	r0, [pc, #404]	; (800146c <IMUgetConf+0x34c>)
 80012d6:	f7ff fe43 	bl	8000f60 <serialPrintf>
 80012da:	2300      	movs	r3, #0
 80012dc:	e150      	b.n	8001580 <IMUgetConf+0x460>
	}
	TRACE("LSM6DS33 lin. acc. resolution %.2f G", IMUsettings.linacc_mG);
 80012de:	f002 f9c9 	bl	8003674 <HAL_GetTick>
 80012e2:	ee07 0a90 	vmov	s15, r0
 80012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ea:	ee17 0a90 	vmov	r0, s15
 80012ee:	f7ff f93b 	bl	8000568 <__aeabi_f2d>
 80012f2:	4604      	mov	r4, r0
 80012f4:	460d      	mov	r5, r1
 80012f6:	4b55      	ldr	r3, [pc, #340]	; (800144c <IMUgetConf+0x32c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f934 	bl	8000568 <__aeabi_f2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	e9cd 2300 	strd	r2, r3, [sp]
 8001308:	4622      	mov	r2, r4
 800130a:	462b      	mov	r3, r5
 800130c:	4858      	ldr	r0, [pc, #352]	; (8001470 <IMUgetConf+0x350>)
 800130e:	f7ff fe27 	bl	8000f60 <serialPrintf>

	switch ((ui8_regs[0] >> 2) & 0x03)
 8001312:	793b      	ldrb	r3, [r7, #4]
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b03      	cmp	r3, #3
 800131e:	d81c      	bhi.n	800135a <IMUgetConf+0x23a>
 8001320:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <IMUgetConf+0x208>)
 8001322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001326:	bf00      	nop
 8001328:	08001339 	.word	0x08001339
 800132c:	08001343 	.word	0x08001343
 8001330:	0800134b 	.word	0x0800134b
 8001334:	08001353 	.word	0x08001353
	{
		case LSM6DS33_LA_AABW_400Hz:	IMUsettings.linacc_aabw = 400; break;
 8001338:	4b44      	ldr	r3, [pc, #272]	; (800144c <IMUgetConf+0x32c>)
 800133a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800133e:	811a      	strh	r2, [r3, #8]
 8001340:	e01c      	b.n	800137c <IMUgetConf+0x25c>
		case LSM6DS33_LA_AABW_200Hz:	IMUsettings.linacc_aabw = 200; break;
 8001342:	4b42      	ldr	r3, [pc, #264]	; (800144c <IMUgetConf+0x32c>)
 8001344:	22c8      	movs	r2, #200	; 0xc8
 8001346:	811a      	strh	r2, [r3, #8]
 8001348:	e018      	b.n	800137c <IMUgetConf+0x25c>
		case LSM6DS33_LA_AABW_100Hz:	IMUsettings.linacc_aabw = 100; break;
 800134a:	4b40      	ldr	r3, [pc, #256]	; (800144c <IMUgetConf+0x32c>)
 800134c:	2264      	movs	r2, #100	; 0x64
 800134e:	811a      	strh	r2, [r3, #8]
 8001350:	e014      	b.n	800137c <IMUgetConf+0x25c>
		case LSM6DS33_LA_AABW_50Hz:		IMUsettings.linacc_aabw = 50; break;
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <IMUgetConf+0x32c>)
 8001354:	2232      	movs	r2, #50	; 0x32
 8001356:	811a      	strh	r2, [r3, #8]
 8001358:	e010      	b.n	800137c <IMUgetConf+0x25c>
		default:						TRACE("ERROR: LSM6DS33 lin. acc anti aliasing bandwidth at illegal setting"); return false; break;
 800135a:	f002 f98b 	bl	8003674 <HAL_GetTick>
 800135e:	ee07 0a90 	vmov	s15, r0
 8001362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001366:	ee17 0a90 	vmov	r0, s15
 800136a:	f7ff f8fd 	bl	8000568 <__aeabi_f2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4840      	ldr	r0, [pc, #256]	; (8001474 <IMUgetConf+0x354>)
 8001374:	f7ff fdf4 	bl	8000f60 <serialPrintf>
 8001378:	2300      	movs	r3, #0
 800137a:	e101      	b.n	8001580 <IMUgetConf+0x460>
	}
	TRACE("LSM6DS33 lin. acc. anti aliasing bandwidth at %i Hz", IMUsettings.linacc_aabw);
 800137c:	f002 f97a 	bl	8003674 <HAL_GetTick>
 8001380:	ee07 0a90 	vmov	s15, r0
 8001384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001388:	ee17 0a90 	vmov	r0, s15
 800138c:	f7ff f8ec 	bl	8000568 <__aeabi_f2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	492d      	ldr	r1, [pc, #180]	; (800144c <IMUgetConf+0x32c>)
 8001396:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800139a:	9100      	str	r1, [sp, #0]
 800139c:	4836      	ldr	r0, [pc, #216]	; (8001478 <IMUgetConf+0x358>)
 800139e:	f7ff fddf 	bl	8000f60 <serialPrintf>

	switch ((ui8_regs[1] >> 4) & 0x0F) // CTRL2_G
 80013a2:	797b      	ldrb	r3, [r7, #5]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d867      	bhi.n	8001480 <IMUgetConf+0x360>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <IMUgetConf+0x298>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013dd 	.word	0x080013dd
 80013bc:	08001403 	.word	0x08001403
 80013c0:	0800140b 	.word	0x0800140b
 80013c4:	08001413 	.word	0x08001413
 80013c8:	0800141b 	.word	0x0800141b
 80013cc:	08001423 	.word	0x08001423
 80013d0:	0800142b 	.word	0x0800142b
 80013d4:	08001435 	.word	0x08001435
 80013d8:	0800143f 	.word	0x0800143f
	{
		case LSM6DS33_ODR_0Hz:			IMUsettings.gyro_odr = 0; TRACE("LSM6DS33 gyro output turned off"); break;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <IMUgetConf+0x32c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	815a      	strh	r2, [r3, #10]
 80013e2:	f002 f947 	bl	8003674 <HAL_GetTick>
 80013e6:	ee07 0a90 	vmov	s15, r0
 80013ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ee:	ee17 0a90 	vmov	r0, s15
 80013f2:	f7ff f8b9 	bl	8000568 <__aeabi_f2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4820      	ldr	r0, [pc, #128]	; (800147c <IMUgetConf+0x35c>)
 80013fc:	f7ff fdb0 	bl	8000f60 <serialPrintf>
 8001400:	e04f      	b.n	80014a2 <IMUgetConf+0x382>
		case LSM6DS33_ODR_12_5Hz:		IMUsettings.gyro_odr = 13; break;
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <IMUgetConf+0x32c>)
 8001404:	220d      	movs	r2, #13
 8001406:	815a      	strh	r2, [r3, #10]
 8001408:	e04b      	b.n	80014a2 <IMUgetConf+0x382>
		case LSM6DS33_ODR_26Hz:			IMUsettings.gyro_odr = 26; break;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <IMUgetConf+0x32c>)
 800140c:	221a      	movs	r2, #26
 800140e:	815a      	strh	r2, [r3, #10]
 8001410:	e047      	b.n	80014a2 <IMUgetConf+0x382>
		case LSM6DS33_ODR_52Hz:			IMUsettings.gyro_odr = 52; break;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <IMUgetConf+0x32c>)
 8001414:	2234      	movs	r2, #52	; 0x34
 8001416:	815a      	strh	r2, [r3, #10]
 8001418:	e043      	b.n	80014a2 <IMUgetConf+0x382>
		case LSM6DS33_ODR_104Hz:		IMUsettings.gyro_odr = 104; break;
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <IMUgetConf+0x32c>)
 800141c:	2268      	movs	r2, #104	; 0x68
 800141e:	815a      	strh	r2, [r3, #10]
 8001420:	e03f      	b.n	80014a2 <IMUgetConf+0x382>
		case LSM6DS33_ODR_208Hz:		IMUsettings.gyro_odr = 208; break;
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <IMUgetConf+0x32c>)
 8001424:	22d0      	movs	r2, #208	; 0xd0
 8001426:	815a      	strh	r2, [r3, #10]
 8001428:	e03b      	b.n	80014a2 <IMUgetConf+0x382>
		case LSM6DS33_ODR_416Hz:		IMUsettings.gyro_odr = 417; break;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <IMUgetConf+0x32c>)
 800142c:	f240 12a1 	movw	r2, #417	; 0x1a1
 8001430:	815a      	strh	r2, [r3, #10]
 8001432:	e036      	b.n	80014a2 <IMUgetConf+0x382>
		case LSM6DS33_ODR_833Hz:		IMUsettings.gyro_odr = 833; break;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <IMUgetConf+0x32c>)
 8001436:	f240 3241 	movw	r2, #833	; 0x341
 800143a:	815a      	strh	r2, [r3, #10]
 800143c:	e031      	b.n	80014a2 <IMUgetConf+0x382>
		case LSM6DS33_ODR_1_66kHz:		IMUsettings.gyro_odr = 1667; break;
 800143e:	4b03      	ldr	r3, [pc, #12]	; (800144c <IMUgetConf+0x32c>)
 8001440:	f240 6283 	movw	r2, #1667	; 0x683
 8001444:	815a      	strh	r2, [r3, #10]
 8001446:	e02c      	b.n	80014a2 <IMUgetConf+0x382>
 8001448:	0800c828 	.word	0x0800c828
 800144c:	20000000 	.word	0x20000000
 8001450:	0800c860 	.word	0x0800c860
 8001454:	0800c890 	.word	0x0800c890
 8001458:	0800c8d8 	.word	0x0800c8d8
 800145c:	3d79db23 	.word	0x3d79db23
 8001460:	3df9db23 	.word	0x3df9db23
 8001464:	3e79db23 	.word	0x3e79db23
 8001468:	3ef9db23 	.word	0x3ef9db23
 800146c:	0800c904 	.word	0x0800c904
 8001470:	0800c94c 	.word	0x0800c94c
 8001474:	0800c97c 	.word	0x0800c97c
 8001478:	0800c9c8 	.word	0x0800c9c8
 800147c:	0800ca04 	.word	0x0800ca04
		default: 						TRACE("ERROR: LSM6DS33 gyro output data rate at illegal setting"); return false; break;
 8001480:	f002 f8f8 	bl	8003674 <HAL_GetTick>
 8001484:	ee07 0a90 	vmov	s15, r0
 8001488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148c:	ee17 0a90 	vmov	r0, s15
 8001490:	f7ff f86a 	bl	8000568 <__aeabi_f2d>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	483b      	ldr	r0, [pc, #236]	; (8001588 <IMUgetConf+0x468>)
 800149a:	f7ff fd61 	bl	8000f60 <serialPrintf>
 800149e:	2300      	movs	r3, #0
 80014a0:	e06e      	b.n	8001580 <IMUgetConf+0x460>
	}
	if (IMUsettings.gyro_odr > 0) 	TRACE("LSM6DS33 gyro output at %i Hz", IMUsettings.gyro_odr);
 80014a2:	4b3a      	ldr	r3, [pc, #232]	; (800158c <IMUgetConf+0x46c>)
 80014a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	dd12      	ble.n	80014d2 <IMUgetConf+0x3b2>
 80014ac:	f002 f8e2 	bl	8003674 <HAL_GetTick>
 80014b0:	ee07 0a90 	vmov	s15, r0
 80014b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b8:	ee17 0a90 	vmov	r0, s15
 80014bc:	f7ff f854 	bl	8000568 <__aeabi_f2d>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4931      	ldr	r1, [pc, #196]	; (800158c <IMUgetConf+0x46c>)
 80014c6:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80014ca:	9100      	str	r1, [sp, #0]
 80014cc:	4830      	ldr	r0, [pc, #192]	; (8001590 <IMUgetConf+0x470>)
 80014ce:	f7ff fd47 	bl	8000f60 <serialPrintf>

	switch ((ui8_regs[1] >> 1) & 0x07)
 80014d2:	797b      	ldrb	r3, [r7, #5]
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d823      	bhi.n	8001528 <IMUgetConf+0x408>
 80014e0:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <IMUgetConf+0x3c8>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	08001509 	.word	0x08001509
 80014ec:	08001501 	.word	0x08001501
 80014f0:	08001511 	.word	0x08001511
 80014f4:	08001529 	.word	0x08001529
 80014f8:	08001519 	.word	0x08001519
 80014fc:	08001521 	.word	0x08001521
	{
		case LSM6DS33_GY_FS_125dps:		IMUsettings.gyro_mDPS	= 4.375; break;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <IMUgetConf+0x46c>)
 8001502:	4a24      	ldr	r2, [pc, #144]	; (8001594 <IMUgetConf+0x474>)
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	e020      	b.n	800154a <IMUgetConf+0x42a>
		case LSM6DS33_GY_FS_250dps:		IMUsettings.gyro_mDPS	= 8.75; break;
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <IMUgetConf+0x46c>)
 800150a:	4a23      	ldr	r2, [pc, #140]	; (8001598 <IMUgetConf+0x478>)
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	e01c      	b.n	800154a <IMUgetConf+0x42a>
		case LSM6DS33_GY_FS_500dps:		IMUsettings.gyro_mDPS	= 17.5; break;
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <IMUgetConf+0x46c>)
 8001512:	4a22      	ldr	r2, [pc, #136]	; (800159c <IMUgetConf+0x47c>)
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	e018      	b.n	800154a <IMUgetConf+0x42a>
		case LSM6DS33_GY_FS_1000dps:	IMUsettings.gyro_mDPS	= 35.0; break;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <IMUgetConf+0x46c>)
 800151a:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <IMUgetConf+0x480>)
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	e014      	b.n	800154a <IMUgetConf+0x42a>
		case LSM6DS33_GY_FS_2000dps:	IMUsettings.gyro_mDPS	= 70.0; break;
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <IMUgetConf+0x46c>)
 8001522:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <IMUgetConf+0x484>)
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	e010      	b.n	800154a <IMUgetConf+0x42a>
		default:						TRACE("ERROR: LSM6DS33 gyro full scale value at illegal setting"); return false; break;
 8001528:	f002 f8a4 	bl	8003674 <HAL_GetTick>
 800152c:	ee07 0a90 	vmov	s15, r0
 8001530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001534:	ee17 0a90 	vmov	r0, s15
 8001538:	f7ff f816 	bl	8000568 <__aeabi_f2d>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4819      	ldr	r0, [pc, #100]	; (80015a8 <IMUgetConf+0x488>)
 8001542:	f7ff fd0d 	bl	8000f60 <serialPrintf>
 8001546:	2300      	movs	r3, #0
 8001548:	e01a      	b.n	8001580 <IMUgetConf+0x460>
	}
	TRACE("LSM6DS33 raw gyro resolution: %.2f milli-degrees/sec.", IMUsettings.gyro_mDPS);
 800154a:	f002 f893 	bl	8003674 <HAL_GetTick>
 800154e:	ee07 0a90 	vmov	s15, r0
 8001552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001556:	ee17 0a90 	vmov	r0, s15
 800155a:	f7ff f805 	bl	8000568 <__aeabi_f2d>
 800155e:	4604      	mov	r4, r0
 8001560:	460d      	mov	r5, r1
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <IMUgetConf+0x46c>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fffe 	bl	8000568 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	e9cd 2300 	strd	r2, r3, [sp]
 8001574:	4622      	mov	r2, r4
 8001576:	462b      	mov	r3, r5
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <IMUgetConf+0x48c>)
 800157a:	f7ff fcf1 	bl	8000f60 <serialPrintf>
	return true;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bdb0      	pop	{r4, r5, r7, pc}
 8001588:	0800ca2c 	.word	0x0800ca2c
 800158c:	20000000 	.word	0x20000000
 8001590:	0800ca70 	.word	0x0800ca70
 8001594:	408c0000 	.word	0x408c0000
 8001598:	410c0000 	.word	0x410c0000
 800159c:	418c0000 	.word	0x418c0000
 80015a0:	420c0000 	.word	0x420c0000
 80015a4:	428c0000 	.word	0x428c0000
 80015a8:	0800ca98 	.word	0x0800ca98
 80015ac:	0800cadc 	.word	0x0800cadc

080015b0 <IMUinit>:

bool IMUinit(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
	uint8_t ui8_reg[2] = {0};
 80015b6:	2300      	movs	r3, #0
 80015b8:	80bb      	strh	r3, [r7, #4]

	if (!I2C_LSM6DS33_ReadRegister(LSM6DS33_WHO_AM_I_ADDR, ui8_reg, 1))
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2201      	movs	r2, #1
 80015be:	4619      	mov	r1, r3
 80015c0:	200f      	movs	r0, #15
 80015c2:	f7ff fd0f 	bl	8000fe4 <I2C_LSM6DS33_ReadRegister>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f083 0301 	eor.w	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d010      	beq.n	80015f4 <IMUinit+0x44>
	{
		TRACE("ERROR: LSM6DS33 did not respond to I2C address");
 80015d2:	f002 f84f 	bl	8003674 <HAL_GetTick>
 80015d6:	ee07 0a90 	vmov	s15, r0
 80015da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015de:	ee17 0a90 	vmov	r0, s15
 80015e2:	f7fe ffc1 	bl	8000568 <__aeabi_f2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4833      	ldr	r0, [pc, #204]	; (80016b8 <IMUinit+0x108>)
 80015ec:	f7ff fcb8 	bl	8000f60 <serialPrintf>
		return false;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e05d      	b.n	80016b0 <IMUinit+0x100>
	}
	if (ui8_reg[0] != LSM6DS33_WHOAMI)
 80015f4:	793b      	ldrb	r3, [r7, #4]
 80015f6:	2b69      	cmp	r3, #105	; 0x69
 80015f8:	d010      	beq.n	800161c <IMUinit+0x6c>
	{
		TRACE("LSM6DS33 ERROR: Product ID read failes");
 80015fa:	f002 f83b 	bl	8003674 <HAL_GetTick>
 80015fe:	ee07 0a90 	vmov	s15, r0
 8001602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001606:	ee17 0a90 	vmov	r0, s15
 800160a:	f7fe ffad 	bl	8000568 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	482a      	ldr	r0, [pc, #168]	; (80016bc <IMUinit+0x10c>)
 8001614:	f7ff fca4 	bl	8000f60 <serialPrintf>
		return false;
 8001618:	2300      	movs	r3, #0
 800161a:	e049      	b.n	80016b0 <IMUinit+0x100>
	}
	TRACE("LSM6DS33 detected");
 800161c:	f002 f82a 	bl	8003674 <HAL_GetTick>
 8001620:	ee07 0a90 	vmov	s15, r0
 8001624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001628:	ee17 0a90 	vmov	r0, s15
 800162c:	f7fe ff9c 	bl	8000568 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4822      	ldr	r0, [pc, #136]	; (80016c0 <IMUinit+0x110>)
 8001636:	f7ff fc93 	bl	8000f60 <serialPrintf>

	// Set IMU configuration
	ui8_reg[0] = (LSM6DS33_ODR_104Hz << 4) | (LSM6DS33_LA_FS_4G << 2) | LSM6DS33_LA_AABW_100Hz; // Linear acceleration configuration
 800163a:	234a      	movs	r3, #74	; 0x4a
 800163c:	713b      	strb	r3, [r7, #4]
	ui8_reg[1] = (LSM6DS33_ODR_104Hz << 4) | (LSM6DS33_GY_FS_125dps < 1);						// Gyro configuration
 800163e:	2340      	movs	r3, #64	; 0x40
 8001640:	717b      	strb	r3, [r7, #5]
	if (!I2C_LSM6DS33_WriteRegister(LSM6DS33_CTRL1_XL_ADDR, ui8_reg, 2))
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2202      	movs	r2, #2
 8001646:	4619      	mov	r1, r3
 8001648:	2010      	movs	r0, #16
 800164a:	f7ff fd1b 	bl	8001084 <I2C_LSM6DS33_WriteRegister>
 800164e:	4603      	mov	r3, r0
 8001650:	f083 0301 	eor.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d010      	beq.n	800167c <IMUinit+0xcc>
	{
		TRACE("ERROR: Failed to write LSM6DS33 configuration");
 800165a:	f002 f80b 	bl	8003674 <HAL_GetTick>
 800165e:	ee07 0a90 	vmov	s15, r0
 8001662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001666:	ee17 0a90 	vmov	r0, s15
 800166a:	f7fe ff7d 	bl	8000568 <__aeabi_f2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4814      	ldr	r0, [pc, #80]	; (80016c4 <IMUinit+0x114>)
 8001674:	f7ff fc74 	bl	8000f60 <serialPrintf>
		return false;
 8001678:	2300      	movs	r3, #0
 800167a:	e019      	b.n	80016b0 <IMUinit+0x100>
	}

	if (!IMUgetConf())
 800167c:	f7ff fd50 	bl	8001120 <IMUgetConf>
 8001680:	4603      	mov	r3, r0
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d010      	beq.n	80016ae <IMUinit+0xfe>
	{
		TRACE("ERROR: Failed ro read LSM6DS33 configuration");
 800168c:	f001 fff2 	bl	8003674 <HAL_GetTick>
 8001690:	ee07 0a90 	vmov	s15, r0
 8001694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001698:	ee17 0a90 	vmov	r0, s15
 800169c:	f7fe ff64 	bl	8000568 <__aeabi_f2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <IMUinit+0x118>)
 80016a6:	f7ff fc5b 	bl	8000f60 <serialPrintf>
		return false;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <IMUinit+0x100>
	}
	return true;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	0800c828 	.word	0x0800c828
 80016bc:	0800cb1c 	.word	0x0800cb1c
 80016c0:	0800cb4c 	.word	0x0800cb4c
 80016c4:	0800cb68 	.word	0x0800cb68
 80016c8:	0800cba0 	.word	0x0800cba0
 80016cc:	00000000 	.word	0x00000000

080016d0 <IMUread>:

bool IMUread()
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
	uint8_t ui8_regs[14] = {0};
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	811a      	strh	r2, [r3, #8]

	int16_t i16_rawTemperature = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	83fb      	strh	r3, [r7, #30]
	int16_t i16_rawGyroX = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	83bb      	strh	r3, [r7, #28]
	int16_t i16_rawGyroY = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	837b      	strh	r3, [r7, #26]
	int16_t i16_rawGyroZ = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	833b      	strh	r3, [r7, #24]
	int16_t i16_rawAccX = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	82fb      	strh	r3, [r7, #22]
	int16_t i16_rawAccY = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	82bb      	strh	r3, [r7, #20]
	int16_t i16_rawAccZ = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	827b      	strh	r3, [r7, #18]

	// Check first if new data is available
	if (!I2C_LSM6DS33_ReadRegister(LSM6DS33_STATUS_REG_ADDR, ui8_regs, 1))
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2201      	movs	r2, #1
 8001706:	4619      	mov	r1, r3
 8001708:	201e      	movs	r0, #30
 800170a:	f7ff fc6b 	bl	8000fe4 <I2C_LSM6DS33_ReadRegister>
 800170e:	4603      	mov	r3, r0
 8001710:	f083 0301 	eor.w	r3, r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d010      	beq.n	800173c <IMUread+0x6c>
	{
		TRACE("ERROR: LSM6DS33 did not respond to I2C address");
 800171a:	f001 ffab 	bl	8003674 <HAL_GetTick>
 800171e:	ee07 0a90 	vmov	s15, r0
 8001722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001726:	ee17 0a90 	vmov	r0, s15
 800172a:	f7fe ff1d 	bl	8000568 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	48b1      	ldr	r0, [pc, #708]	; (80019f8 <IMUread+0x328>)
 8001734:	f7ff fc14 	bl	8000f60 <serialPrintf>
		return false;
 8001738:	2300      	movs	r3, #0
 800173a:	e154      	b.n	80019e6 <IMUread+0x316>
	}
	if ((ui8_regs[0] & 0x07) != 0x07)
 800173c:	793b      	ldrb	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	2b07      	cmp	r3, #7
 8001744:	d010      	beq.n	8001768 <IMUread+0x98>
	{
		TRACE("ERROR: LSM6DS33 has no new data available yet");
 8001746:	f001 ff95 	bl	8003674 <HAL_GetTick>
 800174a:	ee07 0a90 	vmov	s15, r0
 800174e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001752:	ee17 0a90 	vmov	r0, s15
 8001756:	f7fe ff07 	bl	8000568 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	48a7      	ldr	r0, [pc, #668]	; (80019fc <IMUread+0x32c>)
 8001760:	f7ff fbfe 	bl	8000f60 <serialPrintf>
		return false;
 8001764:	2300      	movs	r3, #0
 8001766:	e13e      	b.n	80019e6 <IMUread+0x316>
	}

	if (!I2C_LSM6DS33_ReadRegister(LSM6DS33_OUT_TEMP_L_ADDR, ui8_regs, 14))
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	220e      	movs	r2, #14
 800176c:	4619      	mov	r1, r3
 800176e:	2020      	movs	r0, #32
 8001770:	f7ff fc38 	bl	8000fe4 <I2C_LSM6DS33_ReadRegister>
 8001774:	4603      	mov	r3, r0
 8001776:	f083 0301 	eor.w	r3, r3, #1
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d010      	beq.n	80017a2 <IMUread+0xd2>
	{
		TRACE("ERROR: LSM6DS33 did not respond to I2C address");
 8001780:	f001 ff78 	bl	8003674 <HAL_GetTick>
 8001784:	ee07 0a90 	vmov	s15, r0
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	ee17 0a90 	vmov	r0, s15
 8001790:	f7fe feea 	bl	8000568 <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4897      	ldr	r0, [pc, #604]	; (80019f8 <IMUread+0x328>)
 800179a:	f7ff fbe1 	bl	8000f60 <serialPrintf>
		return false;
 800179e:	2300      	movs	r3, #0
 80017a0:	e121      	b.n	80019e6 <IMUread+0x316>
	}

	i16_rawTemperature = (ui8_regs[1] << 8) | ui8_regs[0];
 80017a2:	797b      	ldrb	r3, [r7, #5]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b21a      	sxth	r2, r3
 80017a8:	793b      	ldrb	r3, [r7, #4]
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	83fb      	strh	r3, [r7, #30]
	i16_rawGyroX = (ui8_regs[3] << 8) | ui8_regs[2];
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	79bb      	ldrb	r3, [r7, #6]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	83bb      	strh	r3, [r7, #28]
	i16_rawGyroY = (ui8_regs[5] << 8) | ui8_regs[4];
 80017be:	7a7b      	ldrb	r3, [r7, #9]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	7a3b      	ldrb	r3, [r7, #8]
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	837b      	strh	r3, [r7, #26]
	i16_rawGyroZ = (ui8_regs[7] << 8) | ui8_regs[6];
 80017cc:	7afb      	ldrb	r3, [r7, #11]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	7abb      	ldrb	r3, [r7, #10]
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	833b      	strh	r3, [r7, #24]
	i16_rawAccX = (ui8_regs[9] << 8) | ui8_regs[8];
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	b21a      	sxth	r2, r3
 80017e0:	7b3b      	ldrb	r3, [r7, #12]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	82fb      	strh	r3, [r7, #22]
	i16_rawAccY = (ui8_regs[11] << 8) | ui8_regs[10];
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	7bbb      	ldrb	r3, [r7, #14]
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	82bb      	strh	r3, [r7, #20]
	i16_rawAccZ = (ui8_regs[13] << 8) | ui8_regs[12];
 80017f6:	7c7b      	ldrb	r3, [r7, #17]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	7c3b      	ldrb	r3, [r7, #16]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	827b      	strh	r3, [r7, #18]

	IMUoutput.fGyroXradps = i16_rawGyroX * IMUsettings.gyro_mDPS * M_PI/180.0 / 1000.0;
 8001804:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001810:	4b7b      	ldr	r3, [pc, #492]	; (8001a00 <IMUread+0x330>)
 8001812:	edd3 7a03 	vldr	s15, [r3, #12]
 8001816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181a:	ee17 0a90 	vmov	r0, s15
 800181e:	f7fe fea3 	bl	8000568 <__aeabi_f2d>
 8001822:	a373      	add	r3, pc, #460	; (adr r3, 80019f0 <IMUread+0x320>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe fef6 	bl	8000618 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	4b72      	ldr	r3, [pc, #456]	; (8001a04 <IMUread+0x334>)
 800183a:	f7ff f817 	bl	800086c <__aeabi_ddiv>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	4b6f      	ldr	r3, [pc, #444]	; (8001a08 <IMUread+0x338>)
 800184c:	f7ff f80e 	bl	800086c <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f9b6 	bl	8000bc8 <__aeabi_d2f>
 800185c:	4603      	mov	r3, r0
 800185e:	4a6b      	ldr	r2, [pc, #428]	; (8001a0c <IMUread+0x33c>)
 8001860:	6113      	str	r3, [r2, #16]
	IMUoutput.fGyroYradps = i16_rawGyroY * IMUsettings.gyro_mDPS * M_PI/180.0 / 1000.0;
 8001862:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001866:	ee07 3a90 	vmov	s15, r3
 800186a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800186e:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <IMUread+0x330>)
 8001870:	edd3 7a03 	vldr	s15, [r3, #12]
 8001874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001878:	ee17 0a90 	vmov	r0, s15
 800187c:	f7fe fe74 	bl	8000568 <__aeabi_f2d>
 8001880:	a35b      	add	r3, pc, #364	; (adr r3, 80019f0 <IMUread+0x320>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f7fe fec7 	bl	8000618 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <IMUread+0x334>)
 8001898:	f7fe ffe8 	bl	800086c <__aeabi_ddiv>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	4b57      	ldr	r3, [pc, #348]	; (8001a08 <IMUread+0x338>)
 80018aa:	f7fe ffdf 	bl	800086c <__aeabi_ddiv>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f987 	bl	8000bc8 <__aeabi_d2f>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a53      	ldr	r2, [pc, #332]	; (8001a0c <IMUread+0x33c>)
 80018be:	6153      	str	r3, [r2, #20]
	IMUoutput.fGyroZradps = i16_rawGyroZ * IMUsettings.gyro_mDPS * M_PI/180.0 / 1000.0;
 80018c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018cc:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <IMUread+0x330>)
 80018ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	ee17 0a90 	vmov	r0, s15
 80018da:	f7fe fe45 	bl	8000568 <__aeabi_f2d>
 80018de:	a344      	add	r3, pc, #272	; (adr r3, 80019f0 <IMUread+0x320>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe98 	bl	8000618 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <IMUread+0x334>)
 80018f6:	f7fe ffb9 	bl	800086c <__aeabi_ddiv>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <IMUread+0x338>)
 8001908:	f7fe ffb0 	bl	800086c <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f958 	bl	8000bc8 <__aeabi_d2f>
 8001918:	4603      	mov	r3, r0
 800191a:	4a3c      	ldr	r2, [pc, #240]	; (8001a0c <IMUread+0x33c>)
 800191c:	6193      	str	r3, [r2, #24]

	IMUoutput.fAccX =  i16_rawAccX * IMUsettings.linacc_mG * GRAVITY_EARTH / 1000.0;
 800191e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <IMUread+0x330>)
 800192c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001934:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001a10 <IMUread+0x340>
 8001938:	ee27 7a87 	vmul.f32	s14, s15, s14
 800193c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001a14 <IMUread+0x344>
 8001940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001944:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <IMUread+0x33c>)
 8001946:	edc3 7a01 	vstr	s15, [r3, #4]
	IMUoutput.fAccY =  i16_rawAccY * IMUsettings.linacc_mG * GRAVITY_EARTH / 1000.0;
 800194a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001956:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <IMUread+0x330>)
 8001958:	edd3 7a01 	vldr	s15, [r3, #4]
 800195c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001960:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001a10 <IMUread+0x340>
 8001964:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001968:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001a14 <IMUread+0x344>
 800196c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001970:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <IMUread+0x33c>)
 8001972:	edc3 7a02 	vstr	s15, [r3, #8]
	IMUoutput.fAccZ =  i16_rawAccZ * IMUsettings.linacc_mG * GRAVITY_EARTH / 1000.0;
 8001976:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <IMUread+0x330>)
 8001984:	edd3 7a01 	vldr	s15, [r3, #4]
 8001988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001a10 <IMUread+0x340>
 8001990:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001994:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001a14 <IMUread+0x344>
 8001998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <IMUread+0x33c>)
 800199e:	edc3 7a03 	vstr	s15, [r3, #12]

	IMUoutput.fTemperatureDegC = (float)i16_rawTemperature / 16.0 + 25.0;
 80019a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ae:	ee17 0a90 	vmov	r0, s15
 80019b2:	f7fe fdd9 	bl	8000568 <__aeabi_f2d>
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <IMUread+0x348>)
 80019bc:	f7fe ff56 	bl	800086c <__aeabi_ddiv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <IMUread+0x34c>)
 80019ce:	f7fe fc6d 	bl	80002ac <__adddf3>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f8f5 	bl	8000bc8 <__aeabi_d2f>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <IMUread+0x33c>)
 80019e2:	6013      	str	r3, [r2, #0]
	return true;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	54442d18 	.word	0x54442d18
 80019f4:	400921fb 	.word	0x400921fb
 80019f8:	0800c828 	.word	0x0800c828
 80019fc:	0800cbd8 	.word	0x0800cbd8
 8001a00:	20000000 	.word	0x20000000
 8001a04:	40668000 	.word	0x40668000
 8001a08:	408f4000 	.word	0x408f4000
 8001a0c:	20000208 	.word	0x20000208
 8001a10:	411ce80a 	.word	0x411ce80a
 8001a14:	447a0000 	.word	0x447a0000
 8001a18:	40300000 	.word	0x40300000
 8001a1c:	40390000 	.word	0x40390000

08001a20 <ReadAnalogChannel>:

uint32_t ReadAnalogChannel(ADC_HandleTypeDef* hadc, uint32_t ui32Channel)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ui32Channel;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	4619      	mov	r1, r3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f001 fff0 	bl	8003a30 <HAL_ADC_ConfigChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <ReadAnalogChannel+0x3a>
	{
	    Error_Handler();
 8001a56:	f001 f815 	bl	8002a84 <Error_Handler>
	}
	HAL_ADC_Start(hadc);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f001 fe7e 	bl	800375c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f001 ff4b 	bl	8003900 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(hadc);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f001 ffd3 	bl	8003a16 <HAL_ADC_GetValue>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a80:	b0a6      	sub	sp, #152	; 0x98
 8001a82:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a84:	f001 fd90 	bl	80035a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a88:	f000 f9c6 	bl	8001e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a8c:	f000 fda4 	bl	80025d8 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001a90:	f000 fd26 	bl	80024e0 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 8001a94:	f000 fd52 	bl	800253c <MX_FMC_Init>
  MX_LTDC_Init();
 8001a98:	f000 fb92 	bl	80021c0 <MX_LTDC_Init>
  MX_I2C1_Init();
 8001a9c:	f000 fb0e 	bl	80020bc <MX_I2C1_Init>
  MX_ADC3_Init();
 8001aa0:	f000 fa90 	bl	8001fc4 <MX_ADC3_Init>
  MX_DAC_Init();
 8001aa4:	f000 fae0 	bl	8002068 <MX_DAC_Init>
  MX_SDIO_SD_Init();
 8001aa8:	f000 fc46 	bl	8002338 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8001aac:	f000 fc64 	bl	8002378 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001ab0:	f000 fc98 	bl	80023e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ab4:	f000 fcc0 	bl	8002438 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001ab8:	f000 fce8 	bl	800248c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001abc:	f007 fd44 	bl	8009548 <MX_FATFS_Init>
  MX_I2C2_Init();
 8001ac0:	f000 fb3e 	bl	8002140 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001ac4:	f000 fa2a 	bl	8001f1c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_SET); // Turn on power
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2102      	movs	r1, #2
 8001acc:	48a9      	ldr	r0, [pc, #676]	; (8001d74 <main+0x2f8>)
 8001ace:	f002 fcf7 	bl	80044c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	48a8      	ldr	r0, [pc, #672]	; (8001d78 <main+0x2fc>)
 8001ad8:	f002 fcf2 	bl	80044c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2110      	movs	r1, #16
 8001ae0:	48a5      	ldr	r0, [pc, #660]	; (8001d78 <main+0x2fc>)
 8001ae2:	f002 fced 	bl	80044c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2120      	movs	r1, #32
 8001aea:	48a3      	ldr	r0, [pc, #652]	; (8001d78 <main+0x2fc>)
 8001aec:	f002 fce8 	bl	80044c0 <HAL_GPIO_WritePin>

  // Turn on UART3 power
  HAL_GPIO_WritePin(UART3Pwr_GPIO_Port, UART3Pwr_Pin, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af6:	48a1      	ldr	r0, [pc, #644]	; (8001d7c <main+0x300>)
 8001af8:	f002 fce2 	bl	80044c0 <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8001afc:	2064      	movs	r0, #100	; 0x64
 8001afe:	f001 fdc5 	bl	800368c <HAL_Delay>

  if (!IMUinit())
 8001b02:	f7ff fd55 	bl	80015b0 <IMUinit>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00f      	beq.n	8001b32 <main+0xb6>
  {
	  TRACE("ERROR: touchPanelInit() failed");
 8001b12:	f001 fdaf 	bl	8003674 <HAL_GetTick>
 8001b16:	ee07 0a90 	vmov	s15, r0
 8001b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1e:	ee17 0a90 	vmov	r0, s15
 8001b22:	f7fe fd21 	bl	8000568 <__aeabi_f2d>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4895      	ldr	r0, [pc, #596]	; (8001d80 <main+0x304>)
 8001b2c:	f7ff fa18 	bl	8000f60 <serialPrintf>
	  asm("bkpt 255");
 8001b30:	beff      	bkpt	0x00ff
  }

#ifdef WITHACCGYRO
  TRACE("STM32_T;T;AX;AY;AZ;GX;GY;GZ;LHm;LHc;LHM;LVm;LVc;LHM;RHm;RHc;RHM;RVm;RVc;RVM;S1m;S1c;S1M");
#else
  TRACE("STM32_T;T;LHm;LHc;LHM;LVm;LVc;LHM;RHm;RHc;RHM;RVm;RVc;RVM;S1m;S1c;S1M");
 8001b32:	f001 fd9f 	bl	8003674 <HAL_GetTick>
 8001b36:	ee07 0a90 	vmov	s15, r0
 8001b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3e:	ee17 0a90 	vmov	r0, s15
 8001b42:	f7fe fd11 	bl	8000568 <__aeabi_f2d>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	488e      	ldr	r0, [pc, #568]	; (8001d84 <main+0x308>)
 8001b4c:	f7ff fa08 	bl	8000f60 <serialPrintf>
#endif
  HAL_Delay(1000);
 8001b50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b54:	f001 fd9a 	bl	800368c <HAL_Delay>
  /* USER CODE END 2 */

  uint32_t ui32_StickLHmin = 4095;
 8001b58:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b5c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t ui32_StickLVmin = 4095;
 8001b5e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t ui32_StickRHmin = 4095;
 8001b64:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t ui32_StickRVmin = 4095;
 8001b6a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t ui32_Slider1min = 4095;
 8001b70:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t ui32_StickLHmax = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t ui32_StickLVmax = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t ui32_StickRHmax = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t ui32_StickRVmax = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ui32_Slider1max = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]

  uint8_t ui8_iterator = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	77fb      	strb	r3, [r7, #31]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (IMUread())
 8001b8e:	f7ff fd9f 	bl	80016d0 <IMUread>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8107 	beq.w	8001da8 <main+0x32c>
	  {
		  HAL_ADC_Start(&hadc1);
 8001b9a:	487b      	ldr	r0, [pc, #492]	; (8001d88 <main+0x30c>)
 8001b9c:	f001 fdde 	bl	800375c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	4878      	ldr	r0, [pc, #480]	; (8001d88 <main+0x30c>)
 8001ba6:	f001 feab 	bl	8003900 <HAL_ADC_PollForConversion>
		  uint32_t ui32_STM32Temperature = HAL_ADC_GetValue(&hadc1);
 8001baa:	4877      	ldr	r0, [pc, #476]	; (8001d88 <main+0x30c>)
 8001bac:	f001 ff33 	bl	8003a16 <HAL_ADC_GetValue>
 8001bb0:	61b8      	str	r0, [r7, #24]
		  float fSTM32TempDegC = (80.0/(float)(*ADDR_TS_CAL2 - *ADDR_TS_CAL1))*(float)((float)ui32_STM32Temperature - *ADDR_TS_CAL1) + 30.0;
 8001bb2:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <main+0x310>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b75      	ldr	r3, [pc, #468]	; (8001d90 <main+0x314>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc6:	ee17 0a90 	vmov	r0, s15
 8001bca:	f7fe fccd 	bl	8000568 <__aeabi_f2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	496f      	ldr	r1, [pc, #444]	; (8001d94 <main+0x318>)
 8001bd8:	f7fe fe48 	bl	800086c <__aeabi_ddiv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	ee07 3a90 	vmov	s15, r3
 8001bea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bee:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <main+0x314>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bfe:	ee17 0a90 	vmov	r0, s15
 8001c02:	f7fe fcb1 	bl	8000568 <__aeabi_f2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	f7fe fd03 	bl	8000618 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	4b5e      	ldr	r3, [pc, #376]	; (8001d98 <main+0x31c>)
 8001c20:	f7fe fb44 	bl	80002ac <__adddf3>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe ffcc 	bl	8000bc8 <__aeabi_d2f>
 8001c30:	4603      	mov	r3, r0
 8001c32:	617b      	str	r3, [r7, #20]

		  uint32_t ui32_StickLH = ReadAnalogChannel(&hadc3, ADC_CHANNEL_0);  // ADC3_IN0
 8001c34:	2100      	movs	r1, #0
 8001c36:	4859      	ldr	r0, [pc, #356]	; (8001d9c <main+0x320>)
 8001c38:	f7ff fef2 	bl	8001a20 <ReadAnalogChannel>
 8001c3c:	6138      	str	r0, [r7, #16]
		  uint32_t ui32_StickLV = ReadAnalogChannel(&hadc3, ADC_CHANNEL_1);  // ADC3_IN1
 8001c3e:	2101      	movs	r1, #1
 8001c40:	4856      	ldr	r0, [pc, #344]	; (8001d9c <main+0x320>)
 8001c42:	f7ff feed 	bl	8001a20 <ReadAnalogChannel>
 8001c46:	60f8      	str	r0, [r7, #12]
		  uint32_t ui32_StickRH = ReadAnalogChannel(&hadc3, ADC_CHANNEL_2);  // ADC3_IN2
 8001c48:	2102      	movs	r1, #2
 8001c4a:	4854      	ldr	r0, [pc, #336]	; (8001d9c <main+0x320>)
 8001c4c:	f7ff fee8 	bl	8001a20 <ReadAnalogChannel>
 8001c50:	60b8      	str	r0, [r7, #8]
		  uint32_t ui32_StickRV = ReadAnalogChannel(&hadc3, ADC_CHANNEL_3);  // ADC3_IN3
 8001c52:	2103      	movs	r1, #3
 8001c54:	4851      	ldr	r0, [pc, #324]	; (8001d9c <main+0x320>)
 8001c56:	f7ff fee3 	bl	8001a20 <ReadAnalogChannel>
 8001c5a:	6078      	str	r0, [r7, #4]
		  uint32_t ui32_Slider1 = ReadAnalogChannel(&hadc3, ADC_CHANNEL_4);  // ADC3_IN4
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	484f      	ldr	r0, [pc, #316]	; (8001d9c <main+0x320>)
 8001c60:	f7ff fede 	bl	8001a20 <ReadAnalogChannel>
 8001c64:	6038      	str	r0, [r7, #0]

		  if (ui32_StickLH < ui32_StickLHmin) ui32_StickLHmin = ui32_StickLH;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d201      	bcs.n	8001c72 <main+0x1f6>
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	647b      	str	r3, [r7, #68]	; 0x44
		  if (ui32_StickLH > ui32_StickLHmax) ui32_StickLHmax = ui32_StickLH;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d901      	bls.n	8001c7e <main+0x202>
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30

		  if (ui32_StickLV < ui32_StickLVmin) ui32_StickLVmin = ui32_StickLV;
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d201      	bcs.n	8001c8a <main+0x20e>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	643b      	str	r3, [r7, #64]	; 0x40
		  if (ui32_StickLV > ui32_StickLVmax) ui32_StickLVmax = ui32_StickLV;
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d901      	bls.n	8001c96 <main+0x21a>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c

		  if (ui32_StickRH < ui32_StickRHmin) ui32_StickRHmin = ui32_StickRH;
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d201      	bcs.n	8001ca2 <main+0x226>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
		  if (ui32_StickRH > ui32_StickRHmax) ui32_StickRHmax = ui32_StickRH;
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d901      	bls.n	8001cae <main+0x232>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28

		  if (ui32_StickRV < ui32_StickRVmin) ui32_StickRVmin = ui32_StickRV;
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d201      	bcs.n	8001cba <main+0x23e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
		  if (ui32_StickRV > ui32_StickRVmax) ui32_StickRVmax = ui32_StickRV;
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d901      	bls.n	8001cc6 <main+0x24a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24

		  if (ui32_Slider1 < ui32_Slider1min) ui32_Slider1min = ui32_Slider1;
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d201      	bcs.n	8001cd2 <main+0x256>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
		  if (ui32_Slider1 > ui32_Slider1max) ui32_Slider1max = ui32_Slider1;
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d901      	bls.n	8001cde <main+0x262>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	623b      	str	r3, [r7, #32]

		  ui8_iterator++;
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	77fb      	strb	r3, [r7, #31]
		  HAL_Delay(50);
 8001ce4:	2032      	movs	r0, #50	; 0x32
 8001ce6:	f001 fcd1 	bl	800368c <HAL_Delay>


		  if (ui8_iterator > 20)
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	2b14      	cmp	r3, #20
 8001cee:	d96a      	bls.n	8001dc6 <main+0x34a>
		  {
			  ui8_iterator = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	77fb      	strb	r3, [r7, #31]
						  ui32_StickLVmin, ui32_StickLV, ui32_StickLVmax,
						  ui32_StickRHmin, ui32_StickRH, ui32_StickRHmax,
						  ui32_StickRVmin, ui32_StickRV, ui32_StickRVmax,
						  ui32_Slider1min, ui32_Slider1, ui32_Slider1max);
#else
			  TRACE("%.2f;%.2f;%u;%u;%u;%u;%u;%u;%u;%u;%u;%u;%u;%u;%u;%u;%u",
 8001cf4:	f001 fcbe 	bl	8003674 <HAL_GetTick>
 8001cf8:	ee07 0a90 	vmov	s15, r0
 8001cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d00:	ee17 0a90 	vmov	r0, s15
 8001d04:	f7fe fc30 	bl	8000568 <__aeabi_f2d>
 8001d08:	4680      	mov	r8, r0
 8001d0a:	4689      	mov	r9, r1
 8001d0c:	6978      	ldr	r0, [r7, #20]
 8001d0e:	f7fe fc2b 	bl	8000568 <__aeabi_f2d>
 8001d12:	4604      	mov	r4, r0
 8001d14:	460d      	mov	r5, r1
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <main+0x324>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc24 	bl	8000568 <__aeabi_f2d>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	9112      	str	r1, [sp, #72]	; 0x48
 8001d28:	6839      	ldr	r1, [r7, #0]
 8001d2a:	9111      	str	r1, [sp, #68]	; 0x44
 8001d2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d2e:	9110      	str	r1, [sp, #64]	; 0x40
 8001d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d32:	910f      	str	r1, [sp, #60]	; 0x3c
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	910e      	str	r1, [sp, #56]	; 0x38
 8001d38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d3a:	910d      	str	r1, [sp, #52]	; 0x34
 8001d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d3e:	910c      	str	r1, [sp, #48]	; 0x30
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	910b      	str	r1, [sp, #44]	; 0x2c
 8001d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d46:	910a      	str	r1, [sp, #40]	; 0x28
 8001d48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d4a:	9109      	str	r1, [sp, #36]	; 0x24
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	9108      	str	r1, [sp, #32]
 8001d50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001d52:	9107      	str	r1, [sp, #28]
 8001d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d56:	9106      	str	r1, [sp, #24]
 8001d58:	6939      	ldr	r1, [r7, #16]
 8001d5a:	9105      	str	r1, [sp, #20]
 8001d5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d5e:	9104      	str	r1, [sp, #16]
 8001d60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d64:	e9cd 4500 	strd	r4, r5, [sp]
 8001d68:	4642      	mov	r2, r8
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <main+0x328>)
 8001d6e:	f7ff f8f7 	bl	8000f60 <serialPrintf>
 8001d72:	e028      	b.n	8001dc6 <main+0x34a>
 8001d74:	40022400 	.word	0x40022400
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	0800cc10 	.word	0x0800cc10
 8001d84:	0800cc38 	.word	0x0800cc38
 8001d88:	200007f0 	.word	0x200007f0
 8001d8c:	1fff7a2e 	.word	0x1fff7a2e
 8001d90:	1fff7a2c 	.word	0x1fff7a2c
 8001d94:	40540000 	.word	0x40540000
 8001d98:	403e0000 	.word	0x403e0000
 8001d9c:	20000838 	.word	0x20000838
 8001da0:	20000208 	.word	0x20000208
 8001da4:	0800cc88 	.word	0x0800cc88
						  ui32_Slider1min, ui32_Slider1, ui32_Slider1max);
#endif
		  }
	  }
	  else
		  TRACE("Failed reading IMU");
 8001da8:	f001 fc64 	bl	8003674 <HAL_GetTick>
 8001dac:	ee07 0a90 	vmov	s15, r0
 8001db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db4:	ee17 0a90 	vmov	r0, s15
 8001db8:	f7fe fbd6 	bl	8000568 <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4812      	ldr	r0, [pc, #72]	; (8001e0c <main+0x390>)
 8001dc2:	f7ff f8cd 	bl	8000f60 <serialPrintf>

	  // Check Power-Off
	  if (HAL_GPIO_ReadPin(PWRswitch_GPIO_Port, PWRswitch_Pin) == GPIO_PIN_RESET)
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	4811      	ldr	r0, [pc, #68]	; (8001e10 <main+0x394>)
 8001dca:	f002 fb61 	bl	8004490 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d114      	bne.n	8001dfe <main+0x382>
	  {
		  //HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
		  //HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2120      	movs	r1, #32
 8001dd8:	480e      	ldr	r0, [pc, #56]	; (8001e14 <main+0x398>)
 8001dda:	f002 fb71 	bl	80044c0 <HAL_GPIO_WritePin>

		  // Check again in 1 second
		  HAL_Delay(1000);
 8001dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de2:	f001 fc53 	bl	800368c <HAL_Delay>
		  if (HAL_GPIO_ReadPin(PWRswitch_GPIO_Port, PWRswitch_Pin) == GPIO_PIN_RESET)
 8001de6:	2101      	movs	r1, #1
 8001de8:	4809      	ldr	r0, [pc, #36]	; (8001e10 <main+0x394>)
 8001dea:	f002 fb51 	bl	8004490 <HAL_GPIO_ReadPin>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d104      	bne.n	8001dfe <main+0x382>
		  {
			  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_RESET); // Turn off power
 8001df4:	2200      	movs	r2, #0
 8001df6:	2102      	movs	r1, #2
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <main+0x394>)
 8001dfa:	f002 fb61 	bl	80044c0 <HAL_GPIO_WritePin>
		  }
	  }
	  HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2120      	movs	r1, #32
 8001e02:	4804      	ldr	r0, [pc, #16]	; (8001e14 <main+0x398>)
 8001e04:	f002 fb5c 	bl	80044c0 <HAL_GPIO_WritePin>
	  if (IMUread())
 8001e08:	e6c1      	b.n	8001b8e <main+0x112>
 8001e0a:	bf00      	nop
 8001e0c:	0800ccc8 	.word	0x0800ccc8
 8001e10:	40022400 	.word	0x40022400
 8001e14:	40021000 	.word	0x40021000

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0a0      	sub	sp, #128	; 0x80
 8001e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e22:	2230      	movs	r2, #48	; 0x30
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f007 fdb2 	bl	8009990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	2230      	movs	r2, #48	; 0x30
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f007 fda3 	bl	8009990 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <SystemClock_Config+0xfc>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a30      	ldr	r2, [pc, #192]	; (8001f14 <SystemClock_Config+0xfc>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <SystemClock_Config+0xfc>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <SystemClock_Config+0x100>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2a      	ldr	r2, [pc, #168]	; (8001f18 <SystemClock_Config+0x100>)
 8001e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <SystemClock_Config+0x100>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e82:	2301      	movs	r3, #1
 8001e84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e8a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e94:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001e96:	2306      	movs	r3, #6
 8001e98:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e9a:	23a8      	movs	r3, #168	; 0xa8
 8001e9c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fef4 	bl	8005c98 <HAL_RCC_OscConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001eb6:	f000 fde5 	bl	8002a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eba:	230f      	movs	r3, #15
 8001ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ec6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001eca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ed2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ed6:	2105      	movs	r1, #5
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 f955 	bl	8006188 <HAL_RCC_ClockConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001ee4:	f000 fdce 	bl	8002a84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001eec:	2332      	movs	r3, #50	; 0x32
 8001eee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 fb13 	bl	8006528 <HAL_RCCEx_PeriphCLKConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001f08:	f000 fdbc 	bl	8002a84 <Error_Handler>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3780      	adds	r7, #128	; 0x80
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40007000 	.word	0x40007000

08001f1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f22:	463b      	mov	r3, r7
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f2e:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f30:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <MX_ADC1_Init+0x9c>)
 8001f32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <MX_ADC1_Init+0xa0>)
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f62:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f7e:	f001 fba9 	bl	80036d4 <HAL_ADC_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f88:	f000 fd7c 	bl	8002a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_ADC1_Init+0xa4>)
 8001f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f98:	463b      	mov	r3, r7
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_ADC1_Init+0x98>)
 8001f9e:	f001 fd47 	bl	8003a30 <HAL_ADC_ConfigChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001fa8:	f000 fd6c 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200007f0 	.word	0x200007f0
 8001fb8:	40012000 	.word	0x40012000
 8001fbc:	0f000001 	.word	0x0f000001
 8001fc0:	10000012 	.word	0x10000012

08001fc4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fca:	463b      	mov	r3, r7
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <MX_ADC3_Init+0x98>)
 8001fd8:	4a21      	ldr	r2, [pc, #132]	; (8002060 <MX_ADC3_Init+0x9c>)
 8001fda:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <MX_ADC3_Init+0x98>)
 8001fde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fe2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <MX_ADC3_Init+0x98>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <MX_ADC3_Init+0x98>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MX_ADC3_Init+0x98>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ff6:	4b19      	ldr	r3, [pc, #100]	; (800205c <MX_ADC3_Init+0x98>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <MX_ADC3_Init+0x98>)
 8002000:	2200      	movs	r2, #0
 8002002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <MX_ADC3_Init+0x98>)
 8002006:	4a17      	ldr	r2, [pc, #92]	; (8002064 <MX_ADC3_Init+0xa0>)
 8002008:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_ADC3_Init+0x98>)
 800200c:	2200      	movs	r2, #0
 800200e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <MX_ADC3_Init+0x98>)
 8002012:	2201      	movs	r2, #1
 8002014:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_ADC3_Init+0x98>)
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_ADC3_Init+0x98>)
 8002020:	2201      	movs	r2, #1
 8002022:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <MX_ADC3_Init+0x98>)
 8002026:	f001 fb55 	bl	80036d4 <HAL_ADC_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002030:	f000 fd28 	bl	8002a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002034:	2300      	movs	r3, #0
 8002036:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002038:	2301      	movs	r3, #1
 800203a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002040:	463b      	mov	r3, r7
 8002042:	4619      	mov	r1, r3
 8002044:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_ADC3_Init+0x98>)
 8002046:	f001 fcf3 	bl	8003a30 <HAL_ADC_ConfigChannel>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002050:	f000 fd18 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000838 	.word	0x20000838
 8002060:	40012200 	.word	0x40012200
 8002064:	0f000001 	.word	0x0f000001

08002068 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800206e:	463b      	mov	r3, r7
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002076:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <MX_DAC_Init+0x4c>)
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <MX_DAC_Init+0x50>)
 800207a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <MX_DAC_Init+0x4c>)
 800207e:	f001 ffea 	bl	8004056 <HAL_DAC_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002088:	f000 fcfc 	bl	8002a84 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800208c:	2300      	movs	r3, #0
 800208e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002094:	463b      	mov	r3, r7
 8002096:	2200      	movs	r2, #0
 8002098:	4619      	mov	r1, r3
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <MX_DAC_Init+0x4c>)
 800209c:	f001 fffd 	bl	800409a <HAL_DAC_ConfigChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80020a6:	f000 fced 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200008c4 	.word	0x200008c4
 80020b8:	40007400 	.word	0x40007400

080020bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020c0:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <MX_I2C1_Init+0x78>)
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <MX_I2C1_Init+0x7c>)
 80020c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <MX_I2C1_Init+0x78>)
 80020c8:	4a1c      	ldr	r2, [pc, #112]	; (800213c <MX_I2C1_Init+0x80>)
 80020ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <MX_I2C1_Init+0x78>)
 80020ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020d2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_I2C1_Init+0x78>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_I2C1_Init+0x78>)
 80020dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_I2C1_Init+0x78>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_I2C1_Init+0x78>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_I2C1_Init+0x78>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_I2C1_Init+0x78>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020fa:	480e      	ldr	r0, [pc, #56]	; (8002134 <MX_I2C1_Init+0x78>)
 80020fc:	f002 f9fa 	bl	80044f4 <HAL_I2C_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8002106:	f000 fcbd 	bl	8002a84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800210a:	2100      	movs	r1, #0
 800210c:	4809      	ldr	r0, [pc, #36]	; (8002134 <MX_I2C1_Init+0x78>)
 800210e:	f003 f986 	bl	800541e <HAL_I2CEx_ConfigAnalogFilter>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8002118:	f000 fcb4 	bl	8002a84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800211c:	2100      	movs	r1, #0
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_I2C1_Init+0x78>)
 8002120:	f003 f9b9 	bl	8005496 <HAL_I2CEx_ConfigDigitalFilter>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800212a:	f000 fcab 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000298 	.word	0x20000298
 8002138:	40005400 	.word	0x40005400
 800213c:	00061a80 	.word	0x00061a80

08002140 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <MX_I2C2_Init+0x74>)
 8002146:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <MX_I2C2_Init+0x78>)
 8002148:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <MX_I2C2_Init+0x74>)
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <MX_I2C2_Init+0x7c>)
 800214e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <MX_I2C2_Init+0x74>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <MX_I2C2_Init+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_I2C2_Init+0x74>)
 800215e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002162:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <MX_I2C2_Init+0x74>)
 8002166:	2200      	movs	r2, #0
 8002168:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <MX_I2C2_Init+0x74>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <MX_I2C2_Init+0x74>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_I2C2_Init+0x74>)
 8002178:	2200      	movs	r2, #0
 800217a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <MX_I2C2_Init+0x74>)
 800217e:	f002 f9b9 	bl	80044f4 <HAL_I2C_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002188:	f000 fc7c 	bl	8002a84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800218c:	2100      	movs	r1, #0
 800218e:	4809      	ldr	r0, [pc, #36]	; (80021b4 <MX_I2C2_Init+0x74>)
 8002190:	f003 f945 	bl	800541e <HAL_I2CEx_ConfigAnalogFilter>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800219a:	f000 fc73 	bl	8002a84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800219e:	2100      	movs	r1, #0
 80021a0:	4804      	ldr	r0, [pc, #16]	; (80021b4 <MX_I2C2_Init+0x74>)
 80021a2:	f003 f978 	bl	8005496 <HAL_I2CEx_ConfigDigitalFilter>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80021ac:	f000 fc6a 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200006f4 	.word	0x200006f4
 80021b8:	40005800 	.word	0x40005800
 80021bc:	00061a80 	.word	0x00061a80

080021c0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b09a      	sub	sp, #104	; 0x68
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80021c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021ca:	2234      	movs	r2, #52	; 0x34
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f007 fbde 	bl	8009990 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80021d4:	463b      	mov	r3, r7
 80021d6:	2234      	movs	r2, #52	; 0x34
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f007 fbd8 	bl	8009990 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <MX_LTDC_Init+0x170>)
 80021e2:	4a54      	ldr	r2, [pc, #336]	; (8002334 <MX_LTDC_Init+0x174>)
 80021e4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80021e6:	4b52      	ldr	r3, [pc, #328]	; (8002330 <MX_LTDC_Init+0x170>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <MX_LTDC_Init+0x170>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80021f2:	4b4f      	ldr	r3, [pc, #316]	; (8002330 <MX_LTDC_Init+0x170>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80021f8:	4b4d      	ldr	r3, [pc, #308]	; (8002330 <MX_LTDC_Init+0x170>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 2;
 80021fe:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <MX_LTDC_Init+0x170>)
 8002200:	2202      	movs	r2, #2
 8002202:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 10;
 8002204:	4b4a      	ldr	r3, [pc, #296]	; (8002330 <MX_LTDC_Init+0x170>)
 8002206:	220a      	movs	r2, #10
 8002208:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 800220a:	4b49      	ldr	r3, [pc, #292]	; (8002330 <MX_LTDC_Init+0x170>)
 800220c:	222a      	movs	r2, #42	; 0x2a
 800220e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 12;
 8002210:	4b47      	ldr	r3, [pc, #284]	; (8002330 <MX_LTDC_Init+0x170>)
 8002212:	220c      	movs	r2, #12
 8002214:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8002216:	4b46      	ldr	r3, [pc, #280]	; (8002330 <MX_LTDC_Init+0x170>)
 8002218:	f240 220a 	movw	r2, #522	; 0x20a
 800221c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 284;
 800221e:	4b44      	ldr	r3, [pc, #272]	; (8002330 <MX_LTDC_Init+0x170>)
 8002220:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8002224:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <MX_LTDC_Init+0x170>)
 8002228:	f240 220d 	movw	r2, #525	; 0x20d
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 286;
 800222e:	4b40      	ldr	r3, [pc, #256]	; (8002330 <MX_LTDC_Init+0x170>)
 8002230:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002236:	4b3e      	ldr	r3, [pc, #248]	; (8002330 <MX_LTDC_Init+0x170>)
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800223e:	4b3c      	ldr	r3, [pc, #240]	; (8002330 <MX_LTDC_Init+0x170>)
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002246:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <MX_LTDC_Init+0x170>)
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800224e:	4838      	ldr	r0, [pc, #224]	; (8002330 <MX_LTDC_Init+0x170>)
 8002250:	f003 f960 	bl	8005514 <HAL_LTDC_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800225a:	f000 fc13 	bl	8002a84 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 479;
 8002262:	f240 13df 	movw	r3, #479	; 0x1df
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 271;
 800226c:	f240 130f 	movw	r3, #271	; 0x10f
 8002270:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002272:	2302      	movs	r3, #2
 8002274:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8002276:	23ff      	movs	r3, #255	; 0xff
 8002278:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800227e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002282:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002284:	2305      	movs	r3, #5
 8002286:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 261120;
 8002288:	f44f 337f 	mov.w	r3, #261120	; 0x3fc00
 800228c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 800228e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002292:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8002294:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002298:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80022ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022b0:	2200      	movs	r2, #0
 80022b2:	4619      	mov	r1, r3
 80022b4:	481e      	ldr	r0, [pc, #120]	; (8002330 <MX_LTDC_Init+0x170>)
 80022b6:	f003 f9fd 	bl	80056b4 <HAL_LTDC_ConfigLayer>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 80022c0:	f000 fbe0 	bl	8002a84 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 479;
 80022c8:	f240 13df 	movw	r3, #479	; 0x1df
 80022cc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 271;
 80022d2:	f240 130f 	movw	r3, #271	; 0x10f
 80022d6:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80022d8:	2302      	movs	r3, #2
 80022da:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 80022dc:	23ff      	movs	r3, #255	; 0xff
 80022de:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80022e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e8:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80022ea:	2305      	movs	r3, #5
 80022ec:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 261120;
 80022ee:	f44f 337f 	mov.w	r3, #261120	; 0x3fc00
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 80022f4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 80022fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002312:	463b      	mov	r3, r7
 8002314:	2201      	movs	r2, #1
 8002316:	4619      	mov	r1, r3
 8002318:	4805      	ldr	r0, [pc, #20]	; (8002330 <MX_LTDC_Init+0x170>)
 800231a:	f003 f9cb 	bl	80056b4 <HAL_LTDC_ConfigLayer>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_LTDC_Init+0x168>
  {
    Error_Handler();
 8002324:	f000 fbae 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002328:	bf00      	nop
 800232a:	3768      	adds	r7, #104	; 0x68
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000748 	.word	0x20000748
 8002334:	40016800 	.word	0x40016800

08002338 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_SDIO_SD_Init+0x38>)
 800233e:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <MX_SDIO_SD_Init+0x3c>)
 8002340:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_SDIO_SD_Init+0x38>)
 8002344:	2200      	movs	r2, #0
 8002346:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_SDIO_SD_Init+0x38>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_SDIO_SD_Init+0x38>)
 8002350:	2200      	movs	r2, #0
 8002352:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_SDIO_SD_Init+0x38>)
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <MX_SDIO_SD_Init+0x38>)
 800235c:	2200      	movs	r2, #0
 800235e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <MX_SDIO_SD_Init+0x38>)
 8002362:	2200      	movs	r2, #0
 8002364:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	200008d8 	.word	0x200008d8
 8002374:	40012c00 	.word	0x40012c00

08002378 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800237c:	4b17      	ldr	r3, [pc, #92]	; (80023dc <MX_SPI2_Init+0x64>)
 800237e:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <MX_SPI2_Init+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <MX_SPI2_Init+0x64>)
 8002384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002388:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <MX_SPI2_Init+0x64>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <MX_SPI2_Init+0x64>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_SPI2_Init+0x64>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_SPI2_Init+0x64>)
 800239e:	2200      	movs	r2, #0
 80023a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_SPI2_Init+0x64>)
 80023a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80023a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_SPI2_Init+0x64>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <MX_SPI2_Init+0x64>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_SPI2_Init+0x64>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <MX_SPI2_Init+0x64>)
 80023be:	2200      	movs	r2, #0
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_SPI2_Init+0x64>)
 80023c4:	220a      	movs	r2, #10
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023c8:	4804      	ldr	r0, [pc, #16]	; (80023dc <MX_SPI2_Init+0x64>)
 80023ca:	f005 fc26 	bl	8007c1a <HAL_SPI_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80023d4:	f000 fb56 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000240 	.word	0x20000240
 80023e0:	40003800 	.word	0x40003800

080023e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <MX_USART1_UART_Init+0x50>)
 80023ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 80023f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 800240a:	220c      	movs	r2, #12
 800240c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 800241c:	f005 fc86 	bl	8007d2c <HAL_UART_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002426:	f000 fb2d 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000880 	.word	0x20000880
 8002434:	40011000 	.word	0x40011000

08002438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <MX_USART2_UART_Init+0x50>)
 8002440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 8002444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 800245e:	220c      	movs	r2, #12
 8002460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800246e:	4805      	ldr	r0, [pc, #20]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 8002470:	f005 fc5c 	bl	8007d2c <HAL_UART_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800247a:	f000 fb03 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200009a0 	.word	0x200009a0
 8002488:	40004400 	.word	0x40004400

0800248c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <MX_USART6_UART_Init+0x48>)
 8002492:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <MX_USART6_UART_Init+0x4c>)
 8002494:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 400000;
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_USART6_UART_Init+0x48>)
 8002498:	4a10      	ldr	r2, [pc, #64]	; (80024dc <MX_USART6_UART_Init+0x50>)
 800249a:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <MX_USART6_UART_Init+0x48>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_USART6_UART_Init+0x48>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <MX_USART6_UART_Init+0x48>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_USART6_UART_Init+0x48>)
 80024b0:	220c      	movs	r2, #12
 80024b2:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <MX_USART6_UART_Init+0x48>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_USART6_UART_Init+0x48>)
 80024bc:	2200      	movs	r2, #0
 80024be:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024c0:	4804      	ldr	r0, [pc, #16]	; (80024d4 <MX_USART6_UART_Init+0x48>)
 80024c2:	f005 fc33 	bl	8007d2c <HAL_UART_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 80024cc:	f000 fada 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000095c 	.word	0x2000095c
 80024d8:	40011400 	.word	0x40011400
 80024dc:	00061a80 	.word	0x00061a80

080024e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024e4:	4b14      	ldr	r3, [pc, #80]	; (8002538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80024ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ee:	2204      	movs	r2, #4
 80024f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024f4:	2202      	movs	r2, #2
 80024f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002500:	2202      	movs	r2, #2
 8002502:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002518:	2201      	movs	r2, #1
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251e:	2200      	movs	r2, #0
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002522:	4805      	ldr	r0, [pc, #20]	; (8002538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002524:	f003 fa9b 	bl	8005a5e <HAL_PCD_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800252e:	f000 faa9 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200002ec 	.word	0x200002ec

0800253c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
 8002550:	615a      	str	r2, [r3, #20]
 8002552:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <MX_FMC_Init+0x94>)
 8002556:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <MX_FMC_Init+0x98>)
 8002558:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <MX_FMC_Init+0x94>)
 800255c:	2201      	movs	r2, #1
 800255e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <MX_FMC_Init+0x94>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <MX_FMC_Init+0x94>)
 8002568:	2204      	movs	r2, #4
 800256a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <MX_FMC_Init+0x94>)
 800256e:	2210      	movs	r2, #16
 8002570:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <MX_FMC_Init+0x94>)
 8002574:	2240      	movs	r2, #64	; 0x40
 8002576:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <MX_FMC_Init+0x94>)
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <MX_FMC_Init+0x94>)
 8002580:	2200      	movs	r2, #0
 8002582:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <MX_FMC_Init+0x94>)
 8002586:	2200      	movs	r2, #0
 8002588:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MX_FMC_Init+0x94>)
 800258c:	2200      	movs	r2, #0
 800258e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <MX_FMC_Init+0x94>)
 8002592:	2200      	movs	r2, #0
 8002594:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8002596:	2310      	movs	r3, #16
 8002598:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800259a:	2310      	movs	r3, #16
 800259c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800259e:	2310      	movs	r3, #16
 80025a0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80025a2:	2310      	movs	r3, #16
 80025a4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80025a6:	2310      	movs	r3, #16
 80025a8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80025aa:	2310      	movs	r3, #16
 80025ac:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80025ae:	2310      	movs	r3, #16
 80025b0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4806      	ldr	r0, [pc, #24]	; (80025d0 <MX_FMC_Init+0x94>)
 80025b8:	f005 fafb 	bl	8007bb2 <HAL_SDRAM_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80025c2:	f000 fa5f 	bl	8002a84 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80025c6:	bf00      	nop
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200009e4 	.word	0x200009e4
 80025d4:	a0000140 	.word	0xa0000140

080025d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b090      	sub	sp, #64	; 0x40
 80025dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025f2:	4bb0      	ldr	r3, [pc, #704]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4aaf      	ldr	r2, [pc, #700]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80025f8:	f043 0310 	orr.w	r3, r3, #16
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4bad      	ldr	r3, [pc, #692]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	4ba9      	ldr	r3, [pc, #676]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4aa8      	ldr	r2, [pc, #672]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4ba6      	ldr	r3, [pc, #664]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
 800262a:	4ba2      	ldr	r3, [pc, #648]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4aa1      	ldr	r2, [pc, #644]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b9f      	ldr	r3, [pc, #636]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	623b      	str	r3, [r7, #32]
 8002640:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	4b9b      	ldr	r3, [pc, #620]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a9a      	ldr	r2, [pc, #616]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 800264c:	f043 0320 	orr.w	r3, r3, #32
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b98      	ldr	r3, [pc, #608]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	4b94      	ldr	r3, [pc, #592]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a93      	ldr	r2, [pc, #588]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b91      	ldr	r3, [pc, #580]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	4b8d      	ldr	r3, [pc, #564]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a8c      	ldr	r2, [pc, #560]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b8a      	ldr	r3, [pc, #552]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b86      	ldr	r3, [pc, #536]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a85      	ldr	r2, [pc, #532]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b83      	ldr	r3, [pc, #524]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b7f      	ldr	r3, [pc, #508]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a7e      	ldr	r2, [pc, #504]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80026bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b7c      	ldr	r3, [pc, #496]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b78      	ldr	r3, [pc, #480]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a77      	ldr	r2, [pc, #476]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80026d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b75      	ldr	r3, [pc, #468]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	4b71      	ldr	r3, [pc, #452]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a70      	ldr	r2, [pc, #448]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80026f4:	f043 0308 	orr.w	r3, r3, #8
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b6e      	ldr	r3, [pc, #440]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a69      	ldr	r2, [pc, #420]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <MX_GPIO_Init+0x2dc>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDred_Pin|LEDgreen_Pin|LEDblue_Pin|HAPTIC_Pin, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	2174      	movs	r1, #116	; 0x74
 8002726:	4864      	ldr	r0, [pc, #400]	; (80028b8 <MX_GPIO_Init+0x2e0>)
 8002728:	f001 feca 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INTMODboot_GPIO_Port, INTMODboot_Pin, GPIO_PIN_RESET);
 800272c:	2200      	movs	r2, #0
 800272e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002732:	4862      	ldr	r0, [pc, #392]	; (80028bc <MX_GPIO_Init+0x2e4>)
 8002734:	f001 fec4 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDnRST_GPIO_Port, LCDnRST_Pin, GPIO_PIN_SET);
 8002738:	2201      	movs	r2, #1
 800273a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800273e:	485f      	ldr	r0, [pc, #380]	; (80028bc <MX_GPIO_Init+0x2e4>)
 8002740:	f001 febe 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8002744:	2200      	movs	r2, #0
 8002746:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800274a:	485d      	ldr	r0, [pc, #372]	; (80028c0 <MX_GPIO_Init+0x2e8>)
 800274c:	f001 feb8 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TESTPOINT_Pin|IntModPwr_Pin|UART3Pwr_Pin, GPIO_PIN_RESET);
 8002750:	2200      	movs	r2, #0
 8002752:	f248 1120 	movw	r1, #33056	; 0x8120
 8002756:	485b      	ldr	r0, [pc, #364]	; (80028c4 <MX_GPIO_Init+0x2ec>)
 8002758:	f001 feb2 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AudioMute_GPIO_Port, AudioMute_Pin, GPIO_PIN_SET);
 800275c:	2201      	movs	r2, #1
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	4858      	ldr	r0, [pc, #352]	; (80028c4 <MX_GPIO_Init+0x2ec>)
 8002762:	f001 fead 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART6pwr_Pin|LCDbacklight_Pin|ExtModPwr_Pin, GPIO_PIN_RESET);
 8002766:	2200      	movs	r2, #0
 8002768:	210b      	movs	r1, #11
 800276a:	4857      	ldr	r0, [pc, #348]	; (80028c8 <MX_GPIO_Init+0x2f0>)
 800276c:	f001 fea8 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_SET);
 8002770:	2201      	movs	r2, #1
 8002772:	2102      	movs	r1, #2
 8002774:	4855      	ldr	r0, [pc, #340]	; (80028cc <MX_GPIO_Init+0x2f4>)
 8002776:	f001 fea3 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TrainerOut_GPIO_Port, TrainerOut_Pin, GPIO_PIN_RESET);
 800277a:	2200      	movs	r2, #0
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	4854      	ldr	r0, [pc, #336]	; (80028d0 <MX_GPIO_Init+0x2f8>)
 8002780:	f001 fe9e 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TelemDir_GPIO_Port, TelemDir_Pin, GPIO_PIN_RESET);
 8002784:	2200      	movs	r2, #0
 8002786:	2110      	movs	r1, #16
 8002788:	4852      	ldr	r0, [pc, #328]	; (80028d4 <MX_GPIO_Init+0x2fc>)
 800278a:	f001 fe99 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothEn_GPIO_Port, BluetoothEn_Pin, GPIO_PIN_RESET);
 800278e:	2200      	movs	r2, #0
 8002790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002794:	4850      	ldr	r0, [pc, #320]	; (80028d8 <MX_GPIO_Init+0x300>)
 8002796:	f001 fe93 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDred_Pin LEDgreen_Pin LEDblue_Pin HAPTIC_Pin */
  GPIO_InitStruct.Pin = LEDred_Pin|LEDgreen_Pin|LEDblue_Pin|HAPTIC_Pin;
 800279a:	2374      	movs	r3, #116	; 0x74
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279e:	2301      	movs	r3, #1
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ae:	4619      	mov	r1, r3
 80027b0:	4841      	ldr	r0, [pc, #260]	; (80028b8 <MX_GPIO_Init+0x2e0>)
 80027b2:	f001 fcc1 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWEL_Pin */
  GPIO_InitStruct.Pin = SWEL_Pin;
 80027b6:	2308      	movs	r3, #8
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ba:	2300      	movs	r3, #0
 80027bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SWEL_GPIO_Port, &GPIO_InitStruct);
 80027c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c6:	4619      	mov	r1, r3
 80027c8:	483b      	ldr	r0, [pc, #236]	; (80028b8 <MX_GPIO_Init+0x2e0>)
 80027ca:	f001 fcb5 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYenter_Pin KEYpageprevious_Pin SWAL_Pin KEYrtn_Pin
                           KEYtelem_Pin KEYmdl_Pin KEYsys_Pin */
  GPIO_InitStruct.Pin = KEYenter_Pin|KEYpageprevious_Pin|SWAL_Pin|KEYrtn_Pin
 80027ce:	f648 13f0 	movw	r3, #35312	; 0x89f0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |KEYtelem_Pin|KEYmdl_Pin|KEYsys_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d8:	2301      	movs	r3, #1
 80027da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027e0:	4619      	mov	r1, r3
 80027e2:	4836      	ldr	r0, [pc, #216]	; (80028bc <MX_GPIO_Init+0x2e4>)
 80027e4:	f001 fca8 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYpagenext_Pin TrimLHR_Pin */
  GPIO_InitStruct.Pin = KEYpagenext_Pin|TrimLHR_Pin;
 80027e8:	f242 0310 	movw	r3, #8208	; 0x2010
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ee:	2300      	movs	r3, #0
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027f2:	2301      	movs	r3, #1
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027fa:	4619      	mov	r1, r3
 80027fc:	4834      	ldr	r0, [pc, #208]	; (80028d0 <MX_GPIO_Init+0x2f8>)
 80027fe:	f001 fc9b 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTMODboot_Pin LCDnRST_Pin */
  GPIO_InitStruct.Pin = INTMODboot_Pin|LCDnRST_Pin;
 8002802:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002808:	2301      	movs	r3, #1
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002818:	4619      	mov	r1, r3
 800281a:	4828      	ldr	r0, [pc, #160]	; (80028bc <MX_GPIO_Init+0x2e4>)
 800281c:	f001 fc8c 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8002820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002826:	2301      	movs	r3, #1
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8002832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002836:	4619      	mov	r1, r3
 8002838:	4821      	ldr	r0, [pc, #132]	; (80028c0 <MX_GPIO_Init+0x2e8>)
 800283a:	f001 fc7d 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_INT_Pin PCBREV1_Pin PCBREV2_Pin ROTENCB_Pin
                           ROTENCA_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin|PCBREV1_Pin|PCBREV2_Pin|ROTENCB_Pin
 800283e:	f640 5384 	movw	r3, #3460	; 0xd84
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ROTENCA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002844:	2300      	movs	r3, #0
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800284c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002850:	4619      	mov	r1, r3
 8002852:	4822      	ldr	r0, [pc, #136]	; (80028dc <MX_GPIO_Init+0x304>)
 8002854:	f001 fc70 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWF_Pin SWEH_Pin SWAH_Pin SWBH_Pin
                           SWI_Pin SWJ_Pin */
  GPIO_InitStruct.Pin = SWF_Pin|SWEH_Pin|SWAH_Pin|SWBH_Pin
 8002858:	f24d 2318 	movw	r3, #53784	; 0xd218
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SWI_Pin|SWJ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285e:	2300      	movs	r3, #0
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002862:	2301      	movs	r3, #1
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800286a:	4619      	mov	r1, r3
 800286c:	481b      	ldr	r0, [pc, #108]	; (80028dc <MX_GPIO_Init+0x304>)
 800286e:	f001 fc63 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : TESTPOINT_Pin AudioMute_Pin IntModPwr_Pin UART3Pwr_Pin */
  GPIO_InitStruct.Pin = TESTPOINT_Pin|AudioMute_Pin|IntModPwr_Pin|UART3Pwr_Pin;
 8002872:	f248 13a0 	movw	r3, #33184	; 0x81a0
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002878:	2301      	movs	r3, #1
 800287a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002888:	4619      	mov	r1, r3
 800288a:	480e      	ldr	r0, [pc, #56]	; (80028c4 <MX_GPIO_Init+0x2ec>)
 800288c:	f001 fc54 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : TrimLHL_Pin */
  GPIO_InitStruct.Pin = TrimLHL_Pin;
 8002890:	2340      	movs	r3, #64	; 0x40
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002894:	2300      	movs	r3, #0
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002898:	2301      	movs	r3, #1
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TrimLHL_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a0:	4619      	mov	r1, r3
 80028a2:	4808      	ldr	r0, [pc, #32]	; (80028c4 <MX_GPIO_Init+0x2ec>)
 80028a4:	f001 fc48 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDpresent_Pin TrainerIn_Pin */
  GPIO_InitStruct.Pin = SDpresent_Pin|TrainerIn_Pin;
 80028a8:	2360      	movs	r3, #96	; 0x60
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ac:	2300      	movs	r3, #0
 80028ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e015      	b.n	80028e0 <MX_GPIO_Init+0x308>
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40022000 	.word	0x40022000
 80028c0:	40021400 	.word	0x40021400
 80028c4:	40020000 	.word	0x40020000
 80028c8:	40020400 	.word	0x40020400
 80028cc:	40022400 	.word	0x40022400
 80028d0:	40020800 	.word	0x40020800
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40021800 	.word	0x40021800
 80028dc:	40021c00 	.word	0x40021c00
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028e6:	4619      	mov	r1, r3
 80028e8:	4860      	ldr	r0, [pc, #384]	; (8002a6c <MX_GPIO_Init+0x494>)
 80028ea:	f001 fc25 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART6pwr_Pin LCDbacklight_Pin ExtModPwr_Pin */
  GPIO_InitStruct.Pin = UART6pwr_Pin|LCDbacklight_Pin|ExtModPwr_Pin;
 80028ee:	230b      	movs	r3, #11
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002902:	4619      	mov	r1, r3
 8002904:	485a      	ldr	r0, [pc, #360]	; (8002a70 <MX_GPIO_Init+0x498>)
 8002906:	f001 fc17 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRswitch_Pin */
  GPIO_InitStruct.Pin = PWRswitch_Pin;
 800290a:	2301      	movs	r3, #1
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290e:	2300      	movs	r3, #0
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PWRswitch_GPIO_Port, &GPIO_InitStruct);
 8002916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291a:	4619      	mov	r1, r3
 800291c:	4855      	ldr	r0, [pc, #340]	; (8002a74 <MX_GPIO_Init+0x49c>)
 800291e:	f001 fc0b 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRon_Pin */
  GPIO_InitStruct.Pin = PWRon_Pin;
 8002922:	2302      	movs	r3, #2
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002926:	2301      	movs	r3, #1
 8002928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292e:	2300      	movs	r3, #0
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(PWRon_GPIO_Port, &GPIO_InitStruct);
 8002932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002936:	4619      	mov	r1, r3
 8002938:	484e      	ldr	r0, [pc, #312]	; (8002a74 <MX_GPIO_Init+0x49c>)
 800293a:	f001 fbfd 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWBL_Pin TrainerDetect_Pin */
  GPIO_InitStruct.Pin = SWBL_Pin|TrainerDetect_Pin;
 800293e:	f241 0310 	movw	r3, #4112	; 0x1010
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002950:	4619      	mov	r1, r3
 8002952:	4847      	ldr	r0, [pc, #284]	; (8002a70 <MX_GPIO_Init+0x498>)
 8002954:	f001 fbf0 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : TrimRSD_Pin TrimRSU_Pin SWCL_Pin */
  GPIO_InitStruct.Pin = TrimRSD_Pin|TrimRSU_Pin|SWCL_Pin;
 8002958:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295e:	2300      	movs	r3, #0
 8002960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002962:	2301      	movs	r3, #1
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800296a:	4619      	mov	r1, r3
 800296c:	4840      	ldr	r0, [pc, #256]	; (8002a70 <MX_GPIO_Init+0x498>)
 800296e:	f001 fbe3 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWCH_Pin TrimLSU_Pin TrimR_Pin TrimRHR_Pin */
  GPIO_InitStruct.Pin = SWCH_Pin|TrimLSU_Pin|TrimR_Pin|TrimRHR_Pin;
 8002972:	f642 0388 	movw	r3, #10376	; 0x2888
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002978:	2300      	movs	r3, #0
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800297c:	2301      	movs	r3, #1
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002984:	4619      	mov	r1, r3
 8002986:	483c      	ldr	r0, [pc, #240]	; (8002a78 <MX_GPIO_Init+0x4a0>)
 8002988:	f001 fbd6 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 800298c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002992:	2300      	movs	r3, #0
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 800299a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299e:	4619      	mov	r1, r3
 80029a0:	4835      	ldr	r0, [pc, #212]	; (8002a78 <MX_GPIO_Init+0x4a0>)
 80029a2:	f001 fbc9 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWDH_Pin TrimLSD_Pin TrimRV_Pin TrimRVD_Pin
                           TrimLVU_Pin */
  GPIO_InitStruct.Pin = SWDH_Pin|TrimLSD_Pin|TrimRV_Pin|TrimRVD_Pin
 80029a6:	f44f 43e3 	mov.w	r3, #29056	; 0x7180
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |TrimLVU_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ac:	2300      	movs	r3, #0
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029b0:	2301      	movs	r3, #1
 80029b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80029b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b8:	4619      	mov	r1, r3
 80029ba:	482e      	ldr	r0, [pc, #184]	; (8002a74 <MX_GPIO_Init+0x49c>)
 80029bc:	f001 fbbc 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWDL_Pin SWGL_Pin SWGH_Pin SWH_Pin
                           TrimLVD_Pin */
  GPIO_InitStruct.Pin = SWDL_Pin|SWGL_Pin|SWGH_Pin|SWH_Pin
 80029c0:	f241 03cc 	movw	r3, #4300	; 0x10cc
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |TrimLVD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c6:	2300      	movs	r3, #0
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d2:	4619      	mov	r1, r3
 80029d4:	4829      	ldr	r0, [pc, #164]	; (8002a7c <MX_GPIO_Init+0x4a4>)
 80029d6:	f001 fbaf 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : TrainerOut_Pin */
  GPIO_InitStruct.Pin = TrainerOut_Pin;
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029de:	2301      	movs	r3, #1
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TrainerOut_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ee:	4619      	mov	r1, r3
 80029f0:	481e      	ldr	r0, [pc, #120]	; (8002a6c <MX_GPIO_Init+0x494>)
 80029f2:	f001 fba1 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : ExtModTX_Pin */
  GPIO_InitStruct.Pin = ExtModTX_Pin;
 80029f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029fc:	2300      	movs	r3, #0
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ExtModTX_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a08:	4619      	mov	r1, r3
 8002a0a:	481d      	ldr	r0, [pc, #116]	; (8002a80 <MX_GPIO_Init+0x4a8>)
 8002a0c:	f001 fb94 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : TelemDir_Pin */
  GPIO_InitStruct.Pin = TelemDir_Pin;
 8002a10:	2310      	movs	r3, #16
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TelemDir_GPIO_Port, &GPIO_InitStruct);
 8002a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a24:	4619      	mov	r1, r3
 8002a26:	4814      	ldr	r0, [pc, #80]	; (8002a78 <MX_GPIO_Init+0x4a0>)
 8002a28:	f001 fb86 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : BluetoothEn_Pin */
  GPIO_InitStruct.Pin = BluetoothEn_Pin;
 8002a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a32:	2301      	movs	r3, #1
 8002a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(BluetoothEn_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a42:	4619      	mov	r1, r3
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <MX_GPIO_Init+0x4a4>)
 8002a46:	f001 fb77 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : USBchaCtrl_Pin USBchgDetect_Pin */
  GPIO_InitStruct.Pin = USBchaCtrl_Pin|USBchgDetect_Pin;
 8002a4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a50:	2300      	movs	r3, #0
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4807      	ldr	r0, [pc, #28]	; (8002a7c <MX_GPIO_Init+0x4a4>)
 8002a60:	f001 fb6a 	bl	8004138 <HAL_GPIO_Init>

}
 8002a64:	bf00      	nop
 8002a66:	3740      	adds	r7, #64	; 0x40
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40022400 	.word	0x40022400
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40021800 	.word	0x40021800
 8002a80:	40020000 	.word	0x40020000

08002a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a88:	b672      	cpsid	i
}
 8002a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <Error_Handler+0x8>
	...

08002a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <HAL_MspInit+0x4c>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <HAL_MspInit+0x4c>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <HAL_MspInit+0x4c>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_MspInit+0x4c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a08      	ldr	r2, [pc, #32]	; (8002adc <HAL_MspInit+0x4c>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_MspInit+0x4c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08c      	sub	sp, #48	; 0x30
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 031c 	add.w	r3, r7, #28
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a3b      	ldr	r2, [pc, #236]	; (8002bec <HAL_ADC_MspInit+0x10c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d10e      	bne.n	8002b20 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	4a39      	ldr	r2, [pc, #228]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6453      	str	r3, [r2, #68]	; 0x44
 8002b12:	4b37      	ldr	r3, [pc, #220]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002b1e:	e061      	b.n	8002be4 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC3)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a33      	ldr	r2, [pc, #204]	; (8002bf4 <HAL_ADC_MspInit+0x114>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d15c      	bne.n	8002be4 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4a2f      	ldr	r2, [pc, #188]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b38:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a28      	ldr	r2, [pc, #160]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b50:	f043 0320 	orr.w	r3, r3, #32
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b1f      	ldr	r3, [pc, #124]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_ADC_MspInit+0x110>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SLIDER1_Pin|VBattery_Pin|EX1_Pin|EX2_Pin;
 8002b9a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ba8:	f107 031c 	add.w	r3, r7, #28
 8002bac:	4619      	mov	r1, r3
 8002bae:	4812      	ldr	r0, [pc, #72]	; (8002bf8 <HAL_ADC_MspInit+0x118>)
 8002bb0:	f001 fac2 	bl	8004138 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = POT1_Pin|POS6_Pin|POT2_Pin|SLIDER2_Pin;
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc0:	f107 031c 	add.w	r3, r7, #28
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	480d      	ldr	r0, [pc, #52]	; (8002bfc <HAL_ADC_MspInit+0x11c>)
 8002bc8:	f001 fab6 	bl	8004138 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = StickLH_Pin|StickLV_Pin|StickRH_Pin|StickRV_Pin;
 8002bcc:	230f      	movs	r3, #15
 8002bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd8:	f107 031c 	add.w	r3, r7, #28
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4808      	ldr	r0, [pc, #32]	; (8002c00 <HAL_ADC_MspInit+0x120>)
 8002be0:	f001 faaa 	bl	8004138 <HAL_GPIO_Init>
}
 8002be4:	bf00      	nop
 8002be6:	3730      	adds	r7, #48	; 0x30
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40012000 	.word	0x40012000
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40012200 	.word	0x40012200
 8002bf8:	40021400 	.word	0x40021400
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020000 	.word	0x40020000

08002c04 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <HAL_DAC_MspInit+0x7c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d127      	bne.n	8002c76 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_DAC_MspInit+0x80>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <HAL_DAC_MspInit+0x80>)
 8002c30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <HAL_DAC_MspInit+0x80>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_DAC_MspInit+0x80>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_DAC_MspInit+0x80>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_DAC_MspInit+0x80>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = Audio_Pin;
 8002c5e:	2310      	movs	r3, #16
 8002c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c62:	2303      	movs	r3, #3
 8002c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Audio_GPIO_Port, &GPIO_InitStruct);
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4805      	ldr	r0, [pc, #20]	; (8002c88 <HAL_DAC_MspInit+0x84>)
 8002c72:	f001 fa61 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002c76:	bf00      	nop
 8002c78:	3728      	adds	r7, #40	; 0x28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40007400 	.word	0x40007400
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020000 	.word	0x40020000

08002c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a33      	ldr	r2, [pc, #204]	; (8002d78 <HAL_I2C_MspInit+0xec>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d12d      	bne.n	8002d0a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cd0:	2312      	movs	r3, #18
 8002cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cdc:	2304      	movs	r3, #4
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce0:	f107 031c 	add.w	r3, r7, #28
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4826      	ldr	r0, [pc, #152]	; (8002d80 <HAL_I2C_MspInit+0xf4>)
 8002ce8:	f001 fa26 	bl	8004138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	4a21      	ldr	r2, [pc, #132]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002cf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d08:	e031      	b.n	8002d6e <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_I2C_MspInit+0xf8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d12c      	bne.n	8002d6e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	6313      	str	r3, [r2, #48]	; 0x30
 8002d24:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d36:	2312      	movs	r3, #18
 8002d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d42:	2304      	movs	r3, #4
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	480c      	ldr	r0, [pc, #48]	; (8002d80 <HAL_I2C_MspInit+0xf4>)
 8002d4e:	f001 f9f3 	bl	8004138 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_I2C_MspInit+0xf0>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
}
 8002d6e:	bf00      	nop
 8002d70:	3730      	adds	r7, #48	; 0x30
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40005400 	.word	0x40005400
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40020400 	.word	0x40020400
 8002d84:	40005800 	.word	0x40005800

08002d88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a38      	ldr	r2, [pc, #224]	; (8002e88 <HAL_LTDC_MspInit+0x100>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d169      	bne.n	8002e7e <HAL_LTDC_MspInit+0xf6>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4a36      	ldr	r2, [pc, #216]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002db4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002db8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dba:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a28      	ldr	r2, [pc, #160]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_LTDC_MspInit+0x104>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
    PK4     ------> LTDC_B5
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    PK7     ------> LTDC_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002e1a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e2c:	230e      	movs	r3, #14
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e30:	f107 031c 	add.w	r3, r7, #28
 8002e34:	4619      	mov	r1, r3
 8002e36:	4816      	ldr	r0, [pc, #88]	; (8002e90 <HAL_LTDC_MspInit+0x108>)
 8002e38:	f001 f97e 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002e3c:	f648 637c 	movw	r3, #36476	; 0x8e7c
 8002e40:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e4e:	230e      	movs	r3, #14
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e52:	f107 031c 	add.w	r3, r7, #28
 8002e56:	4619      	mov	r1, r3
 8002e58:	480e      	ldr	r0, [pc, #56]	; (8002e94 <HAL_LTDC_MspInit+0x10c>)
 8002e5a:	f001 f96d 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002e5e:	23ff      	movs	r3, #255	; 0xff
 8002e60:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e6e:	230e      	movs	r3, #14
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	4619      	mov	r1, r3
 8002e78:	4807      	ldr	r0, [pc, #28]	; (8002e98 <HAL_LTDC_MspInit+0x110>)
 8002e7a:	f001 f95d 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002e7e:	bf00      	nop
 8002e80:	3730      	adds	r7, #48	; 0x30
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40016800 	.word	0x40016800
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40022000 	.word	0x40022000
 8002e94:	40022400 	.word	0x40022400
 8002e98:	40022800 	.word	0x40022800

08002e9c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	; 0x28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <HAL_SD_MspInit+0xc0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d14a      	bne.n	8002f54 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_SD_MspInit+0xc4>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <HAL_SD_MspInit+0xc4>)
 8002ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_SD_MspInit+0xc4>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_SD_MspInit+0xc4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a1f      	ldr	r2, [pc, #124]	; (8002f60 <HAL_SD_MspInit+0xc4>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_SD_MspInit+0xc4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_SD_MspInit+0xc4>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_SD_MspInit+0xc4>)
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_SD_MspInit+0xc4>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002f12:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002f16:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f20:	2303      	movs	r3, #3
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002f24:	230c      	movs	r3, #12
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	480d      	ldr	r0, [pc, #52]	; (8002f64 <HAL_SD_MspInit+0xc8>)
 8002f30:	f001 f902 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f34:	2304      	movs	r3, #4
 8002f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002f44:	230c      	movs	r3, #12
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4806      	ldr	r0, [pc, #24]	; (8002f68 <HAL_SD_MspInit+0xcc>)
 8002f50:	f001 f8f2 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002f54:	bf00      	nop
 8002f56:	3728      	adds	r7, #40	; 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020800 	.word	0x40020800
 8002f68:	40020c00 	.word	0x40020c00

08002f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <HAL_SPI_MspInit+0x84>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d12b      	bne.n	8002fe6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a10      	ldr	r2, [pc, #64]	; (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_SPI_MspInit+0x88>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
    PI0     ------> SPI2_NSS
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002fc6:	230f      	movs	r3, #15
 8002fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <HAL_SPI_MspInit+0x8c>)
 8002fe2:	f001 f8a9 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002fe6:	bf00      	nop
 8002fe8:	3728      	adds	r7, #40	; 0x28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40003800 	.word	0x40003800
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40022000 	.word	0x40022000

08002ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08e      	sub	sp, #56	; 0x38
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a4b      	ldr	r2, [pc, #300]	; (8003148 <HAL_UART_MspInit+0x14c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d12c      	bne.n	8003078 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	4b4a      	ldr	r3, [pc, #296]	; (800314c <HAL_UART_MspInit+0x150>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	4a49      	ldr	r2, [pc, #292]	; (800314c <HAL_UART_MspInit+0x150>)
 8003028:	f043 0310 	orr.w	r3, r3, #16
 800302c:	6453      	str	r3, [r2, #68]	; 0x44
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_UART_MspInit+0x150>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	623b      	str	r3, [r7, #32]
 8003038:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	4b43      	ldr	r3, [pc, #268]	; (800314c <HAL_UART_MspInit+0x150>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a42      	ldr	r2, [pc, #264]	; (800314c <HAL_UART_MspInit+0x150>)
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b40      	ldr	r3, [pc, #256]	; (800314c <HAL_UART_MspInit+0x150>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003056:	23c0      	movs	r3, #192	; 0xc0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003066:	2307      	movs	r3, #7
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306e:	4619      	mov	r1, r3
 8003070:	4837      	ldr	r0, [pc, #220]	; (8003150 <HAL_UART_MspInit+0x154>)
 8003072:	f001 f861 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003076:	e063      	b.n	8003140 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a35      	ldr	r2, [pc, #212]	; (8003154 <HAL_UART_MspInit+0x158>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d12c      	bne.n	80030dc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_UART_MspInit+0x150>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	4a30      	ldr	r2, [pc, #192]	; (800314c <HAL_UART_MspInit+0x150>)
 800308c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003090:	6413      	str	r3, [r2, #64]	; 0x40
 8003092:	4b2e      	ldr	r3, [pc, #184]	; (800314c <HAL_UART_MspInit+0x150>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	4b2a      	ldr	r3, [pc, #168]	; (800314c <HAL_UART_MspInit+0x150>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	4a29      	ldr	r2, [pc, #164]	; (800314c <HAL_UART_MspInit+0x150>)
 80030a8:	f043 0308 	orr.w	r3, r3, #8
 80030ac:	6313      	str	r3, [r2, #48]	; 0x30
 80030ae:	4b27      	ldr	r3, [pc, #156]	; (800314c <HAL_UART_MspInit+0x150>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80030ba:	2360      	movs	r3, #96	; 0x60
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c6:	2303      	movs	r3, #3
 80030c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030ca:	2307      	movs	r3, #7
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d2:	4619      	mov	r1, r3
 80030d4:	4820      	ldr	r0, [pc, #128]	; (8003158 <HAL_UART_MspInit+0x15c>)
 80030d6:	f001 f82f 	bl	8004138 <HAL_GPIO_Init>
}
 80030da:	e031      	b.n	8003140 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1e      	ldr	r2, [pc, #120]	; (800315c <HAL_UART_MspInit+0x160>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d12c      	bne.n	8003140 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_UART_MspInit+0x150>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <HAL_UART_MspInit+0x150>)
 80030f0:	f043 0320 	orr.w	r3, r3, #32
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_UART_MspInit+0x150>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_UART_MspInit+0x150>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_UART_MspInit+0x150>)
 800310c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_UART_MspInit+0x150>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800311e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003130:	2308      	movs	r3, #8
 8003132:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003138:	4619      	mov	r1, r3
 800313a:	4809      	ldr	r0, [pc, #36]	; (8003160 <HAL_UART_MspInit+0x164>)
 800313c:	f000 fffc 	bl	8004138 <HAL_GPIO_Init>
}
 8003140:	bf00      	nop
 8003142:	3738      	adds	r7, #56	; 0x38
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40011000 	.word	0x40011000
 800314c:	40023800 	.word	0x40023800
 8003150:	40020400 	.word	0x40020400
 8003154:	40004400 	.word	0x40004400
 8003158:	40020c00 	.word	0x40020c00
 800315c:	40011400 	.word	0x40011400
 8003160:	40021800 	.word	0x40021800

08003164 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003184:	d13f      	bne.n	8003206 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <HAL_PCD_MspInit+0xac>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a20      	ldr	r2, [pc, #128]	; (8003210 <HAL_PCD_MspInit+0xac>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_PCD_MspInit+0xac>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	4619      	mov	r1, r3
 80031b6:	4817      	ldr	r0, [pc, #92]	; (8003214 <HAL_PCD_MspInit+0xb0>)
 80031b8:	f000 ffbe 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80031bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80031c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ca:	2303      	movs	r3, #3
 80031cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80031ce:	230a      	movs	r3, #10
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	480e      	ldr	r0, [pc, #56]	; (8003214 <HAL_PCD_MspInit+0xb0>)
 80031da:	f000 ffad 	bl	8004138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_PCD_MspInit+0xac>)
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	4a0b      	ldr	r2, [pc, #44]	; (8003210 <HAL_PCD_MspInit+0xac>)
 80031e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e8:	6353      	str	r3, [r2, #52]	; 0x34
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_PCD_MspInit+0xac>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <HAL_PCD_MspInit+0xac>)
 80031f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f8:	6453      	str	r3, [r2, #68]	; 0x44
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_PCD_MspInit+0xac>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003206:	bf00      	nop
 8003208:	3728      	adds	r7, #40	; 0x28
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800
 8003214:	40020000 	.word	0x40020000

08003218 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800321e:	1d3b      	adds	r3, r7, #4
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_FMC_MspInit+0x104>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d16f      	bne.n	8003314 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003234:	4b39      	ldr	r3, [pc, #228]	; (800331c <HAL_FMC_MspInit+0x104>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4b38      	ldr	r3, [pc, #224]	; (8003320 <HAL_FMC_MspInit+0x108>)
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	4a37      	ldr	r2, [pc, #220]	; (8003320 <HAL_FMC_MspInit+0x108>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6393      	str	r3, [r2, #56]	; 0x38
 800324a:	4b35      	ldr	r3, [pc, #212]	; (8003320 <HAL_FMC_MspInit+0x108>)
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003256:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800325a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	2303      	movs	r3, #3
 8003266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003268:	230c      	movs	r3, #12
 800326a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	4619      	mov	r1, r3
 8003270:	482c      	ldr	r0, [pc, #176]	; (8003324 <HAL_FMC_MspInit+0x10c>)
 8003272:	f000 ff61 	bl	8004138 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003276:	2360      	movs	r3, #96	; 0x60
 8003278:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003286:	230c      	movs	r3, #12
 8003288:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4826      	ldr	r0, [pc, #152]	; (8003328 <HAL_FMC_MspInit+0x110>)
 8003290:	f000 ff52 	bl	8004138 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8003294:	f248 1333 	movw	r3, #33075	; 0x8133
 8003298:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a2:	2303      	movs	r3, #3
 80032a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032a6:	230c      	movs	r3, #12
 80032a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032aa:	1d3b      	adds	r3, r7, #4
 80032ac:	4619      	mov	r1, r3
 80032ae:	481f      	ldr	r0, [pc, #124]	; (800332c <HAL_FMC_MspInit+0x114>)
 80032b0:	f000 ff42 	bl	8004138 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80032b4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032b8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c2:	2303      	movs	r3, #3
 80032c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032c6:	230c      	movs	r3, #12
 80032c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	4619      	mov	r1, r3
 80032ce:	4818      	ldr	r0, [pc, #96]	; (8003330 <HAL_FMC_MspInit+0x118>)
 80032d0:	f000 ff32 	bl	8004138 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80032d4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80032d8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e2:	2303      	movs	r3, #3
 80032e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032e6:	230c      	movs	r3, #12
 80032e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ea:	1d3b      	adds	r3, r7, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4811      	ldr	r0, [pc, #68]	; (8003334 <HAL_FMC_MspInit+0x11c>)
 80032f0:	f000 ff22 	bl	8004138 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80032f4:	2320      	movs	r3, #32
 80032f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f8:	2302      	movs	r3, #2
 80032fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003300:	2303      	movs	r3, #3
 8003302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003304:	230c      	movs	r3, #12
 8003306:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	4619      	mov	r1, r3
 800330c:	480a      	ldr	r0, [pc, #40]	; (8003338 <HAL_FMC_MspInit+0x120>)
 800330e:	f000 ff13 	bl	8004138 <HAL_GPIO_Init>
 8003312:	e000      	b.n	8003316 <HAL_FMC_MspInit+0xfe>
    return;
 8003314:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000224 	.word	0x20000224
 8003320:	40023800 	.word	0x40023800
 8003324:	40021400 	.word	0x40021400
 8003328:	40021c00 	.word	0x40021c00
 800332c:	40021800 	.word	0x40021800
 8003330:	40021000 	.word	0x40021000
 8003334:	40020c00 	.word	0x40020c00
 8003338:	40020400 	.word	0x40020400

0800333c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003344:	f7ff ff68 	bl	8003218 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003354:	e7fe      	b.n	8003354 <NMI_Handler+0x4>

08003356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335a:	e7fe      	b.n	800335a <HardFault_Handler+0x4>

0800335c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003360:	e7fe      	b.n	8003360 <MemManage_Handler+0x4>

08003362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003366:	e7fe      	b.n	8003366 <BusFault_Handler+0x4>

08003368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800336c:	e7fe      	b.n	800336c <UsageFault_Handler+0x4>

0800336e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800339c:	f000 f956 	bl	800364c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033a0:	bf00      	nop
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
	return 1;
 80033a8:	2301      	movs	r3, #1
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <_kill>:

int _kill(int pid, int sig)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80033be:	f006 fabd 	bl	800993c <__errno>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2216      	movs	r2, #22
 80033c6:	601a      	str	r2, [r3, #0]
	return -1;
 80033c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <_exit>:

void _exit (int status)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033dc:	f04f 31ff 	mov.w	r1, #4294967295
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ffe7 	bl	80033b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033e6:	e7fe      	b.n	80033e6 <_exit+0x12>

080033e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e00a      	b.n	8003410 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033fa:	f3af 8000 	nop.w
 80033fe:	4601      	mov	r1, r0
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	60ba      	str	r2, [r7, #8]
 8003406:	b2ca      	uxtb	r2, r1
 8003408:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3301      	adds	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	dbf0      	blt.n	80033fa <_read+0x12>
	}

return len;
 8003418:	687b      	ldr	r3, [r7, #4]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b086      	sub	sp, #24
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e009      	b.n	8003448 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	60ba      	str	r2, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	3301      	adds	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	dbf1      	blt.n	8003434 <_write+0x12>
	}
	return len;
 8003450:	687b      	ldr	r3, [r7, #4]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_close>:

int _close(int file)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
	return -1;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003482:	605a      	str	r2, [r3, #4]
	return 0;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <_isatty>:

int _isatty(int file)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
	return 1;
 800349a:	2301      	movs	r3, #1
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
	return 0;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034cc:	4a14      	ldr	r2, [pc, #80]	; (8003520 <_sbrk+0x5c>)
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <_sbrk+0x60>)
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034d8:	4b13      	ldr	r3, [pc, #76]	; (8003528 <_sbrk+0x64>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <_sbrk+0x64>)
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <_sbrk+0x68>)
 80034e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <_sbrk+0x64>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d207      	bcs.n	8003504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034f4:	f006 fa22 	bl	800993c <__errno>
 80034f8:	4603      	mov	r3, r0
 80034fa:	220c      	movs	r2, #12
 80034fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003502:	e009      	b.n	8003518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <_sbrk+0x64>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <_sbrk+0x64>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <_sbrk+0x64>)
 8003514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20030000 	.word	0x20030000
 8003524:	00000400 	.word	0x00000400
 8003528:	20000228 	.word	0x20000228
 800352c:	20000e98 	.word	0x20000e98

08003530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <SystemInit+0x20>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	4a05      	ldr	r2, [pc, #20]	; (8003550 <SystemInit+0x20>)
 800353c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800358c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003558:	480d      	ldr	r0, [pc, #52]	; (8003590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800355a:	490e      	ldr	r1, [pc, #56]	; (8003594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800355c:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800355e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003560:	e002      	b.n	8003568 <LoopCopyDataInit>

08003562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003566:	3304      	adds	r3, #4

08003568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800356a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800356c:	d3f9      	bcc.n	8003562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800356e:	4a0b      	ldr	r2, [pc, #44]	; (800359c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003570:	4c0b      	ldr	r4, [pc, #44]	; (80035a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003574:	e001      	b.n	800357a <LoopFillZerobss>

08003576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003578:	3204      	adds	r2, #4

0800357a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800357a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800357c:	d3fb      	bcc.n	8003576 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800357e:	f7ff ffd7 	bl	8003530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003582:	f006 f9e1 	bl	8009948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003586:	f7fe fa79 	bl	8001a7c <main>
  bx  lr    
 800358a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800358c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003594:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003598:	0800d104 	.word	0x0800d104
  ldr r2, =_sbss
 800359c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80035a0:	20000e94 	.word	0x20000e94

080035a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035a4:	e7fe      	b.n	80035a4 <ADC_IRQHandler>
	...

080035a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_Init+0x40>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <HAL_Init+0x40>)
 80035b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_Init+0x40>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <HAL_Init+0x40>)
 80035be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_Init+0x40>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <HAL_Init+0x40>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d0:	2003      	movs	r0, #3
 80035d2:	f000 fd0d 	bl	8003ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f000 f808 	bl	80035ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035dc:	f7ff fa58 	bl	8002a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023c00 	.word	0x40023c00

080035ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_InitTick+0x54>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_InitTick+0x58>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003602:	fbb3 f3f1 	udiv	r3, r3, r1
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fd17 	bl	800403e <HAL_SYSTICK_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e00e      	b.n	8003638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d80a      	bhi.n	8003636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003620:	2200      	movs	r2, #0
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	f000 fced 	bl	8004006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800362c:	4a06      	ldr	r2, [pc, #24]	; (8003648 <HAL_InitTick+0x5c>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000010 	.word	0x20000010
 8003644:	20000018 	.word	0x20000018
 8003648:	20000014 	.word	0x20000014

0800364c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_IncTick+0x20>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_IncTick+0x24>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4413      	add	r3, r2
 800365c:	4a04      	ldr	r2, [pc, #16]	; (8003670 <HAL_IncTick+0x24>)
 800365e:	6013      	str	r3, [r2, #0]
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000018 	.word	0x20000018
 8003670:	20000a18 	.word	0x20000a18

08003674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return uwTick;
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_GetTick+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000a18 	.word	0x20000a18

0800368c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7ff ffee 	bl	8003674 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d005      	beq.n	80036b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_Delay+0x44>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036b2:	bf00      	nop
 80036b4:	f7ff ffde 	bl	8003674 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d8f7      	bhi.n	80036b4 <HAL_Delay+0x28>
  {
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000018 	.word	0x20000018

080036d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e033      	b.n	8003752 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff f9f4 	bl	8002ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	d118      	bne.n	8003744 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800371a:	f023 0302 	bic.w	r3, r3, #2
 800371e:	f043 0202 	orr.w	r2, r3, #2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fab4 	bl	8003c94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
 8003742:	e001      	b.n	8003748 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_ADC_Start+0x1a>
 8003772:	2302      	movs	r3, #2
 8003774:	e0b2      	b.n	80038dc <HAL_ADC_Start+0x180>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d018      	beq.n	80037be <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800379c:	4b52      	ldr	r3, [pc, #328]	; (80038e8 <HAL_ADC_Start+0x18c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a52      	ldr	r2, [pc, #328]	; (80038ec <HAL_ADC_Start+0x190>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0c9a      	lsrs	r2, r3, #18
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80037b0:	e002      	b.n	80037b8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f9      	bne.n	80037b2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d17a      	bne.n	80038c2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380a:	d106      	bne.n	800381a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	f023 0206 	bic.w	r2, r3, #6
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	645a      	str	r2, [r3, #68]	; 0x44
 8003818:	e002      	b.n	8003820 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003828:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <HAL_ADC_Start+0x194>)
 800382a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003834:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	2b00      	cmp	r3, #0
 8003840:	d12a      	bne.n	8003898 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2b      	ldr	r2, [pc, #172]	; (80038f4 <HAL_ADC_Start+0x198>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d015      	beq.n	8003878 <HAL_ADC_Start+0x11c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a29      	ldr	r2, [pc, #164]	; (80038f8 <HAL_ADC_Start+0x19c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d105      	bne.n	8003862 <HAL_ADC_Start+0x106>
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <HAL_ADC_Start+0x194>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a25      	ldr	r2, [pc, #148]	; (80038fc <HAL_ADC_Start+0x1a0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d136      	bne.n	80038da <HAL_ADC_Start+0x17e>
 800386c:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_ADC_Start+0x194>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d130      	bne.n	80038da <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d129      	bne.n	80038da <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	e020      	b.n	80038da <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <HAL_ADC_Start+0x198>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d11b      	bne.n	80038da <HAL_ADC_Start+0x17e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d114      	bne.n	80038da <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	e00b      	b.n	80038da <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f043 0210 	orr.w	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f043 0201 	orr.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	20000010 	.word	0x20000010
 80038ec:	431bde83 	.word	0x431bde83
 80038f0:	40012300 	.word	0x40012300
 80038f4:	40012000 	.word	0x40012000
 80038f8:	40012100 	.word	0x40012100
 80038fc:	40012200 	.word	0x40012200

08003900 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391c:	d113      	bne.n	8003946 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d10b      	bne.n	8003946 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e063      	b.n	8003a0e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003946:	f7ff fe95 	bl	8003674 <HAL_GetTick>
 800394a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800394c:	e021      	b.n	8003992 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d01d      	beq.n	8003992 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d007      	beq.n	800396c <HAL_ADC_PollForConversion+0x6c>
 800395c:	f7ff fe8a 	bl	8003674 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d212      	bcs.n	8003992 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b02      	cmp	r3, #2
 8003978:	d00b      	beq.n	8003992 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f043 0204 	orr.w	r2, r3, #4
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e03d      	b.n	8003a0e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b02      	cmp	r3, #2
 800399e:	d1d6      	bne.n	800394e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0212 	mvn.w	r2, #18
 80039a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d123      	bne.n	8003a0c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11f      	bne.n	8003a0c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d006      	beq.n	80039e8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d111      	bne.n	8003a0c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d105      	bne.n	8003a0c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	f043 0201 	orr.w	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x1c>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e113      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x244>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b09      	cmp	r3, #9
 8003a5a:	d925      	bls.n	8003aa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68d9      	ldr	r1, [r3, #12]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	3b1e      	subs	r3, #30
 8003a72:	2207      	movs	r2, #7
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43da      	mvns	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	400a      	ands	r2, r1
 8003a80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68d9      	ldr	r1, [r3, #12]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	4618      	mov	r0, r3
 8003a94:	4603      	mov	r3, r0
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4403      	add	r3, r0
 8003a9a:	3b1e      	subs	r3, #30
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	e022      	b.n	8003aee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6919      	ldr	r1, [r3, #16]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	2207      	movs	r2, #7
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	400a      	ands	r2, r1
 8003aca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6919      	ldr	r1, [r3, #16]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	4618      	mov	r0, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4403      	add	r3, r0
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b06      	cmp	r3, #6
 8003af4:	d824      	bhi.n	8003b40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	3b05      	subs	r3, #5
 8003b08:	221f      	movs	r2, #31
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	400a      	ands	r2, r1
 8003b16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	4618      	mov	r0, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	3b05      	subs	r3, #5
 8003b32:	fa00 f203 	lsl.w	r2, r0, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b3e:	e04c      	b.n	8003bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	d824      	bhi.n	8003b92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	3b23      	subs	r3, #35	; 0x23
 8003b5a:	221f      	movs	r2, #31
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43da      	mvns	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	400a      	ands	r2, r1
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	4618      	mov	r0, r3
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	3b23      	subs	r3, #35	; 0x23
 8003b84:	fa00 f203 	lsl.w	r2, r0, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b90:	e023      	b.n	8003bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3b41      	subs	r3, #65	; 0x41
 8003ba4:	221f      	movs	r2, #31
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43da      	mvns	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	3b41      	subs	r3, #65	; 0x41
 8003bce:	fa00 f203 	lsl.w	r2, r0, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_ADC_ConfigChannel+0x250>)
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a28      	ldr	r2, [pc, #160]	; (8003c84 <HAL_ADC_ConfigChannel+0x254>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10f      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x1d8>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b12      	cmp	r3, #18
 8003bee:	d10b      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <HAL_ADC_ConfigChannel+0x254>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d12b      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x23a>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <HAL_ADC_ConfigChannel+0x258>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <HAL_ADC_ConfigChannel+0x1f4>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b11      	cmp	r3, #17
 8003c22:	d122      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <HAL_ADC_ConfigChannel+0x258>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d111      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <HAL_ADC_ConfigChannel+0x25c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a11      	ldr	r2, [pc, #68]	; (8003c90 <HAL_ADC_ConfigChannel+0x260>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	0c9a      	lsrs	r2, r3, #18
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c5c:	e002      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f9      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40012300 	.word	0x40012300
 8003c84:	40012000 	.word	0x40012000
 8003c88:	10000012 	.word	0x10000012
 8003c8c:	20000010 	.word	0x20000010
 8003c90:	431bde83 	.word	0x431bde83

08003c94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c9c:	4b79      	ldr	r3, [pc, #484]	; (8003e84 <ADC_Init+0x1f0>)
 8003c9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6859      	ldr	r1, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	021a      	lsls	r2, r3, #8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6899      	ldr	r1, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	4a58      	ldr	r2, [pc, #352]	; (8003e88 <ADC_Init+0x1f4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	e00f      	b.n	8003d92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0202 	bic.w	r2, r2, #2
 8003da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6899      	ldr	r1, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7e1b      	ldrb	r3, [r3, #24]
 8003dac:	005a      	lsls	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01b      	beq.n	8003df8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003dde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	3b01      	subs	r3, #1
 8003dec:	035a      	lsls	r2, r3, #13
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	e007      	b.n	8003e08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	051a      	lsls	r2, r3, #20
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6899      	ldr	r1, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e4a:	025a      	lsls	r2, r3, #9
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6899      	ldr	r1, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	029a      	lsls	r2, r3, #10
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40012300 	.word	0x40012300
 8003e88:	0f000001 	.word	0x0f000001

08003e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ebe:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	60d3      	str	r3, [r2, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <__NVIC_GetPriorityGrouping+0x18>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	f003 0307 	and.w	r3, r3, #7
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	6039      	str	r1, [r7, #0]
 8003efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	db0a      	blt.n	8003f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	490c      	ldr	r1, [pc, #48]	; (8003f3c <__NVIC_SetPriority+0x4c>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	0112      	lsls	r2, r2, #4
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	440b      	add	r3, r1
 8003f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f18:	e00a      	b.n	8003f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	4908      	ldr	r1, [pc, #32]	; (8003f40 <__NVIC_SetPriority+0x50>)
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	3b04      	subs	r3, #4
 8003f28:	0112      	lsls	r2, r2, #4
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	761a      	strb	r2, [r3, #24]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000e100 	.word	0xe000e100
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b089      	sub	sp, #36	; 0x24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f1c3 0307 	rsb	r3, r3, #7
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	bf28      	it	cs
 8003f62:	2304      	movcs	r3, #4
 8003f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2b06      	cmp	r3, #6
 8003f6c:	d902      	bls.n	8003f74 <NVIC_EncodePriority+0x30>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3b03      	subs	r3, #3
 8003f72:	e000      	b.n	8003f76 <NVIC_EncodePriority+0x32>
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43da      	mvns	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	401a      	ands	r2, r3
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	43d9      	mvns	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f9c:	4313      	orrs	r3, r2
         );
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3724      	adds	r7, #36	; 0x24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fbc:	d301      	bcc.n	8003fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e00f      	b.n	8003fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <SysTick_Config+0x40>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fca:	210f      	movs	r1, #15
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd0:	f7ff ff8e 	bl	8003ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <SysTick_Config+0x40>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fda:	4b04      	ldr	r3, [pc, #16]	; (8003fec <SysTick_Config+0x40>)
 8003fdc:	2207      	movs	r2, #7
 8003fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	e000e010 	.word	0xe000e010

08003ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ff47 	bl	8003e8c <__NVIC_SetPriorityGrouping>
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004006:	b580      	push	{r7, lr}
 8004008:	b086      	sub	sp, #24
 800400a:	af00      	add	r7, sp, #0
 800400c:	4603      	mov	r3, r0
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004018:	f7ff ff5c 	bl	8003ed4 <__NVIC_GetPriorityGrouping>
 800401c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	6978      	ldr	r0, [r7, #20]
 8004024:	f7ff ff8e 	bl	8003f44 <NVIC_EncodePriority>
 8004028:	4602      	mov	r2, r0
 800402a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff ff5d 	bl	8003ef0 <__NVIC_SetPriority>
}
 8004036:	bf00      	nop
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff ffb0 	bl	8003fac <SysTick_Config>
 800404c:	4603      	mov	r3, r0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e014      	b.n	8004092 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	791b      	ldrb	r3, [r3, #4]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d105      	bne.n	800407e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fe fdc3 	bl	8002c04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2202      	movs	r2, #2
 8004082:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800409a:	b480      	push	{r7}
 800409c:	b087      	sub	sp, #28
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	795b      	ldrb	r3, [r3, #5]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_DAC_ConfigChannel+0x18>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e03c      	b.n	800412c <HAL_DAC_ConfigChannel+0x92>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2202      	movs	r2, #2
 80040bc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4013      	ands	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6819      	ldr	r1, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	22c0      	movs	r2, #192	; 0xc0
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43da      	mvns	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	400a      	ands	r2, r1
 800411c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004138:	b480      	push	{r7}
 800413a:	b089      	sub	sp, #36	; 0x24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	e177      	b.n	8004444 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004154:	2201      	movs	r2, #1
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	429a      	cmp	r2, r3
 800416e:	f040 8166 	bne.w	800443e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d005      	beq.n	800418a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004186:	2b02      	cmp	r3, #2
 8004188:	d130      	bne.n	80041ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	2203      	movs	r2, #3
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041c0:	2201      	movs	r2, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 0201 	and.w	r2, r3, #1
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d017      	beq.n	8004228 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	2203      	movs	r2, #3
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4313      	orrs	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d123      	bne.n	800427c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	08da      	lsrs	r2, r3, #3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3208      	adds	r2, #8
 800423c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	220f      	movs	r2, #15
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	08da      	lsrs	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3208      	adds	r2, #8
 8004276:	69b9      	ldr	r1, [r7, #24]
 8004278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	2203      	movs	r2, #3
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4013      	ands	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0203 	and.w	r2, r3, #3
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80c0 	beq.w	800443e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	4b66      	ldr	r3, [pc, #408]	; (800445c <HAL_GPIO_Init+0x324>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	4a65      	ldr	r2, [pc, #404]	; (800445c <HAL_GPIO_Init+0x324>)
 80042c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042cc:	6453      	str	r3, [r2, #68]	; 0x44
 80042ce:	4b63      	ldr	r3, [pc, #396]	; (800445c <HAL_GPIO_Init+0x324>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042da:	4a61      	ldr	r2, [pc, #388]	; (8004460 <HAL_GPIO_Init+0x328>)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	3302      	adds	r3, #2
 80042e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	220f      	movs	r2, #15
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a58      	ldr	r2, [pc, #352]	; (8004464 <HAL_GPIO_Init+0x32c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d037      	beq.n	8004376 <HAL_GPIO_Init+0x23e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a57      	ldr	r2, [pc, #348]	; (8004468 <HAL_GPIO_Init+0x330>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d031      	beq.n	8004372 <HAL_GPIO_Init+0x23a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a56      	ldr	r2, [pc, #344]	; (800446c <HAL_GPIO_Init+0x334>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d02b      	beq.n	800436e <HAL_GPIO_Init+0x236>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a55      	ldr	r2, [pc, #340]	; (8004470 <HAL_GPIO_Init+0x338>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d025      	beq.n	800436a <HAL_GPIO_Init+0x232>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a54      	ldr	r2, [pc, #336]	; (8004474 <HAL_GPIO_Init+0x33c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01f      	beq.n	8004366 <HAL_GPIO_Init+0x22e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a53      	ldr	r2, [pc, #332]	; (8004478 <HAL_GPIO_Init+0x340>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d019      	beq.n	8004362 <HAL_GPIO_Init+0x22a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a52      	ldr	r2, [pc, #328]	; (800447c <HAL_GPIO_Init+0x344>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <HAL_GPIO_Init+0x226>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a51      	ldr	r2, [pc, #324]	; (8004480 <HAL_GPIO_Init+0x348>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00d      	beq.n	800435a <HAL_GPIO_Init+0x222>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a50      	ldr	r2, [pc, #320]	; (8004484 <HAL_GPIO_Init+0x34c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <HAL_GPIO_Init+0x21e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a4f      	ldr	r2, [pc, #316]	; (8004488 <HAL_GPIO_Init+0x350>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <HAL_GPIO_Init+0x21a>
 800434e:	2309      	movs	r3, #9
 8004350:	e012      	b.n	8004378 <HAL_GPIO_Init+0x240>
 8004352:	230a      	movs	r3, #10
 8004354:	e010      	b.n	8004378 <HAL_GPIO_Init+0x240>
 8004356:	2308      	movs	r3, #8
 8004358:	e00e      	b.n	8004378 <HAL_GPIO_Init+0x240>
 800435a:	2307      	movs	r3, #7
 800435c:	e00c      	b.n	8004378 <HAL_GPIO_Init+0x240>
 800435e:	2306      	movs	r3, #6
 8004360:	e00a      	b.n	8004378 <HAL_GPIO_Init+0x240>
 8004362:	2305      	movs	r3, #5
 8004364:	e008      	b.n	8004378 <HAL_GPIO_Init+0x240>
 8004366:	2304      	movs	r3, #4
 8004368:	e006      	b.n	8004378 <HAL_GPIO_Init+0x240>
 800436a:	2303      	movs	r3, #3
 800436c:	e004      	b.n	8004378 <HAL_GPIO_Init+0x240>
 800436e:	2302      	movs	r3, #2
 8004370:	e002      	b.n	8004378 <HAL_GPIO_Init+0x240>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_GPIO_Init+0x240>
 8004376:	2300      	movs	r3, #0
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	f002 0203 	and.w	r2, r2, #3
 800437e:	0092      	lsls	r2, r2, #2
 8004380:	4093      	lsls	r3, r2
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4313      	orrs	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004388:	4935      	ldr	r1, [pc, #212]	; (8004460 <HAL_GPIO_Init+0x328>)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	089b      	lsrs	r3, r3, #2
 800438e:	3302      	adds	r3, #2
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004396:	4b3d      	ldr	r3, [pc, #244]	; (800448c <HAL_GPIO_Init+0x354>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043ba:	4a34      	ldr	r2, [pc, #208]	; (800448c <HAL_GPIO_Init+0x354>)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043c0:	4b32      	ldr	r3, [pc, #200]	; (800448c <HAL_GPIO_Init+0x354>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043e4:	4a29      	ldr	r2, [pc, #164]	; (800448c <HAL_GPIO_Init+0x354>)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ea:	4b28      	ldr	r3, [pc, #160]	; (800448c <HAL_GPIO_Init+0x354>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4013      	ands	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800440e:	4a1f      	ldr	r2, [pc, #124]	; (800448c <HAL_GPIO_Init+0x354>)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_GPIO_Init+0x354>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004438:	4a14      	ldr	r2, [pc, #80]	; (800448c <HAL_GPIO_Init+0x354>)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3301      	adds	r3, #1
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b0f      	cmp	r3, #15
 8004448:	f67f ae84 	bls.w	8004154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	3724      	adds	r7, #36	; 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800
 8004460:	40013800 	.word	0x40013800
 8004464:	40020000 	.word	0x40020000
 8004468:	40020400 	.word	0x40020400
 800446c:	40020800 	.word	0x40020800
 8004470:	40020c00 	.word	0x40020c00
 8004474:	40021000 	.word	0x40021000
 8004478:	40021400 	.word	0x40021400
 800447c:	40021800 	.word	0x40021800
 8004480:	40021c00 	.word	0x40021c00
 8004484:	40022000 	.word	0x40022000
 8004488:	40022400 	.word	0x40022400
 800448c:	40013c00 	.word	0x40013c00

08004490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	887b      	ldrh	r3, [r7, #2]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
 80044ac:	e001      	b.n	80044b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	807b      	strh	r3, [r7, #2]
 80044cc:	4613      	mov	r3, r2
 80044ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044d0:	787b      	ldrb	r3, [r7, #1]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044d6:	887a      	ldrh	r2, [r7, #2]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044dc:	e003      	b.n	80044e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044de:	887b      	ldrh	r3, [r7, #2]
 80044e0:	041a      	lsls	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	619a      	str	r2, [r3, #24]
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e12b      	b.n	800475e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fe fbb6 	bl	8002c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004556:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004558:	f001 ffbe 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 800455c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4a81      	ldr	r2, [pc, #516]	; (8004768 <HAL_I2C_Init+0x274>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d807      	bhi.n	8004578 <HAL_I2C_Init+0x84>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a80      	ldr	r2, [pc, #512]	; (800476c <HAL_I2C_Init+0x278>)
 800456c:	4293      	cmp	r3, r2
 800456e:	bf94      	ite	ls
 8004570:	2301      	movls	r3, #1
 8004572:	2300      	movhi	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e006      	b.n	8004586 <HAL_I2C_Init+0x92>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a7d      	ldr	r2, [pc, #500]	; (8004770 <HAL_I2C_Init+0x27c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	bf94      	ite	ls
 8004580:	2301      	movls	r3, #1
 8004582:	2300      	movhi	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0e7      	b.n	800475e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a78      	ldr	r2, [pc, #480]	; (8004774 <HAL_I2C_Init+0x280>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	0c9b      	lsrs	r3, r3, #18
 8004598:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4a6a      	ldr	r2, [pc, #424]	; (8004768 <HAL_I2C_Init+0x274>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d802      	bhi.n	80045c8 <HAL_I2C_Init+0xd4>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	3301      	adds	r3, #1
 80045c6:	e009      	b.n	80045dc <HAL_I2C_Init+0xe8>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	4a69      	ldr	r2, [pc, #420]	; (8004778 <HAL_I2C_Init+0x284>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	099b      	lsrs	r3, r3, #6
 80045da:	3301      	adds	r3, #1
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	495c      	ldr	r1, [pc, #368]	; (8004768 <HAL_I2C_Init+0x274>)
 80045f8:	428b      	cmp	r3, r1
 80045fa:	d819      	bhi.n	8004630 <HAL_I2C_Init+0x13c>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1e59      	subs	r1, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	fbb1 f3f3 	udiv	r3, r1, r3
 800460a:	1c59      	adds	r1, r3, #1
 800460c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004610:	400b      	ands	r3, r1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_I2C_Init+0x138>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1e59      	subs	r1, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	fbb1 f3f3 	udiv	r3, r1, r3
 8004624:	3301      	adds	r3, #1
 8004626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462a:	e051      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 800462c:	2304      	movs	r3, #4
 800462e:	e04f      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d111      	bne.n	800465c <HAL_I2C_Init+0x168>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1e58      	subs	r0, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	440b      	add	r3, r1
 8004646:	fbb0 f3f3 	udiv	r3, r0, r3
 800464a:	3301      	adds	r3, #1
 800464c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e012      	b.n	8004682 <HAL_I2C_Init+0x18e>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	1e58      	subs	r0, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6859      	ldr	r1, [r3, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	0099      	lsls	r1, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004672:	3301      	adds	r3, #1
 8004674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_I2C_Init+0x196>
 8004686:	2301      	movs	r3, #1
 8004688:	e022      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10e      	bne.n	80046b0 <HAL_I2C_Init+0x1bc>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1e58      	subs	r0, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6859      	ldr	r1, [r3, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	440b      	add	r3, r1
 80046a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a4:	3301      	adds	r3, #1
 80046a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ae:	e00f      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1e58      	subs	r0, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	0099      	lsls	r1, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c6:	3301      	adds	r3, #1
 80046c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	6809      	ldr	r1, [r1, #0]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69da      	ldr	r2, [r3, #28]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6911      	ldr	r1, [r2, #16]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68d2      	ldr	r2, [r2, #12]
 800470a:	4311      	orrs	r1, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	430b      	orrs	r3, r1
 8004712:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	000186a0 	.word	0x000186a0
 800476c:	001e847f 	.word	0x001e847f
 8004770:	003d08ff 	.word	0x003d08ff
 8004774:	431bde83 	.word	0x431bde83
 8004778:	10624dd3 	.word	0x10624dd3

0800477c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	461a      	mov	r2, r3
 8004788:	460b      	mov	r3, r1
 800478a:	817b      	strh	r3, [r7, #10]
 800478c:	4613      	mov	r3, r2
 800478e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004790:	f7fe ff70 	bl	8003674 <HAL_GetTick>
 8004794:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b20      	cmp	r3, #32
 80047a0:	f040 80e0 	bne.w	8004964 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	2319      	movs	r3, #25
 80047aa:	2201      	movs	r2, #1
 80047ac:	4970      	ldr	r1, [pc, #448]	; (8004970 <HAL_I2C_Master_Transmit+0x1f4>)
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fc58 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
 80047bc:	e0d3      	b.n	8004966 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_I2C_Master_Transmit+0x50>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e0cc      	b.n	8004966 <HAL_I2C_Master_Transmit+0x1ea>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d007      	beq.n	80047f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004800:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2221      	movs	r2, #33	; 0x21
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2210      	movs	r2, #16
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	893a      	ldrh	r2, [r7, #8]
 8004822:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4a50      	ldr	r2, [pc, #320]	; (8004974 <HAL_I2C_Master_Transmit+0x1f8>)
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004834:	8979      	ldrh	r1, [r7, #10]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	6a3a      	ldr	r2, [r7, #32]
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fac2 	bl	8004dc4 <I2C_MasterRequestWrite>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e08d      	b.n	8004966 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004860:	e066      	b.n	8004930 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	6a39      	ldr	r1, [r7, #32]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fcd2 	bl	8005210 <I2C_WaitOnTXEFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00d      	beq.n	800488e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2b04      	cmp	r3, #4
 8004878:	d107      	bne.n	800488a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004888:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e06b      	b.n	8004966 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d11b      	bne.n	8004904 <HAL_I2C_Master_Transmit+0x188>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d017      	beq.n	8004904 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	781a      	ldrb	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	6a39      	ldr	r1, [r7, #32]
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fcc2 	bl	8005292 <I2C_WaitOnBTFFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00d      	beq.n	8004930 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	2b04      	cmp	r3, #4
 800491a:	d107      	bne.n	800492c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e01a      	b.n	8004966 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004934:	2b00      	cmp	r3, #0
 8004936:	d194      	bne.n	8004862 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e000      	b.n	8004966 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004964:	2302      	movs	r3, #2
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	00100002 	.word	0x00100002
 8004974:	ffff0000 	.word	0xffff0000

08004978 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08c      	sub	sp, #48	; 0x30
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	461a      	mov	r2, r3
 8004984:	460b      	mov	r3, r1
 8004986:	817b      	strh	r3, [r7, #10]
 8004988:	4613      	mov	r3, r2
 800498a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800498c:	f7fe fe72 	bl	8003674 <HAL_GetTick>
 8004990:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	f040 820b 	bne.w	8004db6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2319      	movs	r3, #25
 80049a6:	2201      	movs	r2, #1
 80049a8:	497c      	ldr	r1, [pc, #496]	; (8004b9c <HAL_I2C_Master_Receive+0x224>)
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fb5a 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
 80049b8:	e1fe      	b.n	8004db8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_I2C_Master_Receive+0x50>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e1f7      	b.n	8004db8 <HAL_I2C_Master_Receive+0x440>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d007      	beq.n	80049ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2222      	movs	r2, #34	; 0x22
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2210      	movs	r2, #16
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	893a      	ldrh	r2, [r7, #8]
 8004a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4a5c      	ldr	r2, [pc, #368]	; (8004ba0 <HAL_I2C_Master_Receive+0x228>)
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a30:	8979      	ldrh	r1, [r7, #10]
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 fa46 	bl	8004ec8 <I2C_MasterRequestRead>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e1b8      	b.n	8004db8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d113      	bne.n	8004a76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	623b      	str	r3, [r7, #32]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	623b      	str	r3, [r7, #32]
 8004a62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e18c      	b.n	8004d90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d11b      	bne.n	8004ab6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e16c      	b.n	8004d90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d11b      	bne.n	8004af6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004acc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004adc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	e14c      	b.n	8004d90 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b1c:	e138      	b.n	8004d90 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	f200 80f1 	bhi.w	8004d0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d123      	bne.n	8004b78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fbed 	bl	8005314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e139      	b.n	8004db8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b76:	e10b      	b.n	8004d90 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d14e      	bne.n	8004c1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	2200      	movs	r2, #0
 8004b88:	4906      	ldr	r1, [pc, #24]	; (8004ba4 <HAL_I2C_Master_Receive+0x22c>)
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fa6a 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e10e      	b.n	8004db8 <HAL_I2C_Master_Receive+0x440>
 8004b9a:	bf00      	nop
 8004b9c:	00100002 	.word	0x00100002
 8004ba0:	ffff0000 	.word	0xffff0000
 8004ba4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c1c:	e0b8      	b.n	8004d90 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	2200      	movs	r2, #0
 8004c26:	4966      	ldr	r1, [pc, #408]	; (8004dc0 <HAL_I2C_Master_Receive+0x448>)
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fa1b 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0bf      	b.n	8004db8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	2200      	movs	r2, #0
 8004c82:	494f      	ldr	r1, [pc, #316]	; (8004dc0 <HAL_I2C_Master_Receive+0x448>)
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f9ed 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e091      	b.n	8004db8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d08:	e042      	b.n	8004d90 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fb00 	bl	8005314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e04c      	b.n	8004db8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d118      	bne.n	8004d90 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f47f aec2 	bne.w	8004b1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e000      	b.n	8004db8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
  }
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3728      	adds	r7, #40	; 0x28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	00010004 	.word	0x00010004

08004dc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d006      	beq.n	8004dee <I2C_MasterRequestWrite+0x2a>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d003      	beq.n	8004dee <I2C_MasterRequestWrite+0x2a>
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dec:	d108      	bne.n	8004e00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e00b      	b.n	8004e18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	2b12      	cmp	r3, #18
 8004e06:	d107      	bne.n	8004e18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f91d 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00d      	beq.n	8004e4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3e:	d103      	bne.n	8004e48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e035      	b.n	8004eb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e54:	d108      	bne.n	8004e68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e56:	897b      	ldrh	r3, [r7, #10]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e64:	611a      	str	r2, [r3, #16]
 8004e66:	e01b      	b.n	8004ea0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e68:	897b      	ldrh	r3, [r7, #10]
 8004e6a:	11db      	asrs	r3, r3, #7
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 0306 	and.w	r3, r3, #6
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f063 030f 	orn	r3, r3, #15
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	490e      	ldr	r1, [pc, #56]	; (8004ec0 <I2C_MasterRequestWrite+0xfc>)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f943 	bl	8005112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e010      	b.n	8004eb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e96:	897b      	ldrh	r3, [r7, #10]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	4907      	ldr	r1, [pc, #28]	; (8004ec4 <I2C_MasterRequestWrite+0x100>)
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f933 	bl	8005112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	00010008 	.word	0x00010008
 8004ec4:	00010002 	.word	0x00010002

08004ec8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d006      	beq.n	8004f02 <I2C_MasterRequestRead+0x3a>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d003      	beq.n	8004f02 <I2C_MasterRequestRead+0x3a>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f00:	d108      	bne.n	8004f14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e00b      	b.n	8004f2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	2b11      	cmp	r3, #17
 8004f1a:	d107      	bne.n	8004f2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f893 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00d      	beq.n	8004f60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f52:	d103      	bne.n	8004f5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e079      	b.n	8005054 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f68:	d108      	bne.n	8004f7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f6a:	897b      	ldrh	r3, [r7, #10]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	611a      	str	r2, [r3, #16]
 8004f7a:	e05f      	b.n	800503c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f7c:	897b      	ldrh	r3, [r7, #10]
 8004f7e:	11db      	asrs	r3, r3, #7
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f003 0306 	and.w	r3, r3, #6
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f063 030f 	orn	r3, r3, #15
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4930      	ldr	r1, [pc, #192]	; (800505c <I2C_MasterRequestRead+0x194>)
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f8b9 	bl	8005112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e054      	b.n	8005054 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004faa:	897b      	ldrh	r3, [r7, #10]
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4929      	ldr	r1, [pc, #164]	; (8005060 <I2C_MasterRequestRead+0x198>)
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f8a9 	bl	8005112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e044      	b.n	8005054 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f831 	bl	8005064 <I2C_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005016:	d103      	bne.n	8005020 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800501e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e017      	b.n	8005054 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005024:	897b      	ldrh	r3, [r7, #10]
 8005026:	11db      	asrs	r3, r3, #7
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 0306 	and.w	r3, r3, #6
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f063 030e 	orn	r3, r3, #14
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	4907      	ldr	r1, [pc, #28]	; (8005060 <I2C_MasterRequestRead+0x198>)
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f865 	bl	8005112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e000      	b.n	8005054 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	00010008 	.word	0x00010008
 8005060:	00010002 	.word	0x00010002

08005064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005074:	e025      	b.n	80050c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d021      	beq.n	80050c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507e:	f7fe faf9 	bl	8003674 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d302      	bcc.n	8005094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d116      	bne.n	80050c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f043 0220 	orr.w	r2, r3, #32
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e023      	b.n	800510a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	0c1b      	lsrs	r3, r3, #16
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d10d      	bne.n	80050e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	43da      	mvns	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4013      	ands	r3, r2
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bf0c      	ite	eq
 80050de:	2301      	moveq	r3, #1
 80050e0:	2300      	movne	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	e00c      	b.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	43da      	mvns	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4013      	ands	r3, r2
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	429a      	cmp	r2, r3
 8005106:	d0b6      	beq.n	8005076 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005120:	e051      	b.n	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005130:	d123      	bne.n	800517a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005140:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800514a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f043 0204 	orr.w	r2, r3, #4
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e046      	b.n	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d021      	beq.n	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005182:	f7fe fa77 	bl	8003674 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d302      	bcc.n	8005198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d116      	bne.n	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f043 0220 	orr.w	r2, r3, #32
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e020      	b.n	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	0c1b      	lsrs	r3, r3, #16
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d10c      	bne.n	80051ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	43da      	mvns	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4013      	ands	r3, r2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	e00b      	b.n	8005202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	43da      	mvns	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4013      	ands	r3, r2
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bf14      	ite	ne
 80051fc:	2301      	movne	r3, #1
 80051fe:	2300      	moveq	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d18d      	bne.n	8005122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800521c:	e02d      	b.n	800527a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f8ce 	bl	80053c0 <I2C_IsAcknowledgeFailed>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e02d      	b.n	800528a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d021      	beq.n	800527a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005236:	f7fe fa1d 	bl	8003674 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d116      	bne.n	800527a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e007      	b.n	800528a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005284:	2b80      	cmp	r3, #128	; 0x80
 8005286:	d1ca      	bne.n	800521e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800529e:	e02d      	b.n	80052fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f88d 	bl	80053c0 <I2C_IsAcknowledgeFailed>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e02d      	b.n	800530c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d021      	beq.n	80052fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b8:	f7fe f9dc 	bl	8003674 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d302      	bcc.n	80052ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d116      	bne.n	80052fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e007      	b.n	800530c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b04      	cmp	r3, #4
 8005308:	d1ca      	bne.n	80052a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005320:	e042      	b.n	80053a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b10      	cmp	r3, #16
 800532e:	d119      	bne.n	8005364 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0210 	mvn.w	r2, #16
 8005338:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e029      	b.n	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005364:	f7fe f986 	bl	8003674 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	429a      	cmp	r2, r3
 8005372:	d302      	bcc.n	800537a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d116      	bne.n	80053a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e007      	b.n	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b2:	2b40      	cmp	r3, #64	; 0x40
 80053b4:	d1b5      	bne.n	8005322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d6:	d11b      	bne.n	8005410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	f043 0204 	orr.w	r2, r3, #4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b20      	cmp	r3, #32
 8005432:	d129      	bne.n	8005488 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0210 	bic.w	r2, r2, #16
 800545a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e000      	b.n	800548a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005496:	b480      	push	{r7}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d12a      	bne.n	8005506 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2224      	movs	r2, #36	; 0x24
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0201 	bic.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80054d0:	89fb      	ldrh	r3, [r7, #14]
 80054d2:	f023 030f 	bic.w	r3, r3, #15
 80054d6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	b29a      	uxth	r2, r3
 80054dc:	89fb      	ldrh	r3, [r7, #14]
 80054de:	4313      	orrs	r3, r2
 80054e0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	89fa      	ldrh	r2, [r7, #14]
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005506:	2302      	movs	r3, #2
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e0bf      	b.n	80056a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fd fc24 	bl	8002d88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005556:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800556c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6899      	ldr	r1, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4b4a      	ldr	r3, [pc, #296]	; (80056b0 <HAL_LTDC_Init+0x19c>)
 8005588:	400b      	ands	r3, r1
 800558a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	041b      	lsls	r3, r3, #16
 8005592:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6899      	ldr	r1, [r3, #8]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68d9      	ldr	r1, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4b3e      	ldr	r3, [pc, #248]	; (80056b0 <HAL_LTDC_Init+0x19c>)
 80055b6:	400b      	ands	r3, r1
 80055b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	041b      	lsls	r3, r3, #16
 80055c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68d9      	ldr	r1, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1a      	ldr	r2, [r3, #32]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6919      	ldr	r1, [r3, #16]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b33      	ldr	r3, [pc, #204]	; (80056b0 <HAL_LTDC_Init+0x19c>)
 80055e4:	400b      	ands	r3, r1
 80055e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	041b      	lsls	r3, r3, #16
 80055ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6919      	ldr	r1, [r3, #16]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6959      	ldr	r1, [r3, #20]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <HAL_LTDC_Init+0x19c>)
 8005612:	400b      	ands	r3, r1
 8005614:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	041b      	lsls	r3, r3, #16
 800561c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6959      	ldr	r1, [r3, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005656:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0206 	orr.w	r2, r2, #6
 8005682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	f000f800 	.word	0xf000f800

080056b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80056b4:	b5b0      	push	{r4, r5, r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_LTDC_ConfigLayer+0x1a>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e02c      	b.n	8005728 <HAL_LTDC_ConfigLayer+0x74>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2134      	movs	r1, #52	; 0x34
 80056e4:	fb01 f303 	mul.w	r3, r1, r3
 80056e8:	4413      	add	r3, r2
 80056ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4614      	mov	r4, r2
 80056f2:	461d      	mov	r5, r3
 80056f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f811 	bl	8005730 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2201      	movs	r2, #1
 8005714:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bdb0      	pop	{r4, r5, r7, pc}

08005730 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	; 0x24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	0c1b      	lsrs	r3, r3, #16
 8005748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574c:	4413      	add	r3, r2
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	01db      	lsls	r3, r3, #7
 800575c:	4413      	add	r3, r2
 800575e:	3384      	adds	r3, #132	; 0x84
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	4611      	mov	r1, r2
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	01d2      	lsls	r2, r2, #7
 800576c:	440a      	add	r2, r1
 800576e:	3284      	adds	r2, #132	; 0x84
 8005770:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005774:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	0c1b      	lsrs	r3, r3, #16
 8005782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005786:	4413      	add	r3, r2
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4619      	mov	r1, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	01db      	lsls	r3, r3, #7
 8005794:	440b      	add	r3, r1
 8005796:	3384      	adds	r3, #132	; 0x84
 8005798:	4619      	mov	r1, r3
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4313      	orrs	r3, r2
 800579e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ae:	4413      	add	r3, r2
 80057b0:	041b      	lsls	r3, r3, #16
 80057b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	01db      	lsls	r3, r3, #7
 80057be:	4413      	add	r3, r2
 80057c0:	3384      	adds	r3, #132	; 0x84
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	4611      	mov	r1, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	01d2      	lsls	r2, r2, #7
 80057ce:	440a      	add	r2, r1
 80057d0:	3284      	adds	r2, #132	; 0x84
 80057d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80057d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057e6:	4413      	add	r3, r2
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4619      	mov	r1, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	01db      	lsls	r3, r3, #7
 80057f4:	440b      	add	r3, r1
 80057f6:	3384      	adds	r3, #132	; 0x84
 80057f8:	4619      	mov	r1, r3
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	01db      	lsls	r3, r3, #7
 800580a:	4413      	add	r3, r2
 800580c:	3384      	adds	r3, #132	; 0x84
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	4611      	mov	r1, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	01d2      	lsls	r2, r2, #7
 800581a:	440a      	add	r2, r1
 800581c:	3284      	adds	r2, #132	; 0x84
 800581e:	f023 0307 	bic.w	r3, r3, #7
 8005822:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	01db      	lsls	r3, r3, #7
 800582e:	4413      	add	r3, r2
 8005830:	3384      	adds	r3, #132	; 0x84
 8005832:	461a      	mov	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	01db      	lsls	r3, r3, #7
 8005860:	4413      	add	r3, r2
 8005862:	3384      	adds	r3, #132	; 0x84
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	01db      	lsls	r3, r3, #7
 8005870:	4413      	add	r3, r2
 8005872:	3384      	adds	r3, #132	; 0x84
 8005874:	461a      	mov	r2, r3
 8005876:	2300      	movs	r3, #0
 8005878:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005880:	461a      	mov	r2, r3
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	431a      	orrs	r2, r3
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	431a      	orrs	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4619      	mov	r1, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	01db      	lsls	r3, r3, #7
 8005894:	440b      	add	r3, r1
 8005896:	3384      	adds	r3, #132	; 0x84
 8005898:	4619      	mov	r1, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	01db      	lsls	r3, r3, #7
 80058aa:	4413      	add	r3, r2
 80058ac:	3384      	adds	r3, #132	; 0x84
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	4611      	mov	r1, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	01d2      	lsls	r2, r2, #7
 80058ba:	440a      	add	r2, r1
 80058bc:	3284      	adds	r2, #132	; 0x84
 80058be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	01db      	lsls	r3, r3, #7
 80058ce:	4413      	add	r3, r2
 80058d0:	3384      	adds	r3, #132	; 0x84
 80058d2:	461a      	mov	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	01db      	lsls	r3, r3, #7
 80058e4:	4413      	add	r3, r2
 80058e6:	3384      	adds	r3, #132	; 0x84
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	4611      	mov	r1, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	01d2      	lsls	r2, r2, #7
 80058f4:	440a      	add	r2, r1
 80058f6:	3284      	adds	r2, #132	; 0x84
 80058f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80058fc:	f023 0307 	bic.w	r3, r3, #7
 8005900:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	68f9      	ldr	r1, [r7, #12]
 800590c:	6809      	ldr	r1, [r1, #0]
 800590e:	4608      	mov	r0, r1
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	01c9      	lsls	r1, r1, #7
 8005914:	4401      	add	r1, r0
 8005916:	3184      	adds	r1, #132	; 0x84
 8005918:	4313      	orrs	r3, r2
 800591a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	01db      	lsls	r3, r3, #7
 8005926:	4413      	add	r3, r2
 8005928:	3384      	adds	r3, #132	; 0x84
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	01db      	lsls	r3, r3, #7
 8005936:	4413      	add	r3, r2
 8005938:	3384      	adds	r3, #132	; 0x84
 800593a:	461a      	mov	r2, r3
 800593c:	2300      	movs	r3, #0
 800593e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	01db      	lsls	r3, r3, #7
 800594a:	4413      	add	r3, r2
 800594c:	3384      	adds	r3, #132	; 0x84
 800594e:	461a      	mov	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800595e:	2304      	movs	r3, #4
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	e01b      	b.n	800599c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d102      	bne.n	8005972 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800596c:	2303      	movs	r3, #3
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	e014      	b.n	800599c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b04      	cmp	r3, #4
 8005978:	d00b      	beq.n	8005992 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800597e:	2b02      	cmp	r3, #2
 8005980:	d007      	beq.n	8005992 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005986:	2b03      	cmp	r3, #3
 8005988:	d003      	beq.n	8005992 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800598e:	2b07      	cmp	r3, #7
 8005990:	d102      	bne.n	8005998 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005992:	2302      	movs	r3, #2
 8005994:	61fb      	str	r3, [r7, #28]
 8005996:	e001      	b.n	800599c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005998:	2301      	movs	r3, #1
 800599a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	461a      	mov	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	01db      	lsls	r3, r3, #7
 80059a6:	4413      	add	r3, r2
 80059a8:	3384      	adds	r3, #132	; 0x84
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	4611      	mov	r1, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	01d2      	lsls	r2, r2, #7
 80059b6:	440a      	add	r2, r1
 80059b8:	3284      	adds	r2, #132	; 0x84
 80059ba:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80059be:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	041a      	lsls	r2, r3, #16
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6859      	ldr	r1, [r3, #4]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	1acb      	subs	r3, r1, r3
 80059d6:	69f9      	ldr	r1, [r7, #28]
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	3303      	adds	r3, #3
 80059de:	68f9      	ldr	r1, [r7, #12]
 80059e0:	6809      	ldr	r1, [r1, #0]
 80059e2:	4608      	mov	r0, r1
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	01c9      	lsls	r1, r1, #7
 80059e8:	4401      	add	r1, r0
 80059ea:	3184      	adds	r1, #132	; 0x84
 80059ec:	4313      	orrs	r3, r2
 80059ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	01db      	lsls	r3, r3, #7
 80059fa:	4413      	add	r3, r2
 80059fc:	3384      	adds	r3, #132	; 0x84
 80059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	4611      	mov	r1, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	01d2      	lsls	r2, r2, #7
 8005a0a:	440a      	add	r2, r1
 8005a0c:	3284      	adds	r2, #132	; 0x84
 8005a0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a12:	f023 0307 	bic.w	r3, r3, #7
 8005a16:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	01db      	lsls	r3, r3, #7
 8005a22:	4413      	add	r3, r2
 8005a24:	3384      	adds	r3, #132	; 0x84
 8005a26:	461a      	mov	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	01db      	lsls	r3, r3, #7
 8005a38:	4413      	add	r3, r2
 8005a3a:	3384      	adds	r3, #132	; 0x84
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	6812      	ldr	r2, [r2, #0]
 8005a42:	4611      	mov	r1, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	01d2      	lsls	r2, r2, #7
 8005a48:	440a      	add	r2, r1
 8005a4a:	3284      	adds	r2, #132	; 0x84
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	6013      	str	r3, [r2, #0]
}
 8005a52:	bf00      	nop
 8005a54:	3724      	adds	r7, #36	; 0x24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a60:	b08f      	sub	sp, #60	; 0x3c
 8005a62:	af0a      	add	r7, sp, #40	; 0x28
 8005a64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e10f      	b.n	8005c90 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fd fb6a 	bl	8003164 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2203      	movs	r2, #3
 8005a94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f003 faf5 	bl	800909e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	687e      	ldr	r6, [r7, #4]
 8005abc:	466d      	mov	r5, sp
 8005abe:	f106 0410 	add.w	r4, r6, #16
 8005ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ad2:	1d33      	adds	r3, r6, #4
 8005ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ad6:	6838      	ldr	r0, [r7, #0]
 8005ad8:	f003 fa80 	bl	8008fdc <USB_CoreInit>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e0d0      	b.n	8005c90 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f003 fae3 	bl	80090c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
 8005afe:	e04a      	b.n	8005b96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b00:	7bfa      	ldrb	r2, [r7, #15]
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	333d      	adds	r3, #61	; 0x3d
 8005b10:	2201      	movs	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b14:	7bfa      	ldrb	r2, [r7, #15]
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	1a9b      	subs	r3, r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	333c      	adds	r3, #60	; 0x3c
 8005b24:	7bfa      	ldrb	r2, [r7, #15]
 8005b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b28:	7bfa      	ldrb	r2, [r7, #15]
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	b298      	uxth	r0, r3
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	3342      	adds	r3, #66	; 0x42
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b40:	7bfa      	ldrb	r2, [r7, #15]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	333f      	adds	r3, #63	; 0x3f
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	3344      	adds	r3, #68	; 0x44
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b68:	7bfa      	ldrb	r2, [r7, #15]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	3348      	adds	r3, #72	; 0x48
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b7c:	7bfa      	ldrb	r2, [r7, #15]
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	4613      	mov	r3, r2
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	3350      	adds	r3, #80	; 0x50
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	3301      	adds	r3, #1
 8005b94:	73fb      	strb	r3, [r7, #15]
 8005b96:	7bfa      	ldrb	r2, [r7, #15]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d3af      	bcc.n	8005b00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	e044      	b.n	8005c30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ba6:	7bfa      	ldrb	r2, [r7, #15]
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005bbc:	7bfa      	ldrb	r2, [r7, #15]
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005bce:	7bfa      	ldrb	r2, [r7, #15]
 8005bd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005bd2:	7bfa      	ldrb	r2, [r7, #15]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	1a9b      	subs	r3, r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005be8:	7bfa      	ldrb	r2, [r7, #15]
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	4613      	mov	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005bfe:	7bfa      	ldrb	r2, [r7, #15]
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c14:	7bfa      	ldrb	r2, [r7, #15]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
 8005c30:	7bfa      	ldrb	r2, [r7, #15]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d3b5      	bcc.n	8005ba6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	687e      	ldr	r6, [r7, #4]
 8005c42:	466d      	mov	r5, sp
 8005c44:	f106 0410 	add.w	r4, r6, #16
 8005c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c54:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c58:	1d33      	adds	r3, r6, #4
 8005c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c5c:	6838      	ldr	r0, [r7, #0]
 8005c5e:	f003 fa59 	bl	8009114 <USB_DevInit>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e00d      	b.n	8005c90 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f003 fc08 	bl	800949e <USB_DevDisconnect>

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e264      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d075      	beq.n	8005da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cb6:	4ba3      	ldr	r3, [pc, #652]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d00c      	beq.n	8005cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cc2:	4ba0      	ldr	r3, [pc, #640]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d112      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cce:	4b9d      	ldr	r3, [pc, #628]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cda:	d10b      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cdc:	4b99      	ldr	r3, [pc, #612]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d05b      	beq.n	8005da0 <HAL_RCC_OscConfig+0x108>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d157      	bne.n	8005da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e23f      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d106      	bne.n	8005d0c <HAL_RCC_OscConfig+0x74>
 8005cfe:	4b91      	ldr	r3, [pc, #580]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a90      	ldr	r2, [pc, #576]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e01d      	b.n	8005d48 <HAL_RCC_OscConfig+0xb0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d14:	d10c      	bne.n	8005d30 <HAL_RCC_OscConfig+0x98>
 8005d16:	4b8b      	ldr	r3, [pc, #556]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a8a      	ldr	r2, [pc, #552]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	4b88      	ldr	r3, [pc, #544]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a87      	ldr	r2, [pc, #540]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	e00b      	b.n	8005d48 <HAL_RCC_OscConfig+0xb0>
 8005d30:	4b84      	ldr	r3, [pc, #528]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a83      	ldr	r2, [pc, #524]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	4b81      	ldr	r3, [pc, #516]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a80      	ldr	r2, [pc, #512]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d013      	beq.n	8005d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d50:	f7fd fc90 	bl	8003674 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d58:	f7fd fc8c 	bl	8003674 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b64      	cmp	r3, #100	; 0x64
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e204      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6a:	4b76      	ldr	r3, [pc, #472]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f0      	beq.n	8005d58 <HAL_RCC_OscConfig+0xc0>
 8005d76:	e014      	b.n	8005da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d78:	f7fd fc7c 	bl	8003674 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d80:	f7fd fc78 	bl	8003674 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b64      	cmp	r3, #100	; 0x64
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e1f0      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d92:	4b6c      	ldr	r3, [pc, #432]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <HAL_RCC_OscConfig+0xe8>
 8005d9e:	e000      	b.n	8005da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d063      	beq.n	8005e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dae:	4b65      	ldr	r3, [pc, #404]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dba:	4b62      	ldr	r3, [pc, #392]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d11c      	bne.n	8005e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dc6:	4b5f      	ldr	r3, [pc, #380]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d116      	bne.n	8005e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dd2:	4b5c      	ldr	r3, [pc, #368]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_RCC_OscConfig+0x152>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d001      	beq.n	8005dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e1c4      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dea:	4b56      	ldr	r3, [pc, #344]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4952      	ldr	r1, [pc, #328]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dfe:	e03a      	b.n	8005e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d020      	beq.n	8005e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e08:	4b4f      	ldr	r3, [pc, #316]	; (8005f48 <HAL_RCC_OscConfig+0x2b0>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0e:	f7fd fc31 	bl	8003674 <HAL_GetTick>
 8005e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e16:	f7fd fc2d 	bl	8003674 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e1a5      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e28:	4b46      	ldr	r3, [pc, #280]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0f0      	beq.n	8005e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e34:	4b43      	ldr	r3, [pc, #268]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	4940      	ldr	r1, [pc, #256]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	600b      	str	r3, [r1, #0]
 8005e48:	e015      	b.n	8005e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e4a:	4b3f      	ldr	r3, [pc, #252]	; (8005f48 <HAL_RCC_OscConfig+0x2b0>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fd fc10 	bl	8003674 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e58:	f7fd fc0c 	bl	8003674 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e184      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e6a:	4b36      	ldr	r3, [pc, #216]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f0      	bne.n	8005e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d030      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d016      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e8a:	4b30      	ldr	r3, [pc, #192]	; (8005f4c <HAL_RCC_OscConfig+0x2b4>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e90:	f7fd fbf0 	bl	8003674 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e98:	f7fd fbec 	bl	8003674 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e164      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eaa:	4b26      	ldr	r3, [pc, #152]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x200>
 8005eb6:	e015      	b.n	8005ee4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb8:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <HAL_RCC_OscConfig+0x2b4>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ebe:	f7fd fbd9 	bl	8003674 <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec6:	f7fd fbd5 	bl	8003674 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e14d      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed8:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f0      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80a0 	beq.w	8006032 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ef6:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10f      	bne.n	8005f22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f02:	2300      	movs	r3, #0
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	4a0e      	ldr	r2, [pc, #56]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f10:	6413      	str	r3, [r2, #64]	; 0x40
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <HAL_RCC_OscConfig+0x2ac>)
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f22:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <HAL_RCC_OscConfig+0x2b8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d121      	bne.n	8005f72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <HAL_RCC_OscConfig+0x2b8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a07      	ldr	r2, [pc, #28]	; (8005f50 <HAL_RCC_OscConfig+0x2b8>)
 8005f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3a:	f7fd fb9b 	bl	8003674 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f40:	e011      	b.n	8005f66 <HAL_RCC_OscConfig+0x2ce>
 8005f42:	bf00      	nop
 8005f44:	40023800 	.word	0x40023800
 8005f48:	42470000 	.word	0x42470000
 8005f4c:	42470e80 	.word	0x42470e80
 8005f50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f54:	f7fd fb8e 	bl	8003674 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e106      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f66:	4b85      	ldr	r3, [pc, #532]	; (800617c <HAL_RCC_OscConfig+0x4e4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d106      	bne.n	8005f88 <HAL_RCC_OscConfig+0x2f0>
 8005f7a:	4b81      	ldr	r3, [pc, #516]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	4a80      	ldr	r2, [pc, #512]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	6713      	str	r3, [r2, #112]	; 0x70
 8005f86:	e01c      	b.n	8005fc2 <HAL_RCC_OscConfig+0x32a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b05      	cmp	r3, #5
 8005f8e:	d10c      	bne.n	8005faa <HAL_RCC_OscConfig+0x312>
 8005f90:	4b7b      	ldr	r3, [pc, #492]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	4a7a      	ldr	r2, [pc, #488]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005f96:	f043 0304 	orr.w	r3, r3, #4
 8005f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9c:	4b78      	ldr	r3, [pc, #480]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	4a77      	ldr	r2, [pc, #476]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa8:	e00b      	b.n	8005fc2 <HAL_RCC_OscConfig+0x32a>
 8005faa:	4b75      	ldr	r3, [pc, #468]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	4a74      	ldr	r2, [pc, #464]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb6:	4b72      	ldr	r3, [pc, #456]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fba:	4a71      	ldr	r2, [pc, #452]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fbc:	f023 0304 	bic.w	r3, r3, #4
 8005fc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d015      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fca:	f7fd fb53 	bl	8003674 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fd2:	f7fd fb4f 	bl	8003674 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e0c5      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe8:	4b65      	ldr	r3, [pc, #404]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8005fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0ee      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x33a>
 8005ff4:	e014      	b.n	8006020 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff6:	f7fd fb3d 	bl	8003674 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ffc:	e00a      	b.n	8006014 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ffe:	f7fd fb39 	bl	8003674 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	f241 3288 	movw	r2, #5000	; 0x1388
 800600c:	4293      	cmp	r3, r2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e0af      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006014:	4b5a      	ldr	r3, [pc, #360]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1ee      	bne.n	8005ffe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d105      	bne.n	8006032 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006026:	4b56      	ldr	r3, [pc, #344]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	4a55      	ldr	r2, [pc, #340]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 800602c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006030:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 809b 	beq.w	8006172 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800603c:	4b50      	ldr	r3, [pc, #320]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b08      	cmp	r3, #8
 8006046:	d05c      	beq.n	8006102 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d141      	bne.n	80060d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006050:	4b4c      	ldr	r3, [pc, #304]	; (8006184 <HAL_RCC_OscConfig+0x4ec>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006056:	f7fd fb0d 	bl	8003674 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800605e:	f7fd fb09 	bl	8003674 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e081      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006070:	4b43      	ldr	r3, [pc, #268]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f0      	bne.n	800605e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	019b      	lsls	r3, r3, #6
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	3b01      	subs	r3, #1
 8006096:	041b      	lsls	r3, r3, #16
 8006098:	431a      	orrs	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	061b      	lsls	r3, r3, #24
 80060a0:	4937      	ldr	r1, [pc, #220]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060a6:	4b37      	ldr	r3, [pc, #220]	; (8006184 <HAL_RCC_OscConfig+0x4ec>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ac:	f7fd fae2 	bl	8003674 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060b4:	f7fd fade 	bl	8003674 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e056      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c6:	4b2e      	ldr	r3, [pc, #184]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0x41c>
 80060d2:	e04e      	b.n	8006172 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d4:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <HAL_RCC_OscConfig+0x4ec>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060da:	f7fd facb 	bl	8003674 <HAL_GetTick>
 80060de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e2:	f7fd fac7 	bl	8003674 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e03f      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f4:	4b22      	ldr	r3, [pc, #136]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f0      	bne.n	80060e2 <HAL_RCC_OscConfig+0x44a>
 8006100:	e037      	b.n	8006172 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e032      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800610e:	4b1c      	ldr	r3, [pc, #112]	; (8006180 <HAL_RCC_OscConfig+0x4e8>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d028      	beq.n	800616e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006126:	429a      	cmp	r2, r3
 8006128:	d121      	bne.n	800616e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006134:	429a      	cmp	r2, r3
 8006136:	d11a      	bne.n	800616e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800613e:	4013      	ands	r3, r2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006144:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006146:	4293      	cmp	r3, r2
 8006148:	d111      	bne.n	800616e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	3b01      	subs	r3, #1
 8006158:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800615a:	429a      	cmp	r2, r3
 800615c:	d107      	bne.n	800616e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d001      	beq.n	8006172 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40007000 	.word	0x40007000
 8006180:	40023800 	.word	0x40023800
 8006184:	42470060 	.word	0x42470060

08006188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0cc      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800619c:	4b68      	ldr	r3, [pc, #416]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d90c      	bls.n	80061c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061aa:	4b65      	ldr	r3, [pc, #404]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b2:	4b63      	ldr	r3, [pc, #396]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d001      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0b8      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d020      	beq.n	8006212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061dc:	4b59      	ldr	r3, [pc, #356]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4a58      	ldr	r2, [pc, #352]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061f4:	4b53      	ldr	r3, [pc, #332]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4a52      	ldr	r2, [pc, #328]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006200:	4b50      	ldr	r3, [pc, #320]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	494d      	ldr	r1, [pc, #308]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	4313      	orrs	r3, r2
 8006210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d044      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d107      	bne.n	8006236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006226:	4b47      	ldr	r3, [pc, #284]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d119      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e07f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d003      	beq.n	8006246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006242:	2b03      	cmp	r3, #3
 8006244:	d107      	bne.n	8006256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006246:	4b3f      	ldr	r3, [pc, #252]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d109      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e06f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006256:	4b3b      	ldr	r3, [pc, #236]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e067      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006266:	4b37      	ldr	r3, [pc, #220]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f023 0203 	bic.w	r2, r3, #3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	4934      	ldr	r1, [pc, #208]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006274:	4313      	orrs	r3, r2
 8006276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006278:	f7fd f9fc 	bl	8003674 <HAL_GetTick>
 800627c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627e:	e00a      	b.n	8006296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006280:	f7fd f9f8 	bl	8003674 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	f241 3288 	movw	r2, #5000	; 0x1388
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e04f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006296:	4b2b      	ldr	r3, [pc, #172]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 020c 	and.w	r2, r3, #12
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d1eb      	bne.n	8006280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d20c      	bcs.n	80062d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b6:	4b22      	ldr	r3, [pc, #136]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062be:	4b20      	ldr	r3, [pc, #128]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d001      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e032      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062dc:	4b19      	ldr	r3, [pc, #100]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4916      	ldr	r1, [pc, #88]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	490e      	ldr	r1, [pc, #56]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800630e:	f000 f821 	bl	8006354 <HAL_RCC_GetSysClockFreq>
 8006312:	4602      	mov	r2, r0
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	490a      	ldr	r1, [pc, #40]	; (8006348 <HAL_RCC_ClockConfig+0x1c0>)
 8006320:	5ccb      	ldrb	r3, [r1, r3]
 8006322:	fa22 f303 	lsr.w	r3, r2, r3
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 8006328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800632a:	4b09      	ldr	r3, [pc, #36]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f7fd f95c 	bl	80035ec <HAL_InitTick>

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40023c00 	.word	0x40023c00
 8006344:	40023800 	.word	0x40023800
 8006348:	0800cce4 	.word	0x0800cce4
 800634c:	20000010 	.word	0x20000010
 8006350:	20000014 	.word	0x20000014

08006354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006354:	b5b0      	push	{r4, r5, r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800635a:	2100      	movs	r1, #0
 800635c:	6079      	str	r1, [r7, #4]
 800635e:	2100      	movs	r1, #0
 8006360:	60f9      	str	r1, [r7, #12]
 8006362:	2100      	movs	r1, #0
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006366:	2100      	movs	r1, #0
 8006368:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800636a:	4952      	ldr	r1, [pc, #328]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800636c:	6889      	ldr	r1, [r1, #8]
 800636e:	f001 010c 	and.w	r1, r1, #12
 8006372:	2908      	cmp	r1, #8
 8006374:	d00d      	beq.n	8006392 <HAL_RCC_GetSysClockFreq+0x3e>
 8006376:	2908      	cmp	r1, #8
 8006378:	f200 8094 	bhi.w	80064a4 <HAL_RCC_GetSysClockFreq+0x150>
 800637c:	2900      	cmp	r1, #0
 800637e:	d002      	beq.n	8006386 <HAL_RCC_GetSysClockFreq+0x32>
 8006380:	2904      	cmp	r1, #4
 8006382:	d003      	beq.n	800638c <HAL_RCC_GetSysClockFreq+0x38>
 8006384:	e08e      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006386:	4b4c      	ldr	r3, [pc, #304]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8006388:	60bb      	str	r3, [r7, #8]
       break;
 800638a:	e08e      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800638c:	4b4b      	ldr	r3, [pc, #300]	; (80064bc <HAL_RCC_GetSysClockFreq+0x168>)
 800638e:	60bb      	str	r3, [r7, #8]
      break;
 8006390:	e08b      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006392:	4948      	ldr	r1, [pc, #288]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006394:	6849      	ldr	r1, [r1, #4]
 8006396:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800639a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800639c:	4945      	ldr	r1, [pc, #276]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800639e:	6849      	ldr	r1, [r1, #4]
 80063a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d024      	beq.n	80063f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063a8:	4942      	ldr	r1, [pc, #264]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80063aa:	6849      	ldr	r1, [r1, #4]
 80063ac:	0989      	lsrs	r1, r1, #6
 80063ae:	4608      	mov	r0, r1
 80063b0:	f04f 0100 	mov.w	r1, #0
 80063b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80063b8:	f04f 0500 	mov.w	r5, #0
 80063bc:	ea00 0204 	and.w	r2, r0, r4
 80063c0:	ea01 0305 	and.w	r3, r1, r5
 80063c4:	493d      	ldr	r1, [pc, #244]	; (80064bc <HAL_RCC_GetSysClockFreq+0x168>)
 80063c6:	fb01 f003 	mul.w	r0, r1, r3
 80063ca:	2100      	movs	r1, #0
 80063cc:	fb01 f102 	mul.w	r1, r1, r2
 80063d0:	1844      	adds	r4, r0, r1
 80063d2:	493a      	ldr	r1, [pc, #232]	; (80064bc <HAL_RCC_GetSysClockFreq+0x168>)
 80063d4:	fba2 0101 	umull	r0, r1, r2, r1
 80063d8:	1863      	adds	r3, r4, r1
 80063da:	4619      	mov	r1, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	461a      	mov	r2, r3
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	f7fa fc40 	bl	8000c68 <__aeabi_uldivmod>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4613      	mov	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	e04a      	b.n	8006488 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063f2:	4b30      	ldr	r3, [pc, #192]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	099b      	lsrs	r3, r3, #6
 80063f8:	461a      	mov	r2, r3
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006402:	f04f 0100 	mov.w	r1, #0
 8006406:	ea02 0400 	and.w	r4, r2, r0
 800640a:	ea03 0501 	and.w	r5, r3, r1
 800640e:	4620      	mov	r0, r4
 8006410:	4629      	mov	r1, r5
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	014b      	lsls	r3, r1, #5
 800641c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006420:	0142      	lsls	r2, r0, #5
 8006422:	4610      	mov	r0, r2
 8006424:	4619      	mov	r1, r3
 8006426:	1b00      	subs	r0, r0, r4
 8006428:	eb61 0105 	sbc.w	r1, r1, r5
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	018b      	lsls	r3, r1, #6
 8006436:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800643a:	0182      	lsls	r2, r0, #6
 800643c:	1a12      	subs	r2, r2, r0
 800643e:	eb63 0301 	sbc.w	r3, r3, r1
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f04f 0100 	mov.w	r1, #0
 800644a:	00d9      	lsls	r1, r3, #3
 800644c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006450:	00d0      	lsls	r0, r2, #3
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	1912      	adds	r2, r2, r4
 8006458:	eb45 0303 	adc.w	r3, r5, r3
 800645c:	f04f 0000 	mov.w	r0, #0
 8006460:	f04f 0100 	mov.w	r1, #0
 8006464:	0299      	lsls	r1, r3, #10
 8006466:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800646a:	0290      	lsls	r0, r2, #10
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4610      	mov	r0, r2
 8006472:	4619      	mov	r1, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	461a      	mov	r2, r3
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	f7fa fbf4 	bl	8000c68 <__aeabi_uldivmod>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4613      	mov	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	3301      	adds	r3, #1
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	60bb      	str	r3, [r7, #8]
      break;
 80064a2:	e002      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064a4:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x164>)
 80064a6:	60bb      	str	r3, [r7, #8]
      break;
 80064a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064aa:	68bb      	ldr	r3, [r7, #8]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bdb0      	pop	{r4, r5, r7, pc}
 80064b4:	40023800 	.word	0x40023800
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	00b71b00 	.word	0x00b71b00

080064c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064c4:	4b03      	ldr	r3, [pc, #12]	; (80064d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064c6:	681b      	ldr	r3, [r3, #0]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000010 	.word	0x20000010

080064d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064dc:	f7ff fff0 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 80064e0:	4602      	mov	r2, r0
 80064e2:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	0a9b      	lsrs	r3, r3, #10
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4903      	ldr	r1, [pc, #12]	; (80064fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ee:	5ccb      	ldrb	r3, [r1, r3]
 80064f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40023800 	.word	0x40023800
 80064fc:	0800ccf4 	.word	0x0800ccf4

08006500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006504:	f7ff ffdc 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 8006508:	4602      	mov	r2, r0
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	0b5b      	lsrs	r3, r3, #13
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	4903      	ldr	r1, [pc, #12]	; (8006524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006516:	5ccb      	ldrb	r3, [r1, r3]
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40023800 	.word	0x40023800
 8006524:	0800ccf4 	.word	0x0800ccf4

08006528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10b      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800654c:	2b00      	cmp	r3, #0
 800654e:	d105      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006558:	2b00      	cmp	r3, #0
 800655a:	d075      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800655c:	4bad      	ldr	r3, [pc, #692]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006562:	f7fd f887 	bl	8003674 <HAL_GetTick>
 8006566:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006568:	e008      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800656a:	f7fd f883 	bl	8003674 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e18b      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800657c:	4ba6      	ldr	r3, [pc, #664]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f0      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d009      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	019a      	lsls	r2, r3, #6
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	071b      	lsls	r3, r3, #28
 80065a0:	499d      	ldr	r1, [pc, #628]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01f      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065b4:	4b98      	ldr	r3, [pc, #608]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ba:	0f1b      	lsrs	r3, r3, #28
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	019a      	lsls	r2, r3, #6
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	061b      	lsls	r3, r3, #24
 80065ce:	431a      	orrs	r2, r3
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	071b      	lsls	r3, r3, #28
 80065d4:	4990      	ldr	r1, [pc, #576]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80065dc:	4b8e      	ldr	r3, [pc, #568]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065e2:	f023 021f 	bic.w	r2, r3, #31
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	498a      	ldr	r1, [pc, #552]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00d      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	019a      	lsls	r2, r3, #6
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	061b      	lsls	r3, r3, #24
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	071b      	lsls	r3, r3, #28
 8006614:	4980      	ldr	r1, [pc, #512]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006616:	4313      	orrs	r3, r2
 8006618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800661c:	4b7d      	ldr	r3, [pc, #500]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800661e:	2201      	movs	r2, #1
 8006620:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006622:	f7fd f827 	bl	8003674 <HAL_GetTick>
 8006626:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006628:	e008      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800662a:	f7fd f823 	bl	8003674 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e12b      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800663c:	4b76      	ldr	r3, [pc, #472]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800665c:	2b00      	cmp	r3, #0
 800665e:	d079      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006660:	4b6e      	ldr	r3, [pc, #440]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006666:	f7fd f805 	bl	8003674 <HAL_GetTick>
 800666a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800666c:	e008      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800666e:	f7fd f801 	bl	8003674 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e109      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006680:	4b65      	ldr	r3, [pc, #404]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800668c:	d0ef      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d020      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800669a:	4b5f      	ldr	r3, [pc, #380]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800669c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a0:	0f1b      	lsrs	r3, r3, #28
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	019a      	lsls	r2, r3, #6
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	061b      	lsls	r3, r3, #24
 80066b4:	431a      	orrs	r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	071b      	lsls	r3, r3, #28
 80066ba:	4957      	ldr	r1, [pc, #348]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066c2:	4b55      	ldr	r3, [pc, #340]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	4950      	ldr	r1, [pc, #320]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01e      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066e8:	4b4b      	ldr	r3, [pc, #300]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ee:	0e1b      	lsrs	r3, r3, #24
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	019a      	lsls	r2, r3, #6
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	061b      	lsls	r3, r3, #24
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	071b      	lsls	r3, r3, #28
 8006708:	4943      	ldr	r1, [pc, #268]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006710:	4b41      	ldr	r3, [pc, #260]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006716:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	493e      	ldr	r1, [pc, #248]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006720:	4313      	orrs	r3, r2
 8006722:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006726:	4b3d      	ldr	r3, [pc, #244]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006728:	2201      	movs	r2, #1
 800672a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800672c:	f7fc ffa2 	bl	8003674 <HAL_GetTick>
 8006730:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006734:	f7fc ff9e 	bl	8003674 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e0a6      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006746:	4b34      	ldr	r3, [pc, #208]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800674e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006752:	d1ef      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 808d 	beq.w	800687c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	4b2c      	ldr	r3, [pc, #176]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	4a2b      	ldr	r2, [pc, #172]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800676c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006770:	6413      	str	r3, [r2, #64]	; 0x40
 8006772:	4b29      	ldr	r3, [pc, #164]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800677e:	4b28      	ldr	r3, [pc, #160]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a27      	ldr	r2, [pc, #156]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006788:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800678a:	f7fc ff73 	bl	8003674 <HAL_GetTick>
 800678e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006790:	e008      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006792:	f7fc ff6f 	bl	8003674 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e077      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067a4:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0f0      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067b0:	4b19      	ldr	r3, [pc, #100]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d039      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d032      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067d8:	4b12      	ldr	r3, [pc, #72]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80067e4:	4a0c      	ldr	r2, [pc, #48]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067ea:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d11e      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067f6:	f7fc ff3d 	bl	8003674 <HAL_GetTick>
 80067fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067fc:	e014      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067fe:	f7fc ff39 	bl	8003674 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	f241 3288 	movw	r2, #5000	; 0x1388
 800680c:	4293      	cmp	r3, r2
 800680e:	d90b      	bls.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e03f      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006814:	42470068 	.word	0x42470068
 8006818:	40023800 	.word	0x40023800
 800681c:	42470070 	.word	0x42470070
 8006820:	40007000 	.word	0x40007000
 8006824:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006828:	4b1c      	ldr	r3, [pc, #112]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800682a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0e4      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006840:	d10d      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006842:	4b16      	ldr	r3, [pc, #88]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006856:	4911      	ldr	r1, [pc, #68]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006858:	4313      	orrs	r3, r2
 800685a:	608b      	str	r3, [r1, #8]
 800685c:	e005      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800685e:	4b0f      	ldr	r3, [pc, #60]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	4a0e      	ldr	r2, [pc, #56]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006864:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006868:	6093      	str	r3, [r2, #8]
 800686a:	4b0c      	ldr	r3, [pc, #48]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800686c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006876:	4909      	ldr	r1, [pc, #36]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006878:	4313      	orrs	r3, r2
 800687a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800688e:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006890:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40023800 	.word	0x40023800
 80068a0:	424711e0 	.word	0x424711e0

080068a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e022      	b.n	80068fc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d105      	bne.n	80068ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7fc fae7 	bl	8002e9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2203      	movs	r2, #3
 80068d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f814 	bl	8006904 <HAL_SD_InitCard>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e00a      	b.n	80068fc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006904:	b5b0      	push	{r4, r5, r7, lr}
 8006906:	b08e      	sub	sp, #56	; 0x38
 8006908:	af04      	add	r7, sp, #16
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800690c:	2300      	movs	r3, #0
 800690e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006914:	2300      	movs	r3, #0
 8006916:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800691c:	2300      	movs	r3, #0
 800691e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006920:	2376      	movs	r3, #118	; 0x76
 8006922:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681d      	ldr	r5, [r3, #0]
 8006928:	466c      	mov	r4, sp
 800692a:	f107 0314 	add.w	r3, r7, #20
 800692e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006932:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006936:	f107 0308 	add.w	r3, r7, #8
 800693a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800693c:	4628      	mov	r0, r5
 800693e:	f001 fdd9 	bl	80084f4 <SDIO_Init>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e04c      	b.n	80069ee <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006954:	4b28      	ldr	r3, [pc, #160]	; (80069f8 <HAL_SD_InitCard+0xf4>)
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f001 fe11 	bl	8008586 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006964:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <HAL_SD_InitCard+0xf4>)
 8006966:	2201      	movs	r2, #1
 8006968:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 ff02 	bl	8007774 <SD_PowerON>
 8006970:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e02e      	b.n	80069ee <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fe23 	bl	80075dc <SD_InitCard>
 8006996:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00b      	beq.n	80069b6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e01b      	b.n	80069ee <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 fe74 	bl	80086ac <SDMMC_CmdBlockLength>
 80069c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00f      	beq.n	80069ec <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a0a      	ldr	r2, [pc, #40]	; (80069fc <HAL_SD_InitCard+0xf8>)
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e000      	b.n	80069ee <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3728      	adds	r7, #40	; 0x28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bdb0      	pop	{r4, r5, r7, pc}
 80069f6:	bf00      	nop
 80069f8:	422580a0 	.word	0x422580a0
 80069fc:	004005ff 	.word	0x004005ff

08006a00 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b092      	sub	sp, #72	; 0x48
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006a0e:	f7fc fe31 	bl	8003674 <HAL_GetTick>
 8006a12:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d107      	bne.n	8006a32 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e1bd      	b.n	8006dae <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	f040 81b0 	bne.w	8006da0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	441a      	add	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d907      	bls.n	8006a64 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e1a4      	b.n	8006dae <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2203      	movs	r2, #3
 8006a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2200      	movs	r2, #0
 8006a72:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d002      	beq.n	8006a82 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	025b      	lsls	r3, r3, #9
 8006a80:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a82:	f04f 33ff 	mov.w	r3, #4294967295
 8006a86:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	025b      	lsls	r3, r3, #9
 8006a8c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006a8e:	2390      	movs	r3, #144	; 0x90
 8006a90:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006a92:	2302      	movs	r3, #2
 8006a94:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f107 0214 	add.w	r2, r7, #20
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 fdd3 	bl	8008654 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d90a      	bls.n	8006aca <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f001 fe37 	bl	8008734 <SDMMC_CmdReadMultiBlock>
 8006ac6:	6478      	str	r0, [r7, #68]	; 0x44
 8006ac8:	e009      	b.n	8006ade <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 fe0a 	bl	80086f0 <SDMMC_CmdReadSingleBlock>
 8006adc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d012      	beq.n	8006b0a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a7a      	ldr	r2, [pc, #488]	; (8006cd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af2:	431a      	orrs	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e151      	b.n	8006dae <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006b0e:	e061      	b.n	8006bd4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d03c      	beq.n	8006b98 <HAL_SD_ReadBlocks+0x198>
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d039      	beq.n	8006b98 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006b24:	2300      	movs	r3, #0
 8006b26:	643b      	str	r3, [r7, #64]	; 0x40
 8006b28:	e033      	b.n	8006b92 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f001 fd0b 	bl	800854a <SDIO_ReadFIFO>
 8006b34:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b40:	3301      	adds	r3, #1
 8006b42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b46:	3b01      	subs	r3, #1
 8006b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	0a1b      	lsrs	r3, r3, #8
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b56:	3301      	adds	r3, #1
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	0c1b      	lsrs	r3, r3, #16
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b72:	3b01      	subs	r3, #1
 8006b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	0e1b      	lsrs	r3, r3, #24
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b82:	3301      	adds	r3, #1
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8e:	3301      	adds	r3, #1
 8006b90:	643b      	str	r3, [r7, #64]	; 0x40
 8006b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b94:	2b07      	cmp	r3, #7
 8006b96:	d9c8      	bls.n	8006b2a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006b98:	f7fc fd6c 	bl	8003674 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d902      	bls.n	8006bae <HAL_SD_ReadBlocks+0x1ae>
 8006ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d112      	bne.n	8006bd4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a48      	ldr	r2, [pc, #288]	; (8006cd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e0ec      	b.n	8006dae <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bda:	f240 332a 	movw	r3, #810	; 0x32a
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d095      	beq.n	8006b10 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d022      	beq.n	8006c38 <HAL_SD_ReadBlocks+0x238>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d91f      	bls.n	8006c38 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d01b      	beq.n	8006c38 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 fdfb 	bl	8008800 <SDMMC_CmdStopTransfer>
 8006c0a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d012      	beq.n	8006c38 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a2f      	ldr	r2, [pc, #188]	; (8006cd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c20:	431a      	orrs	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e0ba      	b.n	8006dae <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d012      	beq.n	8006c6c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a22      	ldr	r2, [pc, #136]	; (8006cd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006c4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c52:	f043 0208 	orr.w	r2, r3, #8
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0a0      	b.n	8006dae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d012      	beq.n	8006ca0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	f043 0202 	orr.w	r2, r3, #2
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e086      	b.n	8006dae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d063      	beq.n	8006d76 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a08      	ldr	r2, [pc, #32]	; (8006cd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	f043 0220 	orr.w	r2, r3, #32
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e06c      	b.n	8006dae <HAL_SD_ReadBlocks+0x3ae>
 8006cd4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 fc34 	bl	800854a <SDIO_ReadFIFO>
 8006ce2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cee:	3301      	adds	r3, #1
 8006cf0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d04:	3301      	adds	r3, #1
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	0c1b      	lsrs	r3, r3, #16
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d16:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d20:	3b01      	subs	r3, #1
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	0e1b      	lsrs	r3, r3, #24
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	3301      	adds	r3, #1
 8006d32:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d36:	3b01      	subs	r3, #1
 8006d38:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006d3a:	f7fc fc9b 	bl	8003674 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d902      	bls.n	8006d50 <HAL_SD_ReadBlocks+0x350>
 8006d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d112      	bne.n	8006d76 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a18      	ldr	r2, [pc, #96]	; (8006db8 <HAL_SD_ReadBlocks+0x3b8>)
 8006d56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e01b      	b.n	8006dae <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <HAL_SD_ReadBlocks+0x38a>
 8006d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1a6      	bne.n	8006cd8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d92:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e006      	b.n	8006dae <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
  }
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3748      	adds	r7, #72	; 0x48
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	004005ff 	.word	0x004005ff

08006dbc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b092      	sub	sp, #72	; 0x48
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006dca:	f7fc fc53 	bl	8003674 <HAL_GetTick>
 8006dce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d107      	bne.n	8006dee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e166      	b.n	80070bc <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	f040 8159 	bne.w	80070ae <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	441a      	add	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d907      	bls.n	8006e20 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e14d      	b.n	80070bc <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2203      	movs	r2, #3
 8006e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d002      	beq.n	8006e3e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	025b      	lsls	r3, r3, #9
 8006e3c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e42:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	025b      	lsls	r3, r3, #9
 8006e48:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006e4a:	2390      	movs	r3, #144	; 0x90
 8006e4c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006e56:	2301      	movs	r3, #1
 8006e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f107 0218 	add.w	r2, r7, #24
 8006e62:	4611      	mov	r1, r2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 fbf5 	bl	8008654 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d90a      	bls.n	8006e86 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 fc9d 	bl	80087bc <SDMMC_CmdWriteMultiBlock>
 8006e82:	6478      	str	r0, [r7, #68]	; 0x44
 8006e84:	e009      	b.n	8006e9a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2210      	movs	r2, #16
 8006e8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 fc70 	bl	8008778 <SDMMC_CmdWriteSingleBlock>
 8006e98:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d012      	beq.n	8006ec6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a87      	ldr	r2, [pc, #540]	; (80070c4 <HAL_SD_WriteBlocks+0x308>)
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e0fa      	b.n	80070bc <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006eca:	e065      	b.n	8006f98 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d040      	beq.n	8006f5c <HAL_SD_WriteBlocks+0x1a0>
 8006eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d03d      	beq.n	8006f5c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ee4:	e037      	b.n	8006f56 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	3301      	adds	r3, #1
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	021a      	lsls	r2, r3, #8
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f06:	3301      	adds	r3, #1
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	041a      	lsls	r2, r3, #16
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	3301      	adds	r3, #1
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f24:	3b01      	subs	r3, #1
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	061a      	lsls	r2, r3, #24
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f36:	3301      	adds	r3, #1
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f107 0214 	add.w	r2, r7, #20
 8006f48:	4611      	mov	r1, r2
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f001 fb0a 	bl	8008564 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f52:	3301      	adds	r3, #1
 8006f54:	643b      	str	r3, [r7, #64]	; 0x40
 8006f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f58:	2b07      	cmp	r3, #7
 8006f5a:	d9c4      	bls.n	8006ee6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006f5c:	f7fc fb8a 	bl	8003674 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d902      	bls.n	8006f72 <HAL_SD_WriteBlocks+0x1b6>
 8006f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d112      	bne.n	8006f98 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a53      	ldr	r2, [pc, #332]	; (80070c4 <HAL_SD_WriteBlocks+0x308>)
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f80:	431a      	orrs	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e091      	b.n	80070bc <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f9e:	f240 331a 	movw	r3, #794	; 0x31a
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d091      	beq.n	8006ecc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d022      	beq.n	8006ffc <HAL_SD_WriteBlocks+0x240>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d91f      	bls.n	8006ffc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d01b      	beq.n	8006ffc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fc19 	bl	8008800 <SDMMC_CmdStopTransfer>
 8006fce:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d012      	beq.n	8006ffc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a3a      	ldr	r2, [pc, #232]	; (80070c4 <HAL_SD_WriteBlocks+0x308>)
 8006fdc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e05f      	b.n	80070bc <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	2b00      	cmp	r3, #0
 8007008:	d012      	beq.n	8007030 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a2d      	ldr	r2, [pc, #180]	; (80070c4 <HAL_SD_WriteBlocks+0x308>)
 8007010:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	f043 0208 	orr.w	r2, r3, #8
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e045      	b.n	80070bc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d012      	beq.n	8007064 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a20      	ldr	r2, [pc, #128]	; (80070c4 <HAL_SD_WriteBlocks+0x308>)
 8007044:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	f043 0202 	orr.w	r2, r3, #2
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e02b      	b.n	80070bc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706a:	f003 0310 	and.w	r3, r3, #16
 800706e:	2b00      	cmp	r3, #0
 8007070:	d012      	beq.n	8007098 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a13      	ldr	r2, [pc, #76]	; (80070c4 <HAL_SD_WriteBlocks+0x308>)
 8007078:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	f043 0210 	orr.w	r2, r3, #16
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e011      	b.n	80070bc <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f240 523a 	movw	r2, #1338	; 0x53a
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e006      	b.n	80070bc <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
  }
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3748      	adds	r7, #72	; 0x48
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	004005ff 	.word	0x004005ff

080070c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070d6:	0f9b      	lsrs	r3, r3, #30
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e2:	0e9b      	lsrs	r3, r3, #26
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f4:	0e1b      	lsrs	r3, r3, #24
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007106:	0c1b      	lsrs	r3, r3, #16
 8007108:	b2da      	uxtb	r2, r3
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007112:	0a1b      	lsrs	r3, r3, #8
 8007114:	b2da      	uxtb	r2, r3
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800711e:	b2da      	uxtb	r2, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007128:	0d1b      	lsrs	r3, r3, #20
 800712a:	b29a      	uxth	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	b2da      	uxtb	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007146:	0bdb      	lsrs	r3, r3, #15
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	b2da      	uxtb	r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007158:	0b9b      	lsrs	r3, r3, #14
 800715a:	b2db      	uxtb	r3, r3
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	b2da      	uxtb	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800716a:	0b5b      	lsrs	r3, r3, #13
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	b2da      	uxtb	r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800717c:	0b1b      	lsrs	r3, r3, #12
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	b2da      	uxtb	r2, r3
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007194:	2b00      	cmp	r3, #0
 8007196:	d163      	bne.n	8007260 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800719c:	009a      	lsls	r2, r3, #2
 800719e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80071a2:	4013      	ands	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80071a8:	0f92      	lsrs	r2, r2, #30
 80071aa:	431a      	orrs	r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b4:	0edb      	lsrs	r3, r3, #27
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c6:	0e1b      	lsrs	r3, r3, #24
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d8:	0d5b      	lsrs	r3, r3, #21
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ea:	0c9b      	lsrs	r3, r3, #18
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fc:	0bdb      	lsrs	r3, r3, #15
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	b2da      	uxtb	r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	7e1b      	ldrb	r3, [r3, #24]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	3302      	adds	r3, #2
 8007220:	2201      	movs	r2, #1
 8007222:	fa02 f303 	lsl.w	r3, r2, r3
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800722a:	fb02 f203 	mul.w	r2, r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	7a1b      	ldrb	r3, [r3, #8]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	2201      	movs	r2, #1
 800723e:	409a      	lsls	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800724c:	0a52      	lsrs	r2, r2, #9
 800724e:	fb02 f203 	mul.w	r2, r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800725c:	661a      	str	r2, [r3, #96]	; 0x60
 800725e:	e031      	b.n	80072c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007264:	2b01      	cmp	r3, #1
 8007266:	d11d      	bne.n	80072a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800726c:	041b      	lsls	r3, r3, #16
 800726e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007276:	0c1b      	lsrs	r3, r3, #16
 8007278:	431a      	orrs	r2, r3
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	3301      	adds	r3, #1
 8007284:	029a      	lsls	r2, r3, #10
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007298:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	661a      	str	r2, [r3, #96]	; 0x60
 80072a2:	e00f      	b.n	80072c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a58      	ldr	r2, [pc, #352]	; (800740c <HAL_SD_GetCardCSD+0x344>)
 80072aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e09d      	b.n	8007400 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c8:	0b9b      	lsrs	r3, r3, #14
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072da:	09db      	lsrs	r3, r3, #7
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fc:	0fdb      	lsrs	r3, r3, #31
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007308:	0f5b      	lsrs	r3, r3, #29
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f003 0303 	and.w	r3, r3, #3
 8007310:	b2da      	uxtb	r2, r3
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731a:	0e9b      	lsrs	r3, r3, #26
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	b2da      	uxtb	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732c:	0d9b      	lsrs	r3, r3, #22
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	b2da      	uxtb	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	0d5b      	lsrs	r3, r3, #21
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	b2db      	uxtb	r3, r3
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	b2da      	uxtb	r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736e:	0bdb      	lsrs	r3, r3, #15
 8007370:	b2db      	uxtb	r3, r3
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	b2da      	uxtb	r2, r3
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007382:	0b9b      	lsrs	r3, r3, #14
 8007384:	b2db      	uxtb	r3, r3
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	b2da      	uxtb	r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007396:	0b5b      	lsrs	r3, r3, #13
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073aa:	0b1b      	lsrs	r3, r3, #12
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073be:	0a9b      	lsrs	r3, r3, #10
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d2:	0a1b      	lsrs	r3, r3, #8
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	004005ff 	.word	0x004005ff

08007410 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007468:	b5b0      	push	{r4, r5, r7, lr}
 800746a:	b08e      	sub	sp, #56	; 0x38
 800746c:	af04      	add	r7, sp, #16
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2203      	movs	r2, #3
 800747c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007484:	2b03      	cmp	r3, #3
 8007486:	d02e      	beq.n	80074e6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748e:	d106      	bne.n	800749e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	639a      	str	r2, [r3, #56]	; 0x38
 800749c:	e029      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a4:	d10a      	bne.n	80074bc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa1a 	bl	80078e0 <SD_WideBus_Enable>
 80074ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	639a      	str	r2, [r3, #56]	; 0x38
 80074ba:	e01a      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10a      	bne.n	80074d8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa57 	bl	8007976 <SD_WideBus_Disable>
 80074c8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	639a      	str	r2, [r3, #56]	; 0x38
 80074d6:	e00c      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38
 80074e4:	e005      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00b      	beq.n	8007512 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a26      	ldr	r2, [pc, #152]	; (8007598 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007500:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007510:	e01f      	b.n	8007552 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681d      	ldr	r5, [r3, #0]
 8007538:	466c      	mov	r4, sp
 800753a:	f107 0314 	add.w	r3, r7, #20
 800753e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007542:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007546:	f107 0308 	add.w	r3, r7, #8
 800754a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800754c:	4628      	mov	r0, r5
 800754e:	f000 ffd1 	bl	80084f4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800755a:	4618      	mov	r0, r3
 800755c:	f001 f8a6 	bl	80086ac <SDMMC_CmdBlockLength>
 8007560:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00c      	beq.n	8007582 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a0a      	ldr	r2, [pc, #40]	; (8007598 <HAL_SD_ConfigWideBusOperation+0x130>)
 800756e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	431a      	orrs	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800758a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800758e:	4618      	mov	r0, r3
 8007590:	3728      	adds	r7, #40	; 0x28
 8007592:	46bd      	mov	sp, r7
 8007594:	bdb0      	pop	{r4, r5, r7, pc}
 8007596:	bf00      	nop
 8007598:	004005ff 	.word	0x004005ff

0800759c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80075a8:	f107 030c 	add.w	r3, r7, #12
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f96e 	bl	8007890 <SD_SendStatus>
 80075b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	0a5b      	lsrs	r3, r3, #9
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80075d2:	693b      	ldr	r3, [r7, #16]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075dc:	b5b0      	push	{r4, r5, r7, lr}
 80075de:	b094      	sub	sp, #80	; 0x50
 80075e0:	af04      	add	r7, sp, #16
 80075e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80075e4:	2301      	movs	r3, #1
 80075e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 ffd9 	bl	80085a4 <SDIO_GetPowerState>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d102      	bne.n	80075fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80075fc:	e0b6      	b.n	800776c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007602:	2b03      	cmp	r3, #3
 8007604:	d02f      	beq.n	8007666 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4618      	mov	r0, r3
 800760c:	f001 fa02 	bl	8008a14 <SDMMC_CmdSendCID>
 8007610:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <SD_InitCard+0x40>
    {
      return errorstate;
 8007618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761a:	e0a7      	b.n	800776c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2100      	movs	r1, #0
 8007622:	4618      	mov	r0, r3
 8007624:	f001 f803 	bl	800862e <SDIO_GetResponse>
 8007628:	4602      	mov	r2, r0
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2104      	movs	r1, #4
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fffa 	bl	800862e <SDIO_GetResponse>
 800763a:	4602      	mov	r2, r0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2108      	movs	r1, #8
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fff1 	bl	800862e <SDIO_GetResponse>
 800764c:	4602      	mov	r2, r0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	210c      	movs	r1, #12
 8007658:	4618      	mov	r0, r3
 800765a:	f000 ffe8 	bl	800862e <SDIO_GetResponse>
 800765e:	4602      	mov	r2, r0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766a:	2b03      	cmp	r3, #3
 800766c:	d00d      	beq.n	800768a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f107 020e 	add.w	r2, r7, #14
 8007676:	4611      	mov	r1, r2
 8007678:	4618      	mov	r0, r3
 800767a:	f001 fa08 	bl	8008a8e <SDMMC_CmdSetRelAdd>
 800767e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <SD_InitCard+0xae>
    {
      return errorstate;
 8007686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007688:	e070      	b.n	800776c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768e:	2b03      	cmp	r3, #3
 8007690:	d036      	beq.n	8007700 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007692:	89fb      	ldrh	r3, [r7, #14]
 8007694:	461a      	mov	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a2:	041b      	lsls	r3, r3, #16
 80076a4:	4619      	mov	r1, r3
 80076a6:	4610      	mov	r0, r2
 80076a8:	f001 f9d2 	bl	8008a50 <SDMMC_CmdSendCSD>
 80076ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80076ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80076b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b6:	e059      	b.n	800776c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2100      	movs	r1, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 ffb5 	bl	800862e <SDIO_GetResponse>
 80076c4:	4602      	mov	r2, r0
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2104      	movs	r1, #4
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 ffac 	bl	800862e <SDIO_GetResponse>
 80076d6:	4602      	mov	r2, r0
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2108      	movs	r1, #8
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 ffa3 	bl	800862e <SDIO_GetResponse>
 80076e8:	4602      	mov	r2, r0
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	210c      	movs	r1, #12
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 ff9a 	bl	800862e <SDIO_GetResponse>
 80076fa:	4602      	mov	r2, r0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2104      	movs	r1, #4
 8007706:	4618      	mov	r0, r3
 8007708:	f000 ff91 	bl	800862e <SDIO_GetResponse>
 800770c:	4603      	mov	r3, r0
 800770e:	0d1a      	lsrs	r2, r3, #20
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007714:	f107 0310 	add.w	r3, r7, #16
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff fcd4 	bl	80070c8 <HAL_SD_GetCardCSD>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007726:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800772a:	e01f      	b.n	800776c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6819      	ldr	r1, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007734:	041b      	lsls	r3, r3, #16
 8007736:	461a      	mov	r2, r3
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	4608      	mov	r0, r1
 800773e:	f001 f881 	bl	8008844 <SDMMC_CmdSelDesel>
 8007742:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <SD_InitCard+0x172>
  {
    return errorstate;
 800774a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774c:	e00e      	b.n	800776c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681d      	ldr	r5, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	466c      	mov	r4, sp
 8007756:	f103 0210 	add.w	r2, r3, #16
 800775a:	ca07      	ldmia	r2, {r0, r1, r2}
 800775c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007760:	3304      	adds	r3, #4
 8007762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007764:	4628      	mov	r0, r5
 8007766:	f000 fec5 	bl	80084f4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3740      	adds	r7, #64	; 0x40
 8007770:	46bd      	mov	sp, r7
 8007772:	bdb0      	pop	{r4, r5, r7, pc}

08007774 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	2300      	movs	r3, #0
 8007786:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4618      	mov	r0, r3
 800778e:	f001 f87c 	bl	800888a <SDMMC_CmdGoIdleState>
 8007792:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <SD_PowerON+0x2a>
  {
    return errorstate;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	e072      	b.n	8007884 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 f88f 	bl	80088c6 <SDMMC_CmdOperCond>
 80077a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00d      	beq.n	80077cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 f865 	bl	800888a <SDMMC_CmdGoIdleState>
 80077c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	e05b      	b.n	8007884 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d137      	bne.n	800784a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f001 f88f 	bl	8008904 <SDMMC_CmdAppCommand>
 80077e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d02d      	beq.n	800784a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077f2:	e047      	b.n	8007884 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2100      	movs	r1, #0
 80077fa:	4618      	mov	r0, r3
 80077fc:	f001 f882 	bl	8008904 <SDMMC_CmdAppCommand>
 8007800:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <SD_PowerON+0x98>
    {
      return errorstate;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	e03b      	b.n	8007884 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	491e      	ldr	r1, [pc, #120]	; (800788c <SD_PowerON+0x118>)
 8007812:	4618      	mov	r0, r3
 8007814:	f001 f898 	bl	8008948 <SDMMC_CmdAppOperCommand>
 8007818:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007820:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007824:	e02e      	b.n	8007884 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2100      	movs	r1, #0
 800782c:	4618      	mov	r0, r3
 800782e:	f000 fefe 	bl	800862e <SDIO_GetResponse>
 8007832:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	0fdb      	lsrs	r3, r3, #31
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <SD_PowerON+0xcc>
 800783c:	2301      	movs	r3, #1
 800783e:	e000      	b.n	8007842 <SD_PowerON+0xce>
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]

    count++;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	3301      	adds	r3, #1
 8007848:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007850:	4293      	cmp	r3, r2
 8007852:	d802      	bhi.n	800785a <SD_PowerON+0xe6>
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d0cc      	beq.n	80077f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007860:	4293      	cmp	r3, r2
 8007862:	d902      	bls.n	800786a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007868:	e00c      	b.n	8007884 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	645a      	str	r2, [r3, #68]	; 0x44
 800787a:	e002      	b.n	8007882 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	c1100000 	.word	0xc1100000

08007890 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d102      	bne.n	80078a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80078a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078a4:	e018      	b.n	80078d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ae:	041b      	lsls	r3, r3, #16
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f001 f90c 	bl	8008ad0 <SDMMC_CmdSendStatus>
 80078b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	e009      	b.n	80078d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 feaf 	bl	800862e <SDIO_GetResponse>
 80078d0:	4602      	mov	r2, r0
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80078e8:	2300      	movs	r3, #0
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	2300      	movs	r3, #0
 80078ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2100      	movs	r1, #0
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fe99 	bl	800862e <SDIO_GetResponse>
 80078fc:	4603      	mov	r3, r0
 80078fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007906:	d102      	bne.n	800790e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800790c:	e02f      	b.n	800796e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f879 	bl	8007a0c <SD_FindSCR>
 800791a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	e023      	b.n	800796e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01c      	beq.n	800796a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007938:	041b      	lsls	r3, r3, #16
 800793a:	4619      	mov	r1, r3
 800793c:	4610      	mov	r0, r2
 800793e:	f000 ffe1 	bl	8008904 <SDMMC_CmdAppCommand>
 8007942:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	e00f      	b.n	800796e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2102      	movs	r1, #2
 8007954:	4618      	mov	r0, r3
 8007956:	f001 f81a 	bl	800898e <SDMMC_CmdBusWidth>
 800795a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	e003      	b.n	800796e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007966:	2300      	movs	r3, #0
 8007968:	e001      	b.n	800796e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800796a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b086      	sub	sp, #24
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	2300      	movs	r3, #0
 8007984:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2100      	movs	r1, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fe4e 	bl	800862e <SDIO_GetResponse>
 8007992:	4603      	mov	r3, r0
 8007994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800799c:	d102      	bne.n	80079a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800799e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079a2:	e02f      	b.n	8007a04 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80079a4:	f107 030c 	add.w	r3, r7, #12
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f82e 	bl	8007a0c <SD_FindSCR>
 80079b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	e023      	b.n	8007a04 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01c      	beq.n	8007a00 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ce:	041b      	lsls	r3, r3, #16
 80079d0:	4619      	mov	r1, r3
 80079d2:	4610      	mov	r0, r2
 80079d4:	f000 ff96 	bl	8008904 <SDMMC_CmdAppCommand>
 80079d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	e00f      	b.n	8007a04 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2100      	movs	r1, #0
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 ffcf 	bl	800898e <SDMMC_CmdBusWidth>
 80079f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	e003      	b.n	8007a04 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80079fc:	2300      	movs	r3, #0
 80079fe:	e001      	b.n	8007a04 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007a0c:	b590      	push	{r4, r7, lr}
 8007a0e:	b08f      	sub	sp, #60	; 0x3c
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007a16:	f7fb fe2d 	bl	8003674 <HAL_GetTick>
 8007a1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007a20:	2300      	movs	r3, #0
 8007a22:	60bb      	str	r3, [r7, #8]
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2108      	movs	r1, #8
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 fe3a 	bl	80086ac <SDMMC_CmdBlockLength>
 8007a38:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a42:	e0b2      	b.n	8007baa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4c:	041b      	lsls	r3, r3, #16
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4610      	mov	r0, r2
 8007a52:	f000 ff57 	bl	8008904 <SDMMC_CmdAppCommand>
 8007a56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	e0a3      	b.n	8007baa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a62:	f04f 33ff 	mov.w	r3, #4294967295
 8007a66:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007a68:	2308      	movs	r3, #8
 8007a6a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007a6c:	2330      	movs	r3, #48	; 0x30
 8007a6e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007a70:	2302      	movs	r3, #2
 8007a72:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f107 0210 	add.w	r2, r7, #16
 8007a84:	4611      	mov	r1, r2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fde4 	bl	8008654 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 ff9e 	bl	80089d2 <SDMMC_CmdSendSCR>
 8007a96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d02a      	beq.n	8007af4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	e083      	b.n	8007baa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00f      	beq.n	8007ad0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6819      	ldr	r1, [r3, #0]
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	f107 0208 	add.w	r2, r7, #8
 8007abc:	18d4      	adds	r4, r2, r3
 8007abe:	4608      	mov	r0, r1
 8007ac0:	f000 fd43 	bl	800854a <SDIO_ReadFIFO>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	6023      	str	r3, [r4, #0]
      index++;
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aca:	3301      	adds	r3, #1
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ace:	e006      	b.n	8007ade <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d012      	beq.n	8007b04 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ade:	f7fb fdc9 	bl	8003674 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aec:	d102      	bne.n	8007af4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007aee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007af2:	e05a      	b.n	8007baa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afa:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0cf      	beq.n	8007aa2 <SD_FindSCR+0x96>
 8007b02:	e000      	b.n	8007b06 <SD_FindSCR+0xfa>
      break;
 8007b04:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0c:	f003 0308 	and.w	r3, r3, #8
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2208      	movs	r2, #8
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	e044      	b.n	8007baa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2202      	movs	r2, #2
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b36:	2302      	movs	r3, #2
 8007b38:	e037      	b.n	8007baa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007b50:	2320      	movs	r3, #32
 8007b52:	e02a      	b.n	8007baa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b5c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	061a      	lsls	r2, r3, #24
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b6a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	0a1b      	lsrs	r3, r3, #8
 8007b70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007b74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	0e1b      	lsrs	r3, r3, #24
 8007b7a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7e:	601a      	str	r2, [r3, #0]
    scr++;
 8007b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b82:	3304      	adds	r3, #4
 8007b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	061a      	lsls	r2, r3, #24
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b92:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007b9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	0e1b      	lsrs	r3, r3, #24
 8007ba2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	373c      	adds	r7, #60	; 0x3c
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd90      	pop	{r4, r7, pc}

08007bb2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e025      	b.n	8007c12 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d106      	bne.n	8007be0 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7fb fbae 	bl	800333c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3304      	adds	r3, #4
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	f000 fb8c 	bl	8008310 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	461a      	mov	r2, r3
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	f000 fbf7 	bl	80083f6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e07b      	b.n	8007d24 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d108      	bne.n	8007c46 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c3c:	d009      	beq.n	8007c52 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	61da      	str	r2, [r3, #28]
 8007c44:	e005      	b.n	8007c52 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d106      	bne.n	8007c72 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7fb f97d 	bl	8002f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2202      	movs	r2, #2
 8007c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd6:	ea42 0103 	orr.w	r1, r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	0c1b      	lsrs	r3, r3, #16
 8007cf0:	f003 0104 	and.w	r1, r3, #4
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	f003 0210 	and.w	r2, r3, #16
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	69da      	ldr	r2, [r3, #28]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e03f      	b.n	8007dbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7fb f952 	bl	8002ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2224      	movs	r2, #36	; 0x24
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68da      	ldr	r2, [r3, #12]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f905 	bl	8007f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	691a      	ldr	r2, [r3, #16]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	695a      	ldr	r2, [r3, #20]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68da      	ldr	r2, [r3, #12]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b08a      	sub	sp, #40	; 0x28
 8007dca:	af02      	add	r7, sp, #8
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	603b      	str	r3, [r7, #0]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	d17c      	bne.n	8007ee0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <HAL_UART_Transmit+0x2c>
 8007dec:	88fb      	ldrh	r3, [r7, #6]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e075      	b.n	8007ee2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_UART_Transmit+0x3e>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e06e      	b.n	8007ee2 <HAL_UART_Transmit+0x11c>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2221      	movs	r2, #33	; 0x21
 8007e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e1a:	f7fb fc2b 	bl	8003674 <HAL_GetTick>
 8007e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	88fa      	ldrh	r2, [r7, #6]
 8007e24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	88fa      	ldrh	r2, [r7, #6]
 8007e2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e34:	d108      	bne.n	8007e48 <HAL_UART_Transmit+0x82>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d104      	bne.n	8007e48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	61bb      	str	r3, [r7, #24]
 8007e46:	e003      	b.n	8007e50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007e58:	e02a      	b.n	8007eb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2200      	movs	r2, #0
 8007e62:	2180      	movs	r1, #128	; 0x80
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f840 	bl	8007eea <UART_WaitOnFlagUntilTimeout>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e036      	b.n	8007ee2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10b      	bne.n	8007e92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	3302      	adds	r3, #2
 8007e8e:	61bb      	str	r3, [r7, #24]
 8007e90:	e007      	b.n	8007ea2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	781a      	ldrb	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1cf      	bne.n	8007e5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2140      	movs	r1, #64	; 0x40
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f810 	bl	8007eea <UART_WaitOnFlagUntilTimeout>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e006      	b.n	8007ee2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	e000      	b.n	8007ee2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007ee0:	2302      	movs	r3, #2
  }
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3720      	adds	r7, #32
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	603b      	str	r3, [r7, #0]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007efa:	e02c      	b.n	8007f56 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f02:	d028      	beq.n	8007f56 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d007      	beq.n	8007f1a <UART_WaitOnFlagUntilTimeout+0x30>
 8007f0a:	f7fb fbb3 	bl	8003674 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d21d      	bcs.n	8007f56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f28:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695a      	ldr	r2, [r3, #20]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 0201 	bic.w	r2, r2, #1
 8007f38:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e00f      	b.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	bf0c      	ite	eq
 8007f66:	2301      	moveq	r3, #1
 8007f68:	2300      	movne	r3, #0
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d0c3      	beq.n	8007efc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	b09f      	sub	sp, #124	; 0x7c
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f96:	68d9      	ldr	r1, [r3, #12]
 8007f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	ea40 0301 	orr.w	r3, r0, r1
 8007fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	431a      	orrs	r2, r3
 8007fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007fc4:	f021 010c 	bic.w	r1, r1, #12
 8007fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fce:	430b      	orrs	r3, r1
 8007fd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fde:	6999      	ldr	r1, [r3, #24]
 8007fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	ea40 0301 	orr.w	r3, r0, r1
 8007fe8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	4bc5      	ldr	r3, [pc, #788]	; (8008304 <UART_SetConfig+0x384>)
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d004      	beq.n	8007ffe <UART_SetConfig+0x7e>
 8007ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	4bc3      	ldr	r3, [pc, #780]	; (8008308 <UART_SetConfig+0x388>)
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d103      	bne.n	8008006 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ffe:	f7fe fa7f 	bl	8006500 <HAL_RCC_GetPCLK2Freq>
 8008002:	6778      	str	r0, [r7, #116]	; 0x74
 8008004:	e002      	b.n	800800c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008006:	f7fe fa67 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 800800a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800800c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008014:	f040 80b6 	bne.w	8008184 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800801a:	461c      	mov	r4, r3
 800801c:	f04f 0500 	mov.w	r5, #0
 8008020:	4622      	mov	r2, r4
 8008022:	462b      	mov	r3, r5
 8008024:	1891      	adds	r1, r2, r2
 8008026:	6439      	str	r1, [r7, #64]	; 0x40
 8008028:	415b      	adcs	r3, r3
 800802a:	647b      	str	r3, [r7, #68]	; 0x44
 800802c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008030:	1912      	adds	r2, r2, r4
 8008032:	eb45 0303 	adc.w	r3, r5, r3
 8008036:	f04f 0000 	mov.w	r0, #0
 800803a:	f04f 0100 	mov.w	r1, #0
 800803e:	00d9      	lsls	r1, r3, #3
 8008040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008044:	00d0      	lsls	r0, r2, #3
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	1911      	adds	r1, r2, r4
 800804c:	6639      	str	r1, [r7, #96]	; 0x60
 800804e:	416b      	adcs	r3, r5
 8008050:	667b      	str	r3, [r7, #100]	; 0x64
 8008052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	461a      	mov	r2, r3
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	1891      	adds	r1, r2, r2
 800805e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008060:	415b      	adcs	r3, r3
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008068:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800806c:	f7f8 fdfc 	bl	8000c68 <__aeabi_uldivmod>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4ba5      	ldr	r3, [pc, #660]	; (800830c <UART_SetConfig+0x38c>)
 8008076:	fba3 2302 	umull	r2, r3, r3, r2
 800807a:	095b      	lsrs	r3, r3, #5
 800807c:	011e      	lsls	r6, r3, #4
 800807e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008080:	461c      	mov	r4, r3
 8008082:	f04f 0500 	mov.w	r5, #0
 8008086:	4622      	mov	r2, r4
 8008088:	462b      	mov	r3, r5
 800808a:	1891      	adds	r1, r2, r2
 800808c:	6339      	str	r1, [r7, #48]	; 0x30
 800808e:	415b      	adcs	r3, r3
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
 8008092:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008096:	1912      	adds	r2, r2, r4
 8008098:	eb45 0303 	adc.w	r3, r5, r3
 800809c:	f04f 0000 	mov.w	r0, #0
 80080a0:	f04f 0100 	mov.w	r1, #0
 80080a4:	00d9      	lsls	r1, r3, #3
 80080a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080aa:	00d0      	lsls	r0, r2, #3
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	1911      	adds	r1, r2, r4
 80080b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80080b4:	416b      	adcs	r3, r5
 80080b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	461a      	mov	r2, r3
 80080be:	f04f 0300 	mov.w	r3, #0
 80080c2:	1891      	adds	r1, r2, r2
 80080c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80080c6:	415b      	adcs	r3, r3
 80080c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80080d2:	f7f8 fdc9 	bl	8000c68 <__aeabi_uldivmod>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4b8c      	ldr	r3, [pc, #560]	; (800830c <UART_SetConfig+0x38c>)
 80080dc:	fba3 1302 	umull	r1, r3, r3, r2
 80080e0:	095b      	lsrs	r3, r3, #5
 80080e2:	2164      	movs	r1, #100	; 0x64
 80080e4:	fb01 f303 	mul.w	r3, r1, r3
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	3332      	adds	r3, #50	; 0x32
 80080ee:	4a87      	ldr	r2, [pc, #540]	; (800830c <UART_SetConfig+0x38c>)
 80080f0:	fba2 2303 	umull	r2, r3, r2, r3
 80080f4:	095b      	lsrs	r3, r3, #5
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080fc:	441e      	add	r6, r3
 80080fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008100:	4618      	mov	r0, r3
 8008102:	f04f 0100 	mov.w	r1, #0
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	1894      	adds	r4, r2, r2
 800810c:	623c      	str	r4, [r7, #32]
 800810e:	415b      	adcs	r3, r3
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
 8008112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008116:	1812      	adds	r2, r2, r0
 8008118:	eb41 0303 	adc.w	r3, r1, r3
 800811c:	f04f 0400 	mov.w	r4, #0
 8008120:	f04f 0500 	mov.w	r5, #0
 8008124:	00dd      	lsls	r5, r3, #3
 8008126:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800812a:	00d4      	lsls	r4, r2, #3
 800812c:	4622      	mov	r2, r4
 800812e:	462b      	mov	r3, r5
 8008130:	1814      	adds	r4, r2, r0
 8008132:	653c      	str	r4, [r7, #80]	; 0x50
 8008134:	414b      	adcs	r3, r1
 8008136:	657b      	str	r3, [r7, #84]	; 0x54
 8008138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	461a      	mov	r2, r3
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	1891      	adds	r1, r2, r2
 8008144:	61b9      	str	r1, [r7, #24]
 8008146:	415b      	adcs	r3, r3
 8008148:	61fb      	str	r3, [r7, #28]
 800814a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800814e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008152:	f7f8 fd89 	bl	8000c68 <__aeabi_uldivmod>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4b6c      	ldr	r3, [pc, #432]	; (800830c <UART_SetConfig+0x38c>)
 800815c:	fba3 1302 	umull	r1, r3, r3, r2
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	2164      	movs	r1, #100	; 0x64
 8008164:	fb01 f303 	mul.w	r3, r1, r3
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	3332      	adds	r3, #50	; 0x32
 800816e:	4a67      	ldr	r2, [pc, #412]	; (800830c <UART_SetConfig+0x38c>)
 8008170:	fba2 2303 	umull	r2, r3, r2, r3
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	f003 0207 	and.w	r2, r3, #7
 800817a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4432      	add	r2, r6
 8008180:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008182:	e0b9      	b.n	80082f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008186:	461c      	mov	r4, r3
 8008188:	f04f 0500 	mov.w	r5, #0
 800818c:	4622      	mov	r2, r4
 800818e:	462b      	mov	r3, r5
 8008190:	1891      	adds	r1, r2, r2
 8008192:	6139      	str	r1, [r7, #16]
 8008194:	415b      	adcs	r3, r3
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800819c:	1912      	adds	r2, r2, r4
 800819e:	eb45 0303 	adc.w	r3, r5, r3
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f04f 0100 	mov.w	r1, #0
 80081aa:	00d9      	lsls	r1, r3, #3
 80081ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081b0:	00d0      	lsls	r0, r2, #3
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	eb12 0804 	adds.w	r8, r2, r4
 80081ba:	eb43 0905 	adc.w	r9, r3, r5
 80081be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f04f 0100 	mov.w	r1, #0
 80081c8:	f04f 0200 	mov.w	r2, #0
 80081cc:	f04f 0300 	mov.w	r3, #0
 80081d0:	008b      	lsls	r3, r1, #2
 80081d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80081d6:	0082      	lsls	r2, r0, #2
 80081d8:	4640      	mov	r0, r8
 80081da:	4649      	mov	r1, r9
 80081dc:	f7f8 fd44 	bl	8000c68 <__aeabi_uldivmod>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4b49      	ldr	r3, [pc, #292]	; (800830c <UART_SetConfig+0x38c>)
 80081e6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	011e      	lsls	r6, r3, #4
 80081ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081f0:	4618      	mov	r0, r3
 80081f2:	f04f 0100 	mov.w	r1, #0
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	1894      	adds	r4, r2, r2
 80081fc:	60bc      	str	r4, [r7, #8]
 80081fe:	415b      	adcs	r3, r3
 8008200:	60fb      	str	r3, [r7, #12]
 8008202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008206:	1812      	adds	r2, r2, r0
 8008208:	eb41 0303 	adc.w	r3, r1, r3
 800820c:	f04f 0400 	mov.w	r4, #0
 8008210:	f04f 0500 	mov.w	r5, #0
 8008214:	00dd      	lsls	r5, r3, #3
 8008216:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800821a:	00d4      	lsls	r4, r2, #3
 800821c:	4622      	mov	r2, r4
 800821e:	462b      	mov	r3, r5
 8008220:	1814      	adds	r4, r2, r0
 8008222:	64bc      	str	r4, [r7, #72]	; 0x48
 8008224:	414b      	adcs	r3, r1
 8008226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	4618      	mov	r0, r3
 800822e:	f04f 0100 	mov.w	r1, #0
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	008b      	lsls	r3, r1, #2
 800823c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008240:	0082      	lsls	r2, r0, #2
 8008242:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008246:	f7f8 fd0f 	bl	8000c68 <__aeabi_uldivmod>
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	4b2f      	ldr	r3, [pc, #188]	; (800830c <UART_SetConfig+0x38c>)
 8008250:	fba3 1302 	umull	r1, r3, r3, r2
 8008254:	095b      	lsrs	r3, r3, #5
 8008256:	2164      	movs	r1, #100	; 0x64
 8008258:	fb01 f303 	mul.w	r3, r1, r3
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	3332      	adds	r3, #50	; 0x32
 8008262:	4a2a      	ldr	r2, [pc, #168]	; (800830c <UART_SetConfig+0x38c>)
 8008264:	fba2 2303 	umull	r2, r3, r2, r3
 8008268:	095b      	lsrs	r3, r3, #5
 800826a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800826e:	441e      	add	r6, r3
 8008270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008272:	4618      	mov	r0, r3
 8008274:	f04f 0100 	mov.w	r1, #0
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	1894      	adds	r4, r2, r2
 800827e:	603c      	str	r4, [r7, #0]
 8008280:	415b      	adcs	r3, r3
 8008282:	607b      	str	r3, [r7, #4]
 8008284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008288:	1812      	adds	r2, r2, r0
 800828a:	eb41 0303 	adc.w	r3, r1, r3
 800828e:	f04f 0400 	mov.w	r4, #0
 8008292:	f04f 0500 	mov.w	r5, #0
 8008296:	00dd      	lsls	r5, r3, #3
 8008298:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800829c:	00d4      	lsls	r4, r2, #3
 800829e:	4622      	mov	r2, r4
 80082a0:	462b      	mov	r3, r5
 80082a2:	eb12 0a00 	adds.w	sl, r2, r0
 80082a6:	eb43 0b01 	adc.w	fp, r3, r1
 80082aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f04f 0100 	mov.w	r1, #0
 80082b4:	f04f 0200 	mov.w	r2, #0
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	008b      	lsls	r3, r1, #2
 80082be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082c2:	0082      	lsls	r2, r0, #2
 80082c4:	4650      	mov	r0, sl
 80082c6:	4659      	mov	r1, fp
 80082c8:	f7f8 fcce 	bl	8000c68 <__aeabi_uldivmod>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4b0e      	ldr	r3, [pc, #56]	; (800830c <UART_SetConfig+0x38c>)
 80082d2:	fba3 1302 	umull	r1, r3, r3, r2
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	2164      	movs	r1, #100	; 0x64
 80082da:	fb01 f303 	mul.w	r3, r1, r3
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	3332      	adds	r3, #50	; 0x32
 80082e4:	4a09      	ldr	r2, [pc, #36]	; (800830c <UART_SetConfig+0x38c>)
 80082e6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ea:	095b      	lsrs	r3, r3, #5
 80082ec:	f003 020f 	and.w	r2, r3, #15
 80082f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4432      	add	r2, r6
 80082f6:	609a      	str	r2, [r3, #8]
}
 80082f8:	bf00      	nop
 80082fa:	377c      	adds	r7, #124	; 0x7c
 80082fc:	46bd      	mov	sp, r7
 80082fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008302:	bf00      	nop
 8008304:	40011000 	.word	0x40011000
 8008308:	40011400 	.word	0x40011400
 800830c:	51eb851f 	.word	0x51eb851f

08008310 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800831e:	2300      	movs	r3, #0
 8008320:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d029      	beq.n	800837e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008336:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800833a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008344:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800834a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008350:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008356:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800835c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008362:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008368:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800836e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4313      	orrs	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	e034      	b.n	80083e8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800838a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008394:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800839a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	4313      	orrs	r3, r2
 80083a0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80083ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083b2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80083bc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80083c2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80083c8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80083ce:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80083d4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b087      	sub	sp, #28
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d02e      	beq.n	800846e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800841c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	3b01      	subs	r3, #1
 800842a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800842c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	3b01      	subs	r3, #1
 8008434:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008436:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	3b01      	subs	r3, #1
 800843e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008440:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	3b01      	subs	r3, #1
 8008448:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800844a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	3b01      	subs	r3, #1
 8008452:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008454:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	3b01      	subs	r3, #1
 800845c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800845e:	4313      	orrs	r3, r2
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	4313      	orrs	r3, r2
 8008464:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	609a      	str	r2, [r3, #8]
 800846c:	e03b      	b.n	80084e6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800847a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800847e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	3b01      	subs	r3, #1
 8008486:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	3b01      	subs	r3, #1
 800848e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008490:	4313      	orrs	r3, r2
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80084a4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80084b4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80084be:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80084c8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80084d2:	4313      	orrs	r3, r2
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	371c      	adds	r7, #28
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80084f4:	b084      	sub	sp, #16
 80084f6:	b480      	push	{r7}
 80084f8:	b085      	sub	sp, #20
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	f107 001c 	add.w	r0, r7, #28
 8008502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800850a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800850c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800850e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008512:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008516:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800851a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800851e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800852e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	431a      	orrs	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	b004      	add	sp, #16
 8008548:	4770      	bx	lr

0800854a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2203      	movs	r2, #3
 8008592:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008594:	2002      	movs	r0, #2
 8008596:	f7fb f879 	bl	800368c <HAL_Delay>
  
  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0303 	and.w	r3, r3, #3
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085de:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80085e4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80085ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80085fa:	f023 030f 	bic.w	r3, r3, #15
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	431a      	orrs	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	b2db      	uxtb	r3, r3
}
 8008622:	4618      	mov	r0, r3
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3314      	adds	r3, #20
 800863c:	461a      	mov	r2, r3
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	4413      	add	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
}  
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800867a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008680:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008686:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800869e:	2300      	movs	r3, #0

}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80086ba:	2310      	movs	r3, #16
 80086bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086be:	2340      	movs	r3, #64	; 0x40
 80086c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086c2:	2300      	movs	r3, #0
 80086c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086cc:	f107 0308 	add.w	r3, r7, #8
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff ff74 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80086d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086dc:	2110      	movs	r1, #16
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa44 	bl	8008b6c <SDMMC_GetCmdResp1>
 80086e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086e6:	69fb      	ldr	r3, [r7, #28]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3720      	adds	r7, #32
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80086fe:	2311      	movs	r3, #17
 8008700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008702:	2340      	movs	r3, #64	; 0x40
 8008704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008706:	2300      	movs	r3, #0
 8008708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800870a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800870e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008710:	f107 0308 	add.w	r3, r7, #8
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff ff52 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800871c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008720:	2111      	movs	r1, #17
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fa22 	bl	8008b6c <SDMMC_GetCmdResp1>
 8008728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800872a:	69fb      	ldr	r3, [r7, #28]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b088      	sub	sp, #32
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008742:	2312      	movs	r3, #18
 8008744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008746:	2340      	movs	r3, #64	; 0x40
 8008748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800874a:	2300      	movs	r3, #0
 800874c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800874e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008752:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008754:	f107 0308 	add.w	r3, r7, #8
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff ff30 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008760:	f241 3288 	movw	r2, #5000	; 0x1388
 8008764:	2112      	movs	r1, #18
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fa00 	bl	8008b6c <SDMMC_GetCmdResp1>
 800876c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800876e:	69fb      	ldr	r3, [r7, #28]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3720      	adds	r7, #32
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b088      	sub	sp, #32
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008786:	2318      	movs	r3, #24
 8008788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800878a:	2340      	movs	r3, #64	; 0x40
 800878c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800878e:	2300      	movs	r3, #0
 8008790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008796:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008798:	f107 0308 	add.w	r3, r7, #8
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff ff0e 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80087a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a8:	2118      	movs	r1, #24
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f9de 	bl	8008b6c <SDMMC_GetCmdResp1>
 80087b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087b2:	69fb      	ldr	r3, [r7, #28]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3720      	adds	r7, #32
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80087ca:	2319      	movs	r3, #25
 80087cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087ce:	2340      	movs	r3, #64	; 0x40
 80087d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087d2:	2300      	movs	r3, #0
 80087d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087dc:	f107 0308 	add.w	r3, r7, #8
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff feec 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80087e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ec:	2119      	movs	r1, #25
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f9bc 	bl	8008b6c <SDMMC_GetCmdResp1>
 80087f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087f6:	69fb      	ldr	r3, [r7, #28]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3720      	adds	r7, #32
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800880c:	230c      	movs	r3, #12
 800880e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008810:	2340      	movs	r3, #64	; 0x40
 8008812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008814:	2300      	movs	r3, #0
 8008816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800881c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800881e:	f107 0308 	add.w	r3, r7, #8
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff fecb 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800882a:	4a05      	ldr	r2, [pc, #20]	; (8008840 <SDMMC_CmdStopTransfer+0x40>)
 800882c:	210c      	movs	r1, #12
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f99c 	bl	8008b6c <SDMMC_GetCmdResp1>
 8008834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008836:	69fb      	ldr	r3, [r7, #28]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3720      	adds	r7, #32
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	05f5e100 	.word	0x05f5e100

08008844 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b08a      	sub	sp, #40	; 0x28
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008854:	2307      	movs	r3, #7
 8008856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008858:	2340      	movs	r3, #64	; 0x40
 800885a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800885c:	2300      	movs	r3, #0
 800885e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008864:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008866:	f107 0310 	add.w	r3, r7, #16
 800886a:	4619      	mov	r1, r3
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff fea7 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008872:	f241 3288 	movw	r2, #5000	; 0x1388
 8008876:	2107      	movs	r1, #7
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f977 	bl	8008b6c <SDMMC_GetCmdResp1>
 800887e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008882:	4618      	mov	r0, r3
 8008884:	3728      	adds	r7, #40	; 0x28
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b088      	sub	sp, #32
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800889a:	2300      	movs	r3, #0
 800889c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800889e:	2300      	movs	r3, #0
 80088a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088a8:	f107 0308 	add.w	r3, r7, #8
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7ff fe86 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f92d 	bl	8008b14 <SDMMC_GetCmdError>
 80088ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088bc:	69fb      	ldr	r3, [r7, #28]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3720      	adds	r7, #32
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b088      	sub	sp, #32
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80088ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80088d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80088d4:	2308      	movs	r3, #8
 80088d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088d8:	2340      	movs	r3, #64	; 0x40
 80088da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088dc:	2300      	movs	r3, #0
 80088de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088e6:	f107 0308 	add.w	r3, r7, #8
 80088ea:	4619      	mov	r1, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7ff fe67 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fb24 	bl	8008f40 <SDMMC_GetCmdResp7>
 80088f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088fa:	69fb      	ldr	r3, [r7, #28]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3720      	adds	r7, #32
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b088      	sub	sp, #32
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008912:	2337      	movs	r3, #55	; 0x37
 8008914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008916:	2340      	movs	r3, #64	; 0x40
 8008918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800891a:	2300      	movs	r3, #0
 800891c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800891e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008922:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008924:	f107 0308 	add.w	r3, r7, #8
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff fe48 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008930:	f241 3288 	movw	r2, #5000	; 0x1388
 8008934:	2137      	movs	r1, #55	; 0x37
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f918 	bl	8008b6c <SDMMC_GetCmdResp1>
 800893c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800893e:	69fb      	ldr	r3, [r7, #28]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800895c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800895e:	2329      	movs	r3, #41	; 0x29
 8008960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008962:	2340      	movs	r3, #64	; 0x40
 8008964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008966:	2300      	movs	r3, #0
 8008968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800896a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800896e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008970:	f107 0308 	add.w	r3, r7, #8
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7ff fe22 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fa2b 	bl	8008dd8 <SDMMC_GetCmdResp3>
 8008982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008984:	69fb      	ldr	r3, [r7, #28]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3720      	adds	r7, #32
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b088      	sub	sp, #32
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800899c:	2306      	movs	r3, #6
 800899e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089a0:	2340      	movs	r3, #64	; 0x40
 80089a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089a4:	2300      	movs	r3, #0
 80089a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089ae:	f107 0308 	add.w	r3, r7, #8
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff fe03 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80089ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80089be:	2106      	movs	r1, #6
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f8d3 	bl	8008b6c <SDMMC_GetCmdResp1>
 80089c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089c8:	69fb      	ldr	r3, [r7, #28]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3720      	adds	r7, #32
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b088      	sub	sp, #32
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80089de:	2333      	movs	r3, #51	; 0x33
 80089e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089e2:	2340      	movs	r3, #64	; 0x40
 80089e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089e6:	2300      	movs	r3, #0
 80089e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089f0:	f107 0308 	add.w	r3, r7, #8
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff fde2 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80089fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a00:	2133      	movs	r1, #51	; 0x33
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f8b2 	bl	8008b6c <SDMMC_GetCmdResp1>
 8008a08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a0a:	69fb      	ldr	r3, [r7, #28]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3720      	adds	r7, #32
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008a20:	2302      	movs	r3, #2
 8008a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008a24:	23c0      	movs	r3, #192	; 0xc0
 8008a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a32:	f107 0308 	add.w	r3, r7, #8
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff fdc1 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f982 	bl	8008d48 <SDMMC_GetCmdResp2>
 8008a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a46:	69fb      	ldr	r3, [r7, #28]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3720      	adds	r7, #32
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008a5e:	2309      	movs	r3, #9
 8008a60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008a62:	23c0      	movs	r3, #192	; 0xc0
 8008a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a66:	2300      	movs	r3, #0
 8008a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a70:	f107 0308 	add.w	r3, r7, #8
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff fda2 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f963 	bl	8008d48 <SDMMC_GetCmdResp2>
 8008a82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a84:	69fb      	ldr	r3, [r7, #28]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3720      	adds	r7, #32
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b088      	sub	sp, #32
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008aa0:	2340      	movs	r3, #64	; 0x40
 8008aa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008aae:	f107 0308 	add.w	r3, r7, #8
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff fd83 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	2103      	movs	r1, #3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f9c8 	bl	8008e54 <SDMMC_GetCmdResp6>
 8008ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ac6:	69fb      	ldr	r3, [r7, #28]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3720      	adds	r7, #32
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b088      	sub	sp, #32
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008ade:	230d      	movs	r3, #13
 8008ae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ae2:	2340      	movs	r3, #64	; 0x40
 8008ae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008af0:	f107 0308 	add.w	r3, r7, #8
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff fd62 	bl	80085c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b00:	210d      	movs	r1, #13
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f832 	bl	8008b6c <SDMMC_GetCmdResp1>
 8008b08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3720      	adds	r7, #32
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b1c:	4b11      	ldr	r3, [pc, #68]	; (8008b64 <SDMMC_GetCmdError+0x50>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a11      	ldr	r2, [pc, #68]	; (8008b68 <SDMMC_GetCmdError+0x54>)
 8008b22:	fba2 2303 	umull	r2, r3, r2, r3
 8008b26:	0a5b      	lsrs	r3, r3, #9
 8008b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b2c:	fb02 f303 	mul.w	r3, r2, r3
 8008b30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	1e5a      	subs	r2, r3, #1
 8008b36:	60fa      	str	r2, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d102      	bne.n	8008b42 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b40:	e009      	b.n	8008b56 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0f1      	beq.n	8008b32 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	22c5      	movs	r2, #197	; 0xc5
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20000010 	.word	0x20000010
 8008b68:	10624dd3 	.word	0x10624dd3

08008b6c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	460b      	mov	r3, r1
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008b7a:	4b70      	ldr	r3, [pc, #448]	; (8008d3c <SDMMC_GetCmdResp1+0x1d0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a70      	ldr	r2, [pc, #448]	; (8008d40 <SDMMC_GetCmdResp1+0x1d4>)
 8008b80:	fba2 2303 	umull	r2, r3, r2, r3
 8008b84:	0a5a      	lsrs	r2, r3, #9
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	fb02 f303 	mul.w	r3, r2, r3
 8008b8c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	1e5a      	subs	r2, r3, #1
 8008b92:	61fa      	str	r2, [r7, #28]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b9c:	e0c9      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0ef      	beq.n	8008b8e <SDMMC_GetCmdResp1+0x22>
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1ea      	bne.n	8008b8e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bbc:	f003 0304 	and.w	r3, r3, #4
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d004      	beq.n	8008bce <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2204      	movs	r2, #4
 8008bc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bca:	2304      	movs	r3, #4
 8008bcc:	e0b1      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d004      	beq.n	8008be4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e0a6      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	22c5      	movs	r2, #197	; 0xc5
 8008be8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f7ff fd12 	bl	8008614 <SDIO_GetCommandResponse>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	7afb      	ldrb	r3, [r7, #11]
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d001      	beq.n	8008bfe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e099      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008bfe:	2100      	movs	r1, #0
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7ff fd14 	bl	800862e <SDIO_GetResponse>
 8008c06:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	4b4e      	ldr	r3, [pc, #312]	; (8008d44 <SDMMC_GetCmdResp1+0x1d8>)
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	e08d      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	da02      	bge.n	8008c22 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c20:	e087      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008c2c:	2340      	movs	r3, #64	; 0x40
 8008c2e:	e080      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008c3a:	2380      	movs	r3, #128	; 0x80
 8008c3c:	e079      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c4c:	e071      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c5c:	e069      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c6c:	e061      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008c78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c7c:	e059      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c8c:	e051      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c9c:	e049      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008ca8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008cac:	e041      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cbc:	e039      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ccc:	e031      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008cd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008cdc:	e029      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008ce8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008cec:	e021      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008cf8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cfc:	e019      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008d08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d0c:	e011      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008d18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d1c:	e009      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f003 0308 	and.w	r3, r3, #8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d002      	beq.n	8008d2e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008d28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008d2c:	e001      	b.n	8008d32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3720      	adds	r7, #32
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000010 	.word	0x20000010
 8008d40:	10624dd3 	.word	0x10624dd3
 8008d44:	fdffe008 	.word	0xfdffe008

08008d48 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d50:	4b1f      	ldr	r3, [pc, #124]	; (8008dd0 <SDMMC_GetCmdResp2+0x88>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a1f      	ldr	r2, [pc, #124]	; (8008dd4 <SDMMC_GetCmdResp2+0x8c>)
 8008d56:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5a:	0a5b      	lsrs	r3, r3, #9
 8008d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d60:	fb02 f303 	mul.w	r3, r2, r3
 8008d64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	1e5a      	subs	r2, r3, #1
 8008d6a:	60fa      	str	r2, [r7, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d102      	bne.n	8008d76 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d74:	e026      	b.n	8008dc4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0ef      	beq.n	8008d66 <SDMMC_GetCmdResp2+0x1e>
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1ea      	bne.n	8008d66 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d004      	beq.n	8008da6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2204      	movs	r2, #4
 8008da0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008da2:	2304      	movs	r3, #4
 8008da4:	e00e      	b.n	8008dc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d004      	beq.n	8008dbc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e003      	b.n	8008dc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	22c5      	movs	r2, #197	; 0xc5
 8008dc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	20000010 	.word	0x20000010
 8008dd4:	10624dd3 	.word	0x10624dd3

08008dd8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008de0:	4b1a      	ldr	r3, [pc, #104]	; (8008e4c <SDMMC_GetCmdResp3+0x74>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a1a      	ldr	r2, [pc, #104]	; (8008e50 <SDMMC_GetCmdResp3+0x78>)
 8008de6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dea:	0a5b      	lsrs	r3, r3, #9
 8008dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df0:	fb02 f303 	mul.w	r3, r2, r3
 8008df4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	1e5a      	subs	r2, r3, #1
 8008dfa:	60fa      	str	r2, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d102      	bne.n	8008e06 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e04:	e01b      	b.n	8008e3e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0ef      	beq.n	8008df6 <SDMMC_GetCmdResp3+0x1e>
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1ea      	bne.n	8008df6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2204      	movs	r2, #4
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e32:	2304      	movs	r3, #4
 8008e34:	e003      	b.n	8008e3e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	22c5      	movs	r2, #197	; 0xc5
 8008e3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	20000010 	.word	0x20000010
 8008e50:	10624dd3 	.word	0x10624dd3

08008e54 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e62:	4b35      	ldr	r3, [pc, #212]	; (8008f38 <SDMMC_GetCmdResp6+0xe4>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a35      	ldr	r2, [pc, #212]	; (8008f3c <SDMMC_GetCmdResp6+0xe8>)
 8008e68:	fba2 2303 	umull	r2, r3, r2, r3
 8008e6c:	0a5b      	lsrs	r3, r3, #9
 8008e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e72:	fb02 f303 	mul.w	r3, r2, r3
 8008e76:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	1e5a      	subs	r2, r3, #1
 8008e7c:	61fa      	str	r2, [r7, #28]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d102      	bne.n	8008e88 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e86:	e052      	b.n	8008f2e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0ef      	beq.n	8008e78 <SDMMC_GetCmdResp6+0x24>
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1ea      	bne.n	8008e78 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea6:	f003 0304 	and.w	r3, r3, #4
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d004      	beq.n	8008eb8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2204      	movs	r2, #4
 8008eb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008eb4:	2304      	movs	r3, #4
 8008eb6:	e03a      	b.n	8008f2e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d004      	beq.n	8008ece <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e02f      	b.n	8008f2e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7ff fba0 	bl	8008614 <SDIO_GetCommandResponse>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d001      	beq.n	8008ee2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e025      	b.n	8008f2e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	22c5      	movs	r2, #197	; 0xc5
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008ee8:	2100      	movs	r1, #0
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f7ff fb9f 	bl	800862e <SDIO_GetResponse>
 8008ef0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d106      	bne.n	8008f0a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	0c1b      	lsrs	r3, r3, #16
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	e011      	b.n	8008f2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f18:	e009      	b.n	8008f2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f28:	e001      	b.n	8008f2e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3720      	adds	r7, #32
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20000010 	.word	0x20000010
 8008f3c:	10624dd3 	.word	0x10624dd3

08008f40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f48:	4b22      	ldr	r3, [pc, #136]	; (8008fd4 <SDMMC_GetCmdResp7+0x94>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a22      	ldr	r2, [pc, #136]	; (8008fd8 <SDMMC_GetCmdResp7+0x98>)
 8008f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f52:	0a5b      	lsrs	r3, r3, #9
 8008f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f58:	fb02 f303 	mul.w	r3, r2, r3
 8008f5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	1e5a      	subs	r2, r3, #1
 8008f62:	60fa      	str	r2, [r7, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f6c:	e02c      	b.n	8008fc8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0ef      	beq.n	8008f5e <SDMMC_GetCmdResp7+0x1e>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1ea      	bne.n	8008f5e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d004      	beq.n	8008f9e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2204      	movs	r2, #4
 8008f98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f9a:	2304      	movs	r3, #4
 8008f9c:	e014      	b.n	8008fc8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d004      	beq.n	8008fb4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e009      	b.n	8008fc8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2240      	movs	r2, #64	; 0x40
 8008fc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008fc6:	2300      	movs	r3, #0
  
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	20000010 	.word	0x20000010
 8008fd8:	10624dd3 	.word	0x10624dd3

08008fdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fdc:	b084      	sub	sp, #16
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	f107 001c 	add.w	r0, r7, #28
 8008fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d122      	bne.n	800903a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800901c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901e:	2b01      	cmp	r3, #1
 8009020:	d105      	bne.n	800902e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fa56 	bl	80094e0 <USB_CoreReset>
 8009034:	4603      	mov	r3, r0
 8009036:	73fb      	strb	r3, [r7, #15]
 8009038:	e01a      	b.n	8009070 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa4a 	bl	80094e0 <USB_CoreReset>
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	639a      	str	r2, [r3, #56]	; 0x38
 8009062:	e005      	b.n	8009070 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	2b01      	cmp	r3, #1
 8009074:	d10b      	bne.n	800908e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f043 0206 	orr.w	r2, r3, #6
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f043 0220 	orr.w	r2, r3, #32
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800909a:	b004      	add	sp, #16
 800909c:	4770      	bx	lr

0800909e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f023 0201 	bic.w	r2, r3, #1
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d106      	bne.n	80090ec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	60da      	str	r2, [r3, #12]
 80090ea:	e00b      	b.n	8009104 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d106      	bne.n	8009100 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60da      	str	r2, [r3, #12]
 80090fe:	e001      	b.n	8009104 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e003      	b.n	800910c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009104:	2032      	movs	r0, #50	; 0x32
 8009106:	f7fa fac1 	bl	800368c <HAL_Delay>

  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009114:	b084      	sub	sp, #16
 8009116:	b580      	push	{r7, lr}
 8009118:	b086      	sub	sp, #24
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800912e:	2300      	movs	r3, #0
 8009130:	613b      	str	r3, [r7, #16]
 8009132:	e009      	b.n	8009148 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	3340      	adds	r3, #64	; 0x40
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	2200      	movs	r2, #0
 8009140:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	3301      	adds	r3, #1
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	2b0e      	cmp	r3, #14
 800914c:	d9f2      	bls.n	8009134 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800914e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009150:	2b00      	cmp	r3, #0
 8009152:	d11c      	bne.n	800918e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009162:	f043 0302 	orr.w	r3, r3, #2
 8009166:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009178:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009184:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	639a      	str	r2, [r3, #56]	; 0x38
 800918c:	e00b      	b.n	80091a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009192:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091ac:	461a      	mov	r2, r3
 80091ae:	2300      	movs	r3, #0
 80091b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b8:	4619      	mov	r1, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c0:	461a      	mov	r2, r3
 80091c2:	680b      	ldr	r3, [r1, #0]
 80091c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d10c      	bne.n	80091e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d104      	bne.n	80091dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091d2:	2100      	movs	r1, #0
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f949 	bl	800946c <USB_SetDevSpeed>
 80091da:	e008      	b.n	80091ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091dc:	2101      	movs	r1, #1
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f944 	bl	800946c <USB_SetDevSpeed>
 80091e4:	e003      	b.n	80091ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091e6:	2103      	movs	r1, #3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f93f 	bl	800946c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091ee:	2110      	movs	r1, #16
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f8f3 	bl	80093dc <USB_FlushTxFifo>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f911 	bl	8009428 <USB_FlushRxFifo>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009216:	461a      	mov	r2, r3
 8009218:	2300      	movs	r3, #0
 800921a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009222:	461a      	mov	r2, r3
 8009224:	2300      	movs	r3, #0
 8009226:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922e:	461a      	mov	r2, r3
 8009230:	2300      	movs	r3, #0
 8009232:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009234:	2300      	movs	r3, #0
 8009236:	613b      	str	r3, [r7, #16]
 8009238:	e043      	b.n	80092c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800924c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009250:	d118      	bne.n	8009284 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	461a      	mov	r2, r3
 8009266:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	e013      	b.n	8009296 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927a:	461a      	mov	r2, r3
 800927c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	e008      	b.n	8009296 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009290:	461a      	mov	r2, r3
 8009292:	2300      	movs	r3, #0
 8009294:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a2:	461a      	mov	r2, r3
 80092a4:	2300      	movs	r3, #0
 80092a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b4:	461a      	mov	r2, r3
 80092b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	3301      	adds	r3, #1
 80092c0:	613b      	str	r3, [r7, #16]
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d3b7      	bcc.n	800923a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092ca:	2300      	movs	r3, #0
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	e043      	b.n	8009358 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092e6:	d118      	bne.n	800931a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10a      	bne.n	8009304 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fa:	461a      	mov	r2, r3
 80092fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	e013      	b.n	800932c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009310:	461a      	mov	r2, r3
 8009312:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	e008      	b.n	800932c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009326:	461a      	mov	r2, r3
 8009328:	2300      	movs	r3, #0
 800932a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009338:	461a      	mov	r2, r3
 800933a:	2300      	movs	r3, #0
 800933c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934a:	461a      	mov	r2, r3
 800934c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009350:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	3301      	adds	r3, #1
 8009356:	613b      	str	r3, [r7, #16]
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	429a      	cmp	r2, r3
 800935e:	d3b7      	bcc.n	80092d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800936e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009372:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009380:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	2b00      	cmp	r3, #0
 8009386:	d105      	bne.n	8009394 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	f043 0210 	orr.w	r2, r3, #16
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	699a      	ldr	r2, [r3, #24]
 8009398:	4b0f      	ldr	r3, [pc, #60]	; (80093d8 <USB_DevInit+0x2c4>)
 800939a:	4313      	orrs	r3, r2
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80093a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d005      	beq.n	80093b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	f043 0208 	orr.w	r2, r3, #8
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d107      	bne.n	80093c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093c0:	f043 0304 	orr.w	r3, r3, #4
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3718      	adds	r7, #24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093d4:	b004      	add	sp, #16
 80093d6:	4770      	bx	lr
 80093d8:	803c3800 	.word	0x803c3800

080093dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	019b      	lsls	r3, r3, #6
 80093ee:	f043 0220 	orr.w	r2, r3, #32
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3301      	adds	r3, #1
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4a09      	ldr	r2, [pc, #36]	; (8009424 <USB_FlushTxFifo+0x48>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d901      	bls.n	8009408 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e006      	b.n	8009416 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	f003 0320 	and.w	r3, r3, #32
 8009410:	2b20      	cmp	r3, #32
 8009412:	d0f0      	beq.n	80093f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	00030d40 	.word	0x00030d40

08009428 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2210      	movs	r2, #16
 8009438:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3301      	adds	r3, #1
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4a09      	ldr	r2, [pc, #36]	; (8009468 <USB_FlushRxFifo+0x40>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d901      	bls.n	800944c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e006      	b.n	800945a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f003 0310 	and.w	r3, r3, #16
 8009454:	2b10      	cmp	r3, #16
 8009456:	d0f0      	beq.n	800943a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	00030d40 	.word	0x00030d40

0800946c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	68f9      	ldr	r1, [r7, #12]
 8009488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800948c:	4313      	orrs	r3, r2
 800948e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800949e:	b480      	push	{r7}
 80094a0:	b085      	sub	sp, #20
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094b8:	f023 0303 	bic.w	r3, r3, #3
 80094bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094cc:	f043 0302 	orr.w	r3, r3, #2
 80094d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3301      	adds	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	4a13      	ldr	r2, [pc, #76]	; (8009544 <USB_CoreReset+0x64>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d901      	bls.n	80094fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e01b      	b.n	8009536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	daf2      	bge.n	80094ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009506:	2300      	movs	r3, #0
 8009508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f043 0201 	orr.w	r2, r3, #1
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3301      	adds	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4a09      	ldr	r2, [pc, #36]	; (8009544 <USB_CoreReset+0x64>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d901      	bls.n	8009528 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e006      	b.n	8009536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b01      	cmp	r3, #1
 8009532:	d0f0      	beq.n	8009516 <USB_CoreReset+0x36>

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	00030d40 	.word	0x00030d40

08009548 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800954c:	4904      	ldr	r1, [pc, #16]	; (8009560 <MX_FATFS_Init+0x18>)
 800954e:	4805      	ldr	r0, [pc, #20]	; (8009564 <MX_FATFS_Init+0x1c>)
 8009550:	f000 f9e4 	bl	800991c <FATFS_LinkDriver>
 8009554:	4603      	mov	r3, r0
 8009556:	461a      	mov	r2, r3
 8009558:	4b03      	ldr	r3, [pc, #12]	; (8009568 <MX_FATFS_Init+0x20>)
 800955a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800955c:	bf00      	nop
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20000a20 	.word	0x20000a20
 8009564:	0800ccfc 	.word	0x0800ccfc
 8009568:	20000a1c 	.word	0x20000a1c

0800956c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009576:	f000 f879 	bl	800966c <BSP_SD_IsDetected>
 800957a:	4603      	mov	r3, r0
 800957c:	2b01      	cmp	r3, #1
 800957e:	d001      	beq.n	8009584 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e012      	b.n	80095aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009584:	480b      	ldr	r0, [pc, #44]	; (80095b4 <BSP_SD_Init+0x48>)
 8009586:	f7fd f98d 	bl	80068a4 <HAL_SD_Init>
 800958a:	4603      	mov	r3, r0
 800958c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009598:	4806      	ldr	r0, [pc, #24]	; (80095b4 <BSP_SD_Init+0x48>)
 800959a:	f7fd ff65 	bl	8007468 <HAL_SD_ConfigWideBusOperation>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80095a8:	79fb      	ldrb	r3, [r7, #7]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	200008d8 	.word	0x200008d8

080095b8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af02      	add	r7, sp, #8
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	68f9      	ldr	r1, [r7, #12]
 80095d4:	4806      	ldr	r0, [pc, #24]	; (80095f0 <BSP_SD_ReadBlocks+0x38>)
 80095d6:	f7fd fa13 	bl	8006a00 <HAL_SD_ReadBlocks>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	200008d8 	.word	0x200008d8

080095f4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af02      	add	r7, sp, #8
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	68f9      	ldr	r1, [r7, #12]
 8009610:	4806      	ldr	r0, [pc, #24]	; (800962c <BSP_SD_WriteBlocks+0x38>)
 8009612:	f7fd fbd3 	bl	8006dbc <HAL_SD_WriteBlocks>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009620:	7dfb      	ldrb	r3, [r7, #23]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	200008d8 	.word	0x200008d8

08009630 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009634:	4805      	ldr	r0, [pc, #20]	; (800964c <BSP_SD_GetCardState+0x1c>)
 8009636:	f7fd ffb1 	bl	800759c <HAL_SD_GetCardState>
 800963a:	4603      	mov	r3, r0
 800963c:	2b04      	cmp	r3, #4
 800963e:	bf14      	ite	ne
 8009640:	2301      	movne	r3, #1
 8009642:	2300      	moveq	r3, #0
 8009644:	b2db      	uxtb	r3, r3
}
 8009646:	4618      	mov	r0, r3
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	200008d8 	.word	0x200008d8

08009650 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	4803      	ldr	r0, [pc, #12]	; (8009668 <BSP_SD_GetCardInfo+0x18>)
 800965c:	f7fd fed8 	bl	8007410 <HAL_SD_GetCardInfo>
}
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	200008d8 	.word	0x200008d8

0800966c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009672:	2301      	movs	r3, #1
 8009674:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009676:	f000 f80b 	bl	8009690 <BSP_PlatformIsDetected>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009680:	2300      	movs	r3, #0
 8009682:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	b2db      	uxtb	r3, r3
}
 8009688:	4618      	mov	r0, r3
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009696:	2301      	movs	r3, #1
 8009698:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800969a:	2120      	movs	r1, #32
 800969c:	4806      	ldr	r0, [pc, #24]	; (80096b8 <BSP_PlatformIsDetected+0x28>)
 800969e:	f7fa fef7 	bl	8004490 <HAL_GPIO_ReadPin>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80096a8:	2300      	movs	r3, #0
 80096aa:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80096ac:	79fb      	ldrb	r3, [r7, #7]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	40020800 	.word	0x40020800

080096bc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <SD_CheckStatus+0x38>)
 80096c8:	2201      	movs	r2, #1
 80096ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80096cc:	f7ff ffb0 	bl	8009630 <BSP_SD_GetCardState>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d107      	bne.n	80096e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80096d6:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <SD_CheckStatus+0x38>)
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	f023 0301 	bic.w	r3, r3, #1
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	4b04      	ldr	r3, [pc, #16]	; (80096f4 <SD_CheckStatus+0x38>)
 80096e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80096e6:	4b03      	ldr	r3, [pc, #12]	; (80096f4 <SD_CheckStatus+0x38>)
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	b2db      	uxtb	r3, r3
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	20000019 	.word	0x20000019

080096f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009702:	4b0b      	ldr	r3, [pc, #44]	; (8009730 <SD_initialize+0x38>)
 8009704:	2201      	movs	r2, #1
 8009706:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009708:	f7ff ff30 	bl	800956c <BSP_SD_Init>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d107      	bne.n	8009722 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff ffd1 	bl	80096bc <SD_CheckStatus>
 800971a:	4603      	mov	r3, r0
 800971c:	461a      	mov	r2, r3
 800971e:	4b04      	ldr	r3, [pc, #16]	; (8009730 <SD_initialize+0x38>)
 8009720:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009722:	4b03      	ldr	r3, [pc, #12]	; (8009730 <SD_initialize+0x38>)
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	b2db      	uxtb	r3, r3
}
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	20000019 	.word	0x20000019

08009734 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff ffbb 	bl	80096bc <SD_CheckStatus>
 8009746:	4603      	mov	r3, r0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	60b9      	str	r1, [r7, #8]
 8009758:	607a      	str	r2, [r7, #4]
 800975a:	603b      	str	r3, [r7, #0]
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009764:	f04f 33ff 	mov.w	r3, #4294967295
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	6879      	ldr	r1, [r7, #4]
 800976c:	68b8      	ldr	r0, [r7, #8]
 800976e:	f7ff ff23 	bl	80095b8 <BSP_SD_ReadBlocks>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d107      	bne.n	8009788 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009778:	bf00      	nop
 800977a:	f7ff ff59 	bl	8009630 <BSP_SD_GetCardState>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1fa      	bne.n	800977a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009788:	7dfb      	ldrb	r3, [r7, #23]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b086      	sub	sp, #24
 8009796:	af00      	add	r7, sp, #0
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
 800979c:	603b      	str	r3, [r7, #0]
 800979e:	4603      	mov	r3, r0
 80097a0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80097a6:	f04f 33ff 	mov.w	r3, #4294967295
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	68b8      	ldr	r0, [r7, #8]
 80097b0:	f7ff ff20 	bl	80095f4 <BSP_SD_WriteBlocks>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d107      	bne.n	80097ca <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80097ba:	bf00      	nop
 80097bc:	f7ff ff38 	bl	8009630 <BSP_SD_GetCardState>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1fa      	bne.n	80097bc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08c      	sub	sp, #48	; 0x30
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	603a      	str	r2, [r7, #0]
 80097de:	71fb      	strb	r3, [r7, #7]
 80097e0:	460b      	mov	r3, r1
 80097e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80097ea:	4b25      	ldr	r3, [pc, #148]	; (8009880 <SD_ioctl+0xac>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <SD_ioctl+0x28>
 80097f8:	2303      	movs	r3, #3
 80097fa:	e03c      	b.n	8009876 <SD_ioctl+0xa2>

  switch (cmd)
 80097fc:	79bb      	ldrb	r3, [r7, #6]
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d834      	bhi.n	800986c <SD_ioctl+0x98>
 8009802:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <SD_ioctl+0x34>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	08009819 	.word	0x08009819
 800980c:	08009821 	.word	0x08009821
 8009810:	08009839 	.word	0x08009839
 8009814:	08009853 	.word	0x08009853
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800981e:	e028      	b.n	8009872 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009820:	f107 030c 	add.w	r3, r7, #12
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff ff13 	bl	8009650 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800982a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009836:	e01c      	b.n	8009872 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009838:	f107 030c 	add.w	r3, r7, #12
 800983c:	4618      	mov	r0, r3
 800983e:	f7ff ff07 	bl	8009650 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	b29a      	uxth	r2, r3
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009850:	e00f      	b.n	8009872 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009852:	f107 030c 	add.w	r3, r7, #12
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff fefa 	bl	8009650 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	0a5a      	lsrs	r2, r3, #9
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800986a:	e002      	b.n	8009872 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800986c:	2304      	movs	r3, #4
 800986e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009876:	4618      	mov	r0, r3
 8009878:	3730      	adds	r7, #48	; 0x30
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000019 	.word	0x20000019

08009884 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009884:	b480      	push	{r7}
 8009886:	b087      	sub	sp, #28
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	4613      	mov	r3, r2
 8009890:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009892:	2301      	movs	r3, #1
 8009894:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800989a:	4b1f      	ldr	r3, [pc, #124]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 800989c:	7a5b      	ldrb	r3, [r3, #9]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d131      	bne.n	8009908 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80098a4:	4b1c      	ldr	r3, [pc, #112]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098a6:	7a5b      	ldrb	r3, [r3, #9]
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	4b1a      	ldr	r3, [pc, #104]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098ae:	2100      	movs	r1, #0
 80098b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80098b2:	4b19      	ldr	r3, [pc, #100]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098b4:	7a5b      	ldrb	r3, [r3, #9]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	4a17      	ldr	r2, [pc, #92]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80098c2:	4b15      	ldr	r3, [pc, #84]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098c4:	7a5b      	ldrb	r3, [r3, #9]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	461a      	mov	r2, r3
 80098ca:	4b13      	ldr	r3, [pc, #76]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098cc:	4413      	add	r3, r2
 80098ce:	79fa      	ldrb	r2, [r7, #7]
 80098d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80098d2:	4b11      	ldr	r3, [pc, #68]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098d4:	7a5b      	ldrb	r3, [r3, #9]
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	b2d1      	uxtb	r1, r2
 80098dc:	4a0e      	ldr	r2, [pc, #56]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098de:	7251      	strb	r1, [r2, #9]
 80098e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80098e2:	7dbb      	ldrb	r3, [r7, #22]
 80098e4:	3330      	adds	r3, #48	; 0x30
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	3301      	adds	r3, #1
 80098f0:	223a      	movs	r2, #58	; 0x3a
 80098f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	3302      	adds	r3, #2
 80098f8:	222f      	movs	r2, #47	; 0x2f
 80098fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	3303      	adds	r3, #3
 8009900:	2200      	movs	r2, #0
 8009902:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
}
 800990a:	4618      	mov	r0, r3
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	2000022c 	.word	0x2000022c

0800991c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009926:	2200      	movs	r2, #0
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff ffaa 	bl	8009884 <FATFS_LinkDriverEx>
 8009930:	4603      	mov	r3, r0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
	...

0800993c <__errno>:
 800993c:	4b01      	ldr	r3, [pc, #4]	; (8009944 <__errno+0x8>)
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	2000001c 	.word	0x2000001c

08009948 <__libc_init_array>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	4d0d      	ldr	r5, [pc, #52]	; (8009980 <__libc_init_array+0x38>)
 800994c:	4c0d      	ldr	r4, [pc, #52]	; (8009984 <__libc_init_array+0x3c>)
 800994e:	1b64      	subs	r4, r4, r5
 8009950:	10a4      	asrs	r4, r4, #2
 8009952:	2600      	movs	r6, #0
 8009954:	42a6      	cmp	r6, r4
 8009956:	d109      	bne.n	800996c <__libc_init_array+0x24>
 8009958:	4d0b      	ldr	r5, [pc, #44]	; (8009988 <__libc_init_array+0x40>)
 800995a:	4c0c      	ldr	r4, [pc, #48]	; (800998c <__libc_init_array+0x44>)
 800995c:	f002 ff02 	bl	800c764 <_init>
 8009960:	1b64      	subs	r4, r4, r5
 8009962:	10a4      	asrs	r4, r4, #2
 8009964:	2600      	movs	r6, #0
 8009966:	42a6      	cmp	r6, r4
 8009968:	d105      	bne.n	8009976 <__libc_init_array+0x2e>
 800996a:	bd70      	pop	{r4, r5, r6, pc}
 800996c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009970:	4798      	blx	r3
 8009972:	3601      	adds	r6, #1
 8009974:	e7ee      	b.n	8009954 <__libc_init_array+0xc>
 8009976:	f855 3b04 	ldr.w	r3, [r5], #4
 800997a:	4798      	blx	r3
 800997c:	3601      	adds	r6, #1
 800997e:	e7f2      	b.n	8009966 <__libc_init_array+0x1e>
 8009980:	0800d0fc 	.word	0x0800d0fc
 8009984:	0800d0fc 	.word	0x0800d0fc
 8009988:	0800d0fc 	.word	0x0800d0fc
 800998c:	0800d100 	.word	0x0800d100

08009990 <memset>:
 8009990:	4402      	add	r2, r0
 8009992:	4603      	mov	r3, r0
 8009994:	4293      	cmp	r3, r2
 8009996:	d100      	bne.n	800999a <memset+0xa>
 8009998:	4770      	bx	lr
 800999a:	f803 1b01 	strb.w	r1, [r3], #1
 800999e:	e7f9      	b.n	8009994 <memset+0x4>

080099a0 <__cvt>:
 80099a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099a4:	ec55 4b10 	vmov	r4, r5, d0
 80099a8:	2d00      	cmp	r5, #0
 80099aa:	460e      	mov	r6, r1
 80099ac:	4619      	mov	r1, r3
 80099ae:	462b      	mov	r3, r5
 80099b0:	bfbb      	ittet	lt
 80099b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80099b6:	461d      	movlt	r5, r3
 80099b8:	2300      	movge	r3, #0
 80099ba:	232d      	movlt	r3, #45	; 0x2d
 80099bc:	700b      	strb	r3, [r1, #0]
 80099be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099c4:	4691      	mov	r9, r2
 80099c6:	f023 0820 	bic.w	r8, r3, #32
 80099ca:	bfbc      	itt	lt
 80099cc:	4622      	movlt	r2, r4
 80099ce:	4614      	movlt	r4, r2
 80099d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099d4:	d005      	beq.n	80099e2 <__cvt+0x42>
 80099d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80099da:	d100      	bne.n	80099de <__cvt+0x3e>
 80099dc:	3601      	adds	r6, #1
 80099de:	2102      	movs	r1, #2
 80099e0:	e000      	b.n	80099e4 <__cvt+0x44>
 80099e2:	2103      	movs	r1, #3
 80099e4:	ab03      	add	r3, sp, #12
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	ab02      	add	r3, sp, #8
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	ec45 4b10 	vmov	d0, r4, r5
 80099f0:	4653      	mov	r3, sl
 80099f2:	4632      	mov	r2, r6
 80099f4:	f000 fd38 	bl	800a468 <_dtoa_r>
 80099f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80099fc:	4607      	mov	r7, r0
 80099fe:	d102      	bne.n	8009a06 <__cvt+0x66>
 8009a00:	f019 0f01 	tst.w	r9, #1
 8009a04:	d022      	beq.n	8009a4c <__cvt+0xac>
 8009a06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a0a:	eb07 0906 	add.w	r9, r7, r6
 8009a0e:	d110      	bne.n	8009a32 <__cvt+0x92>
 8009a10:	783b      	ldrb	r3, [r7, #0]
 8009a12:	2b30      	cmp	r3, #48	; 0x30
 8009a14:	d10a      	bne.n	8009a2c <__cvt+0x8c>
 8009a16:	2200      	movs	r2, #0
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	f7f7 f863 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a22:	b918      	cbnz	r0, 8009a2c <__cvt+0x8c>
 8009a24:	f1c6 0601 	rsb	r6, r6, #1
 8009a28:	f8ca 6000 	str.w	r6, [sl]
 8009a2c:	f8da 3000 	ldr.w	r3, [sl]
 8009a30:	4499      	add	r9, r3
 8009a32:	2200      	movs	r2, #0
 8009a34:	2300      	movs	r3, #0
 8009a36:	4620      	mov	r0, r4
 8009a38:	4629      	mov	r1, r5
 8009a3a:	f7f7 f855 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a3e:	b108      	cbz	r0, 8009a44 <__cvt+0xa4>
 8009a40:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a44:	2230      	movs	r2, #48	; 0x30
 8009a46:	9b03      	ldr	r3, [sp, #12]
 8009a48:	454b      	cmp	r3, r9
 8009a4a:	d307      	bcc.n	8009a5c <__cvt+0xbc>
 8009a4c:	9b03      	ldr	r3, [sp, #12]
 8009a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a50:	1bdb      	subs	r3, r3, r7
 8009a52:	4638      	mov	r0, r7
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	b004      	add	sp, #16
 8009a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5c:	1c59      	adds	r1, r3, #1
 8009a5e:	9103      	str	r1, [sp, #12]
 8009a60:	701a      	strb	r2, [r3, #0]
 8009a62:	e7f0      	b.n	8009a46 <__cvt+0xa6>

08009a64 <__exponent>:
 8009a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a66:	4603      	mov	r3, r0
 8009a68:	2900      	cmp	r1, #0
 8009a6a:	bfb8      	it	lt
 8009a6c:	4249      	neglt	r1, r1
 8009a6e:	f803 2b02 	strb.w	r2, [r3], #2
 8009a72:	bfb4      	ite	lt
 8009a74:	222d      	movlt	r2, #45	; 0x2d
 8009a76:	222b      	movge	r2, #43	; 0x2b
 8009a78:	2909      	cmp	r1, #9
 8009a7a:	7042      	strb	r2, [r0, #1]
 8009a7c:	dd2a      	ble.n	8009ad4 <__exponent+0x70>
 8009a7e:	f10d 0407 	add.w	r4, sp, #7
 8009a82:	46a4      	mov	ip, r4
 8009a84:	270a      	movs	r7, #10
 8009a86:	46a6      	mov	lr, r4
 8009a88:	460a      	mov	r2, r1
 8009a8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a8e:	fb07 1516 	mls	r5, r7, r6, r1
 8009a92:	3530      	adds	r5, #48	; 0x30
 8009a94:	2a63      	cmp	r2, #99	; 0x63
 8009a96:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a9e:	4631      	mov	r1, r6
 8009aa0:	dcf1      	bgt.n	8009a86 <__exponent+0x22>
 8009aa2:	3130      	adds	r1, #48	; 0x30
 8009aa4:	f1ae 0502 	sub.w	r5, lr, #2
 8009aa8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009aac:	1c44      	adds	r4, r0, #1
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4561      	cmp	r1, ip
 8009ab2:	d30a      	bcc.n	8009aca <__exponent+0x66>
 8009ab4:	f10d 0209 	add.w	r2, sp, #9
 8009ab8:	eba2 020e 	sub.w	r2, r2, lr
 8009abc:	4565      	cmp	r5, ip
 8009abe:	bf88      	it	hi
 8009ac0:	2200      	movhi	r2, #0
 8009ac2:	4413      	add	r3, r2
 8009ac4:	1a18      	subs	r0, r3, r0
 8009ac6:	b003      	add	sp, #12
 8009ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ace:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ad2:	e7ed      	b.n	8009ab0 <__exponent+0x4c>
 8009ad4:	2330      	movs	r3, #48	; 0x30
 8009ad6:	3130      	adds	r1, #48	; 0x30
 8009ad8:	7083      	strb	r3, [r0, #2]
 8009ada:	70c1      	strb	r1, [r0, #3]
 8009adc:	1d03      	adds	r3, r0, #4
 8009ade:	e7f1      	b.n	8009ac4 <__exponent+0x60>

08009ae0 <_printf_float>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	ed2d 8b02 	vpush	{d8}
 8009ae8:	b08d      	sub	sp, #52	; 0x34
 8009aea:	460c      	mov	r4, r1
 8009aec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009af0:	4616      	mov	r6, r2
 8009af2:	461f      	mov	r7, r3
 8009af4:	4605      	mov	r5, r0
 8009af6:	f001 faa3 	bl	800b040 <_localeconv_r>
 8009afa:	f8d0 a000 	ldr.w	sl, [r0]
 8009afe:	4650      	mov	r0, sl
 8009b00:	f7f6 fb76 	bl	80001f0 <strlen>
 8009b04:	2300      	movs	r3, #0
 8009b06:	930a      	str	r3, [sp, #40]	; 0x28
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	9305      	str	r3, [sp, #20]
 8009b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009b14:	3307      	adds	r3, #7
 8009b16:	f023 0307 	bic.w	r3, r3, #7
 8009b1a:	f103 0208 	add.w	r2, r3, #8
 8009b1e:	f8c8 2000 	str.w	r2, [r8]
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b32:	9307      	str	r3, [sp, #28]
 8009b34:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b38:	ee08 0a10 	vmov	s16, r0
 8009b3c:	4b9f      	ldr	r3, [pc, #636]	; (8009dbc <_printf_float+0x2dc>)
 8009b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b42:	f04f 32ff 	mov.w	r2, #4294967295
 8009b46:	f7f7 f801 	bl	8000b4c <__aeabi_dcmpun>
 8009b4a:	bb88      	cbnz	r0, 8009bb0 <_printf_float+0xd0>
 8009b4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b50:	4b9a      	ldr	r3, [pc, #616]	; (8009dbc <_printf_float+0x2dc>)
 8009b52:	f04f 32ff 	mov.w	r2, #4294967295
 8009b56:	f7f6 ffdb 	bl	8000b10 <__aeabi_dcmple>
 8009b5a:	bb48      	cbnz	r0, 8009bb0 <_printf_float+0xd0>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2300      	movs	r3, #0
 8009b60:	4640      	mov	r0, r8
 8009b62:	4649      	mov	r1, r9
 8009b64:	f7f6 ffca 	bl	8000afc <__aeabi_dcmplt>
 8009b68:	b110      	cbz	r0, 8009b70 <_printf_float+0x90>
 8009b6a:	232d      	movs	r3, #45	; 0x2d
 8009b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b70:	4b93      	ldr	r3, [pc, #588]	; (8009dc0 <_printf_float+0x2e0>)
 8009b72:	4894      	ldr	r0, [pc, #592]	; (8009dc4 <_printf_float+0x2e4>)
 8009b74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b78:	bf94      	ite	ls
 8009b7a:	4698      	movls	r8, r3
 8009b7c:	4680      	movhi	r8, r0
 8009b7e:	2303      	movs	r3, #3
 8009b80:	6123      	str	r3, [r4, #16]
 8009b82:	9b05      	ldr	r3, [sp, #20]
 8009b84:	f023 0204 	bic.w	r2, r3, #4
 8009b88:	6022      	str	r2, [r4, #0]
 8009b8a:	f04f 0900 	mov.w	r9, #0
 8009b8e:	9700      	str	r7, [sp, #0]
 8009b90:	4633      	mov	r3, r6
 8009b92:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b94:	4621      	mov	r1, r4
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 f9d8 	bl	8009f4c <_printf_common>
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	f040 8090 	bne.w	8009cc2 <_printf_float+0x1e2>
 8009ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba6:	b00d      	add	sp, #52	; 0x34
 8009ba8:	ecbd 8b02 	vpop	{d8}
 8009bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb0:	4642      	mov	r2, r8
 8009bb2:	464b      	mov	r3, r9
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	f7f6 ffc8 	bl	8000b4c <__aeabi_dcmpun>
 8009bbc:	b140      	cbz	r0, 8009bd0 <_printf_float+0xf0>
 8009bbe:	464b      	mov	r3, r9
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	bfbc      	itt	lt
 8009bc4:	232d      	movlt	r3, #45	; 0x2d
 8009bc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009bca:	487f      	ldr	r0, [pc, #508]	; (8009dc8 <_printf_float+0x2e8>)
 8009bcc:	4b7f      	ldr	r3, [pc, #508]	; (8009dcc <_printf_float+0x2ec>)
 8009bce:	e7d1      	b.n	8009b74 <_printf_float+0x94>
 8009bd0:	6863      	ldr	r3, [r4, #4]
 8009bd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009bd6:	9206      	str	r2, [sp, #24]
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	d13f      	bne.n	8009c5c <_printf_float+0x17c>
 8009bdc:	2306      	movs	r3, #6
 8009bde:	6063      	str	r3, [r4, #4]
 8009be0:	9b05      	ldr	r3, [sp, #20]
 8009be2:	6861      	ldr	r1, [r4, #4]
 8009be4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009be8:	2300      	movs	r3, #0
 8009bea:	9303      	str	r3, [sp, #12]
 8009bec:	ab0a      	add	r3, sp, #40	; 0x28
 8009bee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009bf2:	ab09      	add	r3, sp, #36	; 0x24
 8009bf4:	ec49 8b10 	vmov	d0, r8, r9
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	6022      	str	r2, [r4, #0]
 8009bfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c00:	4628      	mov	r0, r5
 8009c02:	f7ff fecd 	bl	80099a0 <__cvt>
 8009c06:	9b06      	ldr	r3, [sp, #24]
 8009c08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c0a:	2b47      	cmp	r3, #71	; 0x47
 8009c0c:	4680      	mov	r8, r0
 8009c0e:	d108      	bne.n	8009c22 <_printf_float+0x142>
 8009c10:	1cc8      	adds	r0, r1, #3
 8009c12:	db02      	blt.n	8009c1a <_printf_float+0x13a>
 8009c14:	6863      	ldr	r3, [r4, #4]
 8009c16:	4299      	cmp	r1, r3
 8009c18:	dd41      	ble.n	8009c9e <_printf_float+0x1be>
 8009c1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009c1e:	fa5f fb8b 	uxtb.w	fp, fp
 8009c22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c26:	d820      	bhi.n	8009c6a <_printf_float+0x18a>
 8009c28:	3901      	subs	r1, #1
 8009c2a:	465a      	mov	r2, fp
 8009c2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c30:	9109      	str	r1, [sp, #36]	; 0x24
 8009c32:	f7ff ff17 	bl	8009a64 <__exponent>
 8009c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c38:	1813      	adds	r3, r2, r0
 8009c3a:	2a01      	cmp	r2, #1
 8009c3c:	4681      	mov	r9, r0
 8009c3e:	6123      	str	r3, [r4, #16]
 8009c40:	dc02      	bgt.n	8009c48 <_printf_float+0x168>
 8009c42:	6822      	ldr	r2, [r4, #0]
 8009c44:	07d2      	lsls	r2, r2, #31
 8009c46:	d501      	bpl.n	8009c4c <_printf_float+0x16c>
 8009c48:	3301      	adds	r3, #1
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d09c      	beq.n	8009b8e <_printf_float+0xae>
 8009c54:	232d      	movs	r3, #45	; 0x2d
 8009c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c5a:	e798      	b.n	8009b8e <_printf_float+0xae>
 8009c5c:	9a06      	ldr	r2, [sp, #24]
 8009c5e:	2a47      	cmp	r2, #71	; 0x47
 8009c60:	d1be      	bne.n	8009be0 <_printf_float+0x100>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1bc      	bne.n	8009be0 <_printf_float+0x100>
 8009c66:	2301      	movs	r3, #1
 8009c68:	e7b9      	b.n	8009bde <_printf_float+0xfe>
 8009c6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c6e:	d118      	bne.n	8009ca2 <_printf_float+0x1c2>
 8009c70:	2900      	cmp	r1, #0
 8009c72:	6863      	ldr	r3, [r4, #4]
 8009c74:	dd0b      	ble.n	8009c8e <_printf_float+0x1ae>
 8009c76:	6121      	str	r1, [r4, #16]
 8009c78:	b913      	cbnz	r3, 8009c80 <_printf_float+0x1a0>
 8009c7a:	6822      	ldr	r2, [r4, #0]
 8009c7c:	07d0      	lsls	r0, r2, #31
 8009c7e:	d502      	bpl.n	8009c86 <_printf_float+0x1a6>
 8009c80:	3301      	adds	r3, #1
 8009c82:	440b      	add	r3, r1
 8009c84:	6123      	str	r3, [r4, #16]
 8009c86:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c88:	f04f 0900 	mov.w	r9, #0
 8009c8c:	e7de      	b.n	8009c4c <_printf_float+0x16c>
 8009c8e:	b913      	cbnz	r3, 8009c96 <_printf_float+0x1b6>
 8009c90:	6822      	ldr	r2, [r4, #0]
 8009c92:	07d2      	lsls	r2, r2, #31
 8009c94:	d501      	bpl.n	8009c9a <_printf_float+0x1ba>
 8009c96:	3302      	adds	r3, #2
 8009c98:	e7f4      	b.n	8009c84 <_printf_float+0x1a4>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e7f2      	b.n	8009c84 <_printf_float+0x1a4>
 8009c9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca4:	4299      	cmp	r1, r3
 8009ca6:	db05      	blt.n	8009cb4 <_printf_float+0x1d4>
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	6121      	str	r1, [r4, #16]
 8009cac:	07d8      	lsls	r0, r3, #31
 8009cae:	d5ea      	bpl.n	8009c86 <_printf_float+0x1a6>
 8009cb0:	1c4b      	adds	r3, r1, #1
 8009cb2:	e7e7      	b.n	8009c84 <_printf_float+0x1a4>
 8009cb4:	2900      	cmp	r1, #0
 8009cb6:	bfd4      	ite	le
 8009cb8:	f1c1 0202 	rsble	r2, r1, #2
 8009cbc:	2201      	movgt	r2, #1
 8009cbe:	4413      	add	r3, r2
 8009cc0:	e7e0      	b.n	8009c84 <_printf_float+0x1a4>
 8009cc2:	6823      	ldr	r3, [r4, #0]
 8009cc4:	055a      	lsls	r2, r3, #21
 8009cc6:	d407      	bmi.n	8009cd8 <_printf_float+0x1f8>
 8009cc8:	6923      	ldr	r3, [r4, #16]
 8009cca:	4642      	mov	r2, r8
 8009ccc:	4631      	mov	r1, r6
 8009cce:	4628      	mov	r0, r5
 8009cd0:	47b8      	blx	r7
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	d12c      	bne.n	8009d30 <_printf_float+0x250>
 8009cd6:	e764      	b.n	8009ba2 <_printf_float+0xc2>
 8009cd8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cdc:	f240 80e0 	bls.w	8009ea0 <_printf_float+0x3c0>
 8009ce0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f7f6 fefe 	bl	8000ae8 <__aeabi_dcmpeq>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d034      	beq.n	8009d5a <_printf_float+0x27a>
 8009cf0:	4a37      	ldr	r2, [pc, #220]	; (8009dd0 <_printf_float+0x2f0>)
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b8      	blx	r7
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	f43f af51 	beq.w	8009ba2 <_printf_float+0xc2>
 8009d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d04:	429a      	cmp	r2, r3
 8009d06:	db02      	blt.n	8009d0e <_printf_float+0x22e>
 8009d08:	6823      	ldr	r3, [r4, #0]
 8009d0a:	07d8      	lsls	r0, r3, #31
 8009d0c:	d510      	bpl.n	8009d30 <_printf_float+0x250>
 8009d0e:	ee18 3a10 	vmov	r3, s16
 8009d12:	4652      	mov	r2, sl
 8009d14:	4631      	mov	r1, r6
 8009d16:	4628      	mov	r0, r5
 8009d18:	47b8      	blx	r7
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	f43f af41 	beq.w	8009ba2 <_printf_float+0xc2>
 8009d20:	f04f 0800 	mov.w	r8, #0
 8009d24:	f104 091a 	add.w	r9, r4, #26
 8009d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	4543      	cmp	r3, r8
 8009d2e:	dc09      	bgt.n	8009d44 <_printf_float+0x264>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	079b      	lsls	r3, r3, #30
 8009d34:	f100 8105 	bmi.w	8009f42 <_printf_float+0x462>
 8009d38:	68e0      	ldr	r0, [r4, #12]
 8009d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d3c:	4298      	cmp	r0, r3
 8009d3e:	bfb8      	it	lt
 8009d40:	4618      	movlt	r0, r3
 8009d42:	e730      	b.n	8009ba6 <_printf_float+0xc6>
 8009d44:	2301      	movs	r3, #1
 8009d46:	464a      	mov	r2, r9
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	f43f af27 	beq.w	8009ba2 <_printf_float+0xc2>
 8009d54:	f108 0801 	add.w	r8, r8, #1
 8009d58:	e7e6      	b.n	8009d28 <_printf_float+0x248>
 8009d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	dc39      	bgt.n	8009dd4 <_printf_float+0x2f4>
 8009d60:	4a1b      	ldr	r2, [pc, #108]	; (8009dd0 <_printf_float+0x2f0>)
 8009d62:	2301      	movs	r3, #1
 8009d64:	4631      	mov	r1, r6
 8009d66:	4628      	mov	r0, r5
 8009d68:	47b8      	blx	r7
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	f43f af19 	beq.w	8009ba2 <_printf_float+0xc2>
 8009d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d74:	4313      	orrs	r3, r2
 8009d76:	d102      	bne.n	8009d7e <_printf_float+0x29e>
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	07d9      	lsls	r1, r3, #31
 8009d7c:	d5d8      	bpl.n	8009d30 <_printf_float+0x250>
 8009d7e:	ee18 3a10 	vmov	r3, s16
 8009d82:	4652      	mov	r2, sl
 8009d84:	4631      	mov	r1, r6
 8009d86:	4628      	mov	r0, r5
 8009d88:	47b8      	blx	r7
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	f43f af09 	beq.w	8009ba2 <_printf_float+0xc2>
 8009d90:	f04f 0900 	mov.w	r9, #0
 8009d94:	f104 0a1a 	add.w	sl, r4, #26
 8009d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d9a:	425b      	negs	r3, r3
 8009d9c:	454b      	cmp	r3, r9
 8009d9e:	dc01      	bgt.n	8009da4 <_printf_float+0x2c4>
 8009da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009da2:	e792      	b.n	8009cca <_printf_float+0x1ea>
 8009da4:	2301      	movs	r3, #1
 8009da6:	4652      	mov	r2, sl
 8009da8:	4631      	mov	r1, r6
 8009daa:	4628      	mov	r0, r5
 8009dac:	47b8      	blx	r7
 8009dae:	3001      	adds	r0, #1
 8009db0:	f43f aef7 	beq.w	8009ba2 <_printf_float+0xc2>
 8009db4:	f109 0901 	add.w	r9, r9, #1
 8009db8:	e7ee      	b.n	8009d98 <_printf_float+0x2b8>
 8009dba:	bf00      	nop
 8009dbc:	7fefffff 	.word	0x7fefffff
 8009dc0:	0800cd14 	.word	0x0800cd14
 8009dc4:	0800cd18 	.word	0x0800cd18
 8009dc8:	0800cd20 	.word	0x0800cd20
 8009dcc:	0800cd1c 	.word	0x0800cd1c
 8009dd0:	0800cd24 	.word	0x0800cd24
 8009dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	bfa8      	it	ge
 8009ddc:	461a      	movge	r2, r3
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	4691      	mov	r9, r2
 8009de2:	dc37      	bgt.n	8009e54 <_printf_float+0x374>
 8009de4:	f04f 0b00 	mov.w	fp, #0
 8009de8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dec:	f104 021a 	add.w	r2, r4, #26
 8009df0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009df2:	9305      	str	r3, [sp, #20]
 8009df4:	eba3 0309 	sub.w	r3, r3, r9
 8009df8:	455b      	cmp	r3, fp
 8009dfa:	dc33      	bgt.n	8009e64 <_printf_float+0x384>
 8009dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e00:	429a      	cmp	r2, r3
 8009e02:	db3b      	blt.n	8009e7c <_printf_float+0x39c>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	07da      	lsls	r2, r3, #31
 8009e08:	d438      	bmi.n	8009e7c <_printf_float+0x39c>
 8009e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e0c:	9b05      	ldr	r3, [sp, #20]
 8009e0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	eba2 0901 	sub.w	r9, r2, r1
 8009e16:	4599      	cmp	r9, r3
 8009e18:	bfa8      	it	ge
 8009e1a:	4699      	movge	r9, r3
 8009e1c:	f1b9 0f00 	cmp.w	r9, #0
 8009e20:	dc35      	bgt.n	8009e8e <_printf_float+0x3ae>
 8009e22:	f04f 0800 	mov.w	r8, #0
 8009e26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e2a:	f104 0a1a 	add.w	sl, r4, #26
 8009e2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e32:	1a9b      	subs	r3, r3, r2
 8009e34:	eba3 0309 	sub.w	r3, r3, r9
 8009e38:	4543      	cmp	r3, r8
 8009e3a:	f77f af79 	ble.w	8009d30 <_printf_float+0x250>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	4652      	mov	r2, sl
 8009e42:	4631      	mov	r1, r6
 8009e44:	4628      	mov	r0, r5
 8009e46:	47b8      	blx	r7
 8009e48:	3001      	adds	r0, #1
 8009e4a:	f43f aeaa 	beq.w	8009ba2 <_printf_float+0xc2>
 8009e4e:	f108 0801 	add.w	r8, r8, #1
 8009e52:	e7ec      	b.n	8009e2e <_printf_float+0x34e>
 8009e54:	4613      	mov	r3, r2
 8009e56:	4631      	mov	r1, r6
 8009e58:	4642      	mov	r2, r8
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	47b8      	blx	r7
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d1c0      	bne.n	8009de4 <_printf_float+0x304>
 8009e62:	e69e      	b.n	8009ba2 <_printf_float+0xc2>
 8009e64:	2301      	movs	r3, #1
 8009e66:	4631      	mov	r1, r6
 8009e68:	4628      	mov	r0, r5
 8009e6a:	9205      	str	r2, [sp, #20]
 8009e6c:	47b8      	blx	r7
 8009e6e:	3001      	adds	r0, #1
 8009e70:	f43f ae97 	beq.w	8009ba2 <_printf_float+0xc2>
 8009e74:	9a05      	ldr	r2, [sp, #20]
 8009e76:	f10b 0b01 	add.w	fp, fp, #1
 8009e7a:	e7b9      	b.n	8009df0 <_printf_float+0x310>
 8009e7c:	ee18 3a10 	vmov	r3, s16
 8009e80:	4652      	mov	r2, sl
 8009e82:	4631      	mov	r1, r6
 8009e84:	4628      	mov	r0, r5
 8009e86:	47b8      	blx	r7
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d1be      	bne.n	8009e0a <_printf_float+0x32a>
 8009e8c:	e689      	b.n	8009ba2 <_printf_float+0xc2>
 8009e8e:	9a05      	ldr	r2, [sp, #20]
 8009e90:	464b      	mov	r3, r9
 8009e92:	4442      	add	r2, r8
 8009e94:	4631      	mov	r1, r6
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d1c1      	bne.n	8009e22 <_printf_float+0x342>
 8009e9e:	e680      	b.n	8009ba2 <_printf_float+0xc2>
 8009ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ea2:	2a01      	cmp	r2, #1
 8009ea4:	dc01      	bgt.n	8009eaa <_printf_float+0x3ca>
 8009ea6:	07db      	lsls	r3, r3, #31
 8009ea8:	d538      	bpl.n	8009f1c <_printf_float+0x43c>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4642      	mov	r2, r8
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b8      	blx	r7
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	f43f ae74 	beq.w	8009ba2 <_printf_float+0xc2>
 8009eba:	ee18 3a10 	vmov	r3, s16
 8009ebe:	4652      	mov	r2, sl
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	47b8      	blx	r7
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	f43f ae6b 	beq.w	8009ba2 <_printf_float+0xc2>
 8009ecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f7f6 fe08 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ed8:	b9d8      	cbnz	r0, 8009f12 <_printf_float+0x432>
 8009eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009edc:	f108 0201 	add.w	r2, r8, #1
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b8      	blx	r7
 8009ee8:	3001      	adds	r0, #1
 8009eea:	d10e      	bne.n	8009f0a <_printf_float+0x42a>
 8009eec:	e659      	b.n	8009ba2 <_printf_float+0xc2>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	4652      	mov	r2, sl
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	47b8      	blx	r7
 8009ef8:	3001      	adds	r0, #1
 8009efa:	f43f ae52 	beq.w	8009ba2 <_printf_float+0xc2>
 8009efe:	f108 0801 	add.w	r8, r8, #1
 8009f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f04:	3b01      	subs	r3, #1
 8009f06:	4543      	cmp	r3, r8
 8009f08:	dcf1      	bgt.n	8009eee <_printf_float+0x40e>
 8009f0a:	464b      	mov	r3, r9
 8009f0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f10:	e6dc      	b.n	8009ccc <_printf_float+0x1ec>
 8009f12:	f04f 0800 	mov.w	r8, #0
 8009f16:	f104 0a1a 	add.w	sl, r4, #26
 8009f1a:	e7f2      	b.n	8009f02 <_printf_float+0x422>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	4642      	mov	r2, r8
 8009f20:	e7df      	b.n	8009ee2 <_printf_float+0x402>
 8009f22:	2301      	movs	r3, #1
 8009f24:	464a      	mov	r2, r9
 8009f26:	4631      	mov	r1, r6
 8009f28:	4628      	mov	r0, r5
 8009f2a:	47b8      	blx	r7
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	f43f ae38 	beq.w	8009ba2 <_printf_float+0xc2>
 8009f32:	f108 0801 	add.w	r8, r8, #1
 8009f36:	68e3      	ldr	r3, [r4, #12]
 8009f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f3a:	1a5b      	subs	r3, r3, r1
 8009f3c:	4543      	cmp	r3, r8
 8009f3e:	dcf0      	bgt.n	8009f22 <_printf_float+0x442>
 8009f40:	e6fa      	b.n	8009d38 <_printf_float+0x258>
 8009f42:	f04f 0800 	mov.w	r8, #0
 8009f46:	f104 0919 	add.w	r9, r4, #25
 8009f4a:	e7f4      	b.n	8009f36 <_printf_float+0x456>

08009f4c <_printf_common>:
 8009f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	4616      	mov	r6, r2
 8009f52:	4699      	mov	r9, r3
 8009f54:	688a      	ldr	r2, [r1, #8]
 8009f56:	690b      	ldr	r3, [r1, #16]
 8009f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	bfb8      	it	lt
 8009f60:	4613      	movlt	r3, r2
 8009f62:	6033      	str	r3, [r6, #0]
 8009f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f68:	4607      	mov	r7, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	b10a      	cbz	r2, 8009f72 <_printf_common+0x26>
 8009f6e:	3301      	adds	r3, #1
 8009f70:	6033      	str	r3, [r6, #0]
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	0699      	lsls	r1, r3, #26
 8009f76:	bf42      	ittt	mi
 8009f78:	6833      	ldrmi	r3, [r6, #0]
 8009f7a:	3302      	addmi	r3, #2
 8009f7c:	6033      	strmi	r3, [r6, #0]
 8009f7e:	6825      	ldr	r5, [r4, #0]
 8009f80:	f015 0506 	ands.w	r5, r5, #6
 8009f84:	d106      	bne.n	8009f94 <_printf_common+0x48>
 8009f86:	f104 0a19 	add.w	sl, r4, #25
 8009f8a:	68e3      	ldr	r3, [r4, #12]
 8009f8c:	6832      	ldr	r2, [r6, #0]
 8009f8e:	1a9b      	subs	r3, r3, r2
 8009f90:	42ab      	cmp	r3, r5
 8009f92:	dc26      	bgt.n	8009fe2 <_printf_common+0x96>
 8009f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f98:	1e13      	subs	r3, r2, #0
 8009f9a:	6822      	ldr	r2, [r4, #0]
 8009f9c:	bf18      	it	ne
 8009f9e:	2301      	movne	r3, #1
 8009fa0:	0692      	lsls	r2, r2, #26
 8009fa2:	d42b      	bmi.n	8009ffc <_printf_common+0xb0>
 8009fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fa8:	4649      	mov	r1, r9
 8009faa:	4638      	mov	r0, r7
 8009fac:	47c0      	blx	r8
 8009fae:	3001      	adds	r0, #1
 8009fb0:	d01e      	beq.n	8009ff0 <_printf_common+0xa4>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	68e5      	ldr	r5, [r4, #12]
 8009fb6:	6832      	ldr	r2, [r6, #0]
 8009fb8:	f003 0306 	and.w	r3, r3, #6
 8009fbc:	2b04      	cmp	r3, #4
 8009fbe:	bf08      	it	eq
 8009fc0:	1aad      	subeq	r5, r5, r2
 8009fc2:	68a3      	ldr	r3, [r4, #8]
 8009fc4:	6922      	ldr	r2, [r4, #16]
 8009fc6:	bf0c      	ite	eq
 8009fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fcc:	2500      	movne	r5, #0
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	bfc4      	itt	gt
 8009fd2:	1a9b      	subgt	r3, r3, r2
 8009fd4:	18ed      	addgt	r5, r5, r3
 8009fd6:	2600      	movs	r6, #0
 8009fd8:	341a      	adds	r4, #26
 8009fda:	42b5      	cmp	r5, r6
 8009fdc:	d11a      	bne.n	800a014 <_printf_common+0xc8>
 8009fde:	2000      	movs	r0, #0
 8009fe0:	e008      	b.n	8009ff4 <_printf_common+0xa8>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	4652      	mov	r2, sl
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	4638      	mov	r0, r7
 8009fea:	47c0      	blx	r8
 8009fec:	3001      	adds	r0, #1
 8009fee:	d103      	bne.n	8009ff8 <_printf_common+0xac>
 8009ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff8:	3501      	adds	r5, #1
 8009ffa:	e7c6      	b.n	8009f8a <_printf_common+0x3e>
 8009ffc:	18e1      	adds	r1, r4, r3
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	2030      	movs	r0, #48	; 0x30
 800a002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a006:	4422      	add	r2, r4
 800a008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a00c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a010:	3302      	adds	r3, #2
 800a012:	e7c7      	b.n	8009fa4 <_printf_common+0x58>
 800a014:	2301      	movs	r3, #1
 800a016:	4622      	mov	r2, r4
 800a018:	4649      	mov	r1, r9
 800a01a:	4638      	mov	r0, r7
 800a01c:	47c0      	blx	r8
 800a01e:	3001      	adds	r0, #1
 800a020:	d0e6      	beq.n	8009ff0 <_printf_common+0xa4>
 800a022:	3601      	adds	r6, #1
 800a024:	e7d9      	b.n	8009fda <_printf_common+0x8e>
	...

0800a028 <_printf_i>:
 800a028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a02c:	460c      	mov	r4, r1
 800a02e:	4691      	mov	r9, r2
 800a030:	7e27      	ldrb	r7, [r4, #24]
 800a032:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a034:	2f78      	cmp	r7, #120	; 0x78
 800a036:	4680      	mov	r8, r0
 800a038:	469a      	mov	sl, r3
 800a03a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a03e:	d807      	bhi.n	800a050 <_printf_i+0x28>
 800a040:	2f62      	cmp	r7, #98	; 0x62
 800a042:	d80a      	bhi.n	800a05a <_printf_i+0x32>
 800a044:	2f00      	cmp	r7, #0
 800a046:	f000 80d8 	beq.w	800a1fa <_printf_i+0x1d2>
 800a04a:	2f58      	cmp	r7, #88	; 0x58
 800a04c:	f000 80a3 	beq.w	800a196 <_printf_i+0x16e>
 800a050:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a058:	e03a      	b.n	800a0d0 <_printf_i+0xa8>
 800a05a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a05e:	2b15      	cmp	r3, #21
 800a060:	d8f6      	bhi.n	800a050 <_printf_i+0x28>
 800a062:	a001      	add	r0, pc, #4	; (adr r0, 800a068 <_printf_i+0x40>)
 800a064:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a068:	0800a0c1 	.word	0x0800a0c1
 800a06c:	0800a0d5 	.word	0x0800a0d5
 800a070:	0800a051 	.word	0x0800a051
 800a074:	0800a051 	.word	0x0800a051
 800a078:	0800a051 	.word	0x0800a051
 800a07c:	0800a051 	.word	0x0800a051
 800a080:	0800a0d5 	.word	0x0800a0d5
 800a084:	0800a051 	.word	0x0800a051
 800a088:	0800a051 	.word	0x0800a051
 800a08c:	0800a051 	.word	0x0800a051
 800a090:	0800a051 	.word	0x0800a051
 800a094:	0800a1e1 	.word	0x0800a1e1
 800a098:	0800a105 	.word	0x0800a105
 800a09c:	0800a1c3 	.word	0x0800a1c3
 800a0a0:	0800a051 	.word	0x0800a051
 800a0a4:	0800a051 	.word	0x0800a051
 800a0a8:	0800a203 	.word	0x0800a203
 800a0ac:	0800a051 	.word	0x0800a051
 800a0b0:	0800a105 	.word	0x0800a105
 800a0b4:	0800a051 	.word	0x0800a051
 800a0b8:	0800a051 	.word	0x0800a051
 800a0bc:	0800a1cb 	.word	0x0800a1cb
 800a0c0:	680b      	ldr	r3, [r1, #0]
 800a0c2:	1d1a      	adds	r2, r3, #4
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	600a      	str	r2, [r1, #0]
 800a0c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e0a3      	b.n	800a21c <_printf_i+0x1f4>
 800a0d4:	6825      	ldr	r5, [r4, #0]
 800a0d6:	6808      	ldr	r0, [r1, #0]
 800a0d8:	062e      	lsls	r6, r5, #24
 800a0da:	f100 0304 	add.w	r3, r0, #4
 800a0de:	d50a      	bpl.n	800a0f6 <_printf_i+0xce>
 800a0e0:	6805      	ldr	r5, [r0, #0]
 800a0e2:	600b      	str	r3, [r1, #0]
 800a0e4:	2d00      	cmp	r5, #0
 800a0e6:	da03      	bge.n	800a0f0 <_printf_i+0xc8>
 800a0e8:	232d      	movs	r3, #45	; 0x2d
 800a0ea:	426d      	negs	r5, r5
 800a0ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0f0:	485e      	ldr	r0, [pc, #376]	; (800a26c <_printf_i+0x244>)
 800a0f2:	230a      	movs	r3, #10
 800a0f4:	e019      	b.n	800a12a <_printf_i+0x102>
 800a0f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a0fa:	6805      	ldr	r5, [r0, #0]
 800a0fc:	600b      	str	r3, [r1, #0]
 800a0fe:	bf18      	it	ne
 800a100:	b22d      	sxthne	r5, r5
 800a102:	e7ef      	b.n	800a0e4 <_printf_i+0xbc>
 800a104:	680b      	ldr	r3, [r1, #0]
 800a106:	6825      	ldr	r5, [r4, #0]
 800a108:	1d18      	adds	r0, r3, #4
 800a10a:	6008      	str	r0, [r1, #0]
 800a10c:	0628      	lsls	r0, r5, #24
 800a10e:	d501      	bpl.n	800a114 <_printf_i+0xec>
 800a110:	681d      	ldr	r5, [r3, #0]
 800a112:	e002      	b.n	800a11a <_printf_i+0xf2>
 800a114:	0669      	lsls	r1, r5, #25
 800a116:	d5fb      	bpl.n	800a110 <_printf_i+0xe8>
 800a118:	881d      	ldrh	r5, [r3, #0]
 800a11a:	4854      	ldr	r0, [pc, #336]	; (800a26c <_printf_i+0x244>)
 800a11c:	2f6f      	cmp	r7, #111	; 0x6f
 800a11e:	bf0c      	ite	eq
 800a120:	2308      	moveq	r3, #8
 800a122:	230a      	movne	r3, #10
 800a124:	2100      	movs	r1, #0
 800a126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a12a:	6866      	ldr	r6, [r4, #4]
 800a12c:	60a6      	str	r6, [r4, #8]
 800a12e:	2e00      	cmp	r6, #0
 800a130:	bfa2      	ittt	ge
 800a132:	6821      	ldrge	r1, [r4, #0]
 800a134:	f021 0104 	bicge.w	r1, r1, #4
 800a138:	6021      	strge	r1, [r4, #0]
 800a13a:	b90d      	cbnz	r5, 800a140 <_printf_i+0x118>
 800a13c:	2e00      	cmp	r6, #0
 800a13e:	d04d      	beq.n	800a1dc <_printf_i+0x1b4>
 800a140:	4616      	mov	r6, r2
 800a142:	fbb5 f1f3 	udiv	r1, r5, r3
 800a146:	fb03 5711 	mls	r7, r3, r1, r5
 800a14a:	5dc7      	ldrb	r7, [r0, r7]
 800a14c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a150:	462f      	mov	r7, r5
 800a152:	42bb      	cmp	r3, r7
 800a154:	460d      	mov	r5, r1
 800a156:	d9f4      	bls.n	800a142 <_printf_i+0x11a>
 800a158:	2b08      	cmp	r3, #8
 800a15a:	d10b      	bne.n	800a174 <_printf_i+0x14c>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	07df      	lsls	r7, r3, #31
 800a160:	d508      	bpl.n	800a174 <_printf_i+0x14c>
 800a162:	6923      	ldr	r3, [r4, #16]
 800a164:	6861      	ldr	r1, [r4, #4]
 800a166:	4299      	cmp	r1, r3
 800a168:	bfde      	ittt	le
 800a16a:	2330      	movle	r3, #48	; 0x30
 800a16c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a170:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a174:	1b92      	subs	r2, r2, r6
 800a176:	6122      	str	r2, [r4, #16]
 800a178:	f8cd a000 	str.w	sl, [sp]
 800a17c:	464b      	mov	r3, r9
 800a17e:	aa03      	add	r2, sp, #12
 800a180:	4621      	mov	r1, r4
 800a182:	4640      	mov	r0, r8
 800a184:	f7ff fee2 	bl	8009f4c <_printf_common>
 800a188:	3001      	adds	r0, #1
 800a18a:	d14c      	bne.n	800a226 <_printf_i+0x1fe>
 800a18c:	f04f 30ff 	mov.w	r0, #4294967295
 800a190:	b004      	add	sp, #16
 800a192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a196:	4835      	ldr	r0, [pc, #212]	; (800a26c <_printf_i+0x244>)
 800a198:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	680e      	ldr	r6, [r1, #0]
 800a1a0:	061f      	lsls	r7, r3, #24
 800a1a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a1a6:	600e      	str	r6, [r1, #0]
 800a1a8:	d514      	bpl.n	800a1d4 <_printf_i+0x1ac>
 800a1aa:	07d9      	lsls	r1, r3, #31
 800a1ac:	bf44      	itt	mi
 800a1ae:	f043 0320 	orrmi.w	r3, r3, #32
 800a1b2:	6023      	strmi	r3, [r4, #0]
 800a1b4:	b91d      	cbnz	r5, 800a1be <_printf_i+0x196>
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	f023 0320 	bic.w	r3, r3, #32
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	2310      	movs	r3, #16
 800a1c0:	e7b0      	b.n	800a124 <_printf_i+0xfc>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	f043 0320 	orr.w	r3, r3, #32
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	2378      	movs	r3, #120	; 0x78
 800a1cc:	4828      	ldr	r0, [pc, #160]	; (800a270 <_printf_i+0x248>)
 800a1ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1d2:	e7e3      	b.n	800a19c <_printf_i+0x174>
 800a1d4:	065e      	lsls	r6, r3, #25
 800a1d6:	bf48      	it	mi
 800a1d8:	b2ad      	uxthmi	r5, r5
 800a1da:	e7e6      	b.n	800a1aa <_printf_i+0x182>
 800a1dc:	4616      	mov	r6, r2
 800a1de:	e7bb      	b.n	800a158 <_printf_i+0x130>
 800a1e0:	680b      	ldr	r3, [r1, #0]
 800a1e2:	6826      	ldr	r6, [r4, #0]
 800a1e4:	6960      	ldr	r0, [r4, #20]
 800a1e6:	1d1d      	adds	r5, r3, #4
 800a1e8:	600d      	str	r5, [r1, #0]
 800a1ea:	0635      	lsls	r5, r6, #24
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	d501      	bpl.n	800a1f4 <_printf_i+0x1cc>
 800a1f0:	6018      	str	r0, [r3, #0]
 800a1f2:	e002      	b.n	800a1fa <_printf_i+0x1d2>
 800a1f4:	0671      	lsls	r1, r6, #25
 800a1f6:	d5fb      	bpl.n	800a1f0 <_printf_i+0x1c8>
 800a1f8:	8018      	strh	r0, [r3, #0]
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	6123      	str	r3, [r4, #16]
 800a1fe:	4616      	mov	r6, r2
 800a200:	e7ba      	b.n	800a178 <_printf_i+0x150>
 800a202:	680b      	ldr	r3, [r1, #0]
 800a204:	1d1a      	adds	r2, r3, #4
 800a206:	600a      	str	r2, [r1, #0]
 800a208:	681e      	ldr	r6, [r3, #0]
 800a20a:	6862      	ldr	r2, [r4, #4]
 800a20c:	2100      	movs	r1, #0
 800a20e:	4630      	mov	r0, r6
 800a210:	f7f5 fff6 	bl	8000200 <memchr>
 800a214:	b108      	cbz	r0, 800a21a <_printf_i+0x1f2>
 800a216:	1b80      	subs	r0, r0, r6
 800a218:	6060      	str	r0, [r4, #4]
 800a21a:	6863      	ldr	r3, [r4, #4]
 800a21c:	6123      	str	r3, [r4, #16]
 800a21e:	2300      	movs	r3, #0
 800a220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a224:	e7a8      	b.n	800a178 <_printf_i+0x150>
 800a226:	6923      	ldr	r3, [r4, #16]
 800a228:	4632      	mov	r2, r6
 800a22a:	4649      	mov	r1, r9
 800a22c:	4640      	mov	r0, r8
 800a22e:	47d0      	blx	sl
 800a230:	3001      	adds	r0, #1
 800a232:	d0ab      	beq.n	800a18c <_printf_i+0x164>
 800a234:	6823      	ldr	r3, [r4, #0]
 800a236:	079b      	lsls	r3, r3, #30
 800a238:	d413      	bmi.n	800a262 <_printf_i+0x23a>
 800a23a:	68e0      	ldr	r0, [r4, #12]
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	4298      	cmp	r0, r3
 800a240:	bfb8      	it	lt
 800a242:	4618      	movlt	r0, r3
 800a244:	e7a4      	b.n	800a190 <_printf_i+0x168>
 800a246:	2301      	movs	r3, #1
 800a248:	4632      	mov	r2, r6
 800a24a:	4649      	mov	r1, r9
 800a24c:	4640      	mov	r0, r8
 800a24e:	47d0      	blx	sl
 800a250:	3001      	adds	r0, #1
 800a252:	d09b      	beq.n	800a18c <_printf_i+0x164>
 800a254:	3501      	adds	r5, #1
 800a256:	68e3      	ldr	r3, [r4, #12]
 800a258:	9903      	ldr	r1, [sp, #12]
 800a25a:	1a5b      	subs	r3, r3, r1
 800a25c:	42ab      	cmp	r3, r5
 800a25e:	dcf2      	bgt.n	800a246 <_printf_i+0x21e>
 800a260:	e7eb      	b.n	800a23a <_printf_i+0x212>
 800a262:	2500      	movs	r5, #0
 800a264:	f104 0619 	add.w	r6, r4, #25
 800a268:	e7f5      	b.n	800a256 <_printf_i+0x22e>
 800a26a:	bf00      	nop
 800a26c:	0800cd26 	.word	0x0800cd26
 800a270:	0800cd37 	.word	0x0800cd37

0800a274 <sniprintf>:
 800a274:	b40c      	push	{r2, r3}
 800a276:	b530      	push	{r4, r5, lr}
 800a278:	4b17      	ldr	r3, [pc, #92]	; (800a2d8 <sniprintf+0x64>)
 800a27a:	1e0c      	subs	r4, r1, #0
 800a27c:	681d      	ldr	r5, [r3, #0]
 800a27e:	b09d      	sub	sp, #116	; 0x74
 800a280:	da08      	bge.n	800a294 <sniprintf+0x20>
 800a282:	238b      	movs	r3, #139	; 0x8b
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	f04f 30ff 	mov.w	r0, #4294967295
 800a28a:	b01d      	add	sp, #116	; 0x74
 800a28c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a290:	b002      	add	sp, #8
 800a292:	4770      	bx	lr
 800a294:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a298:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a29c:	bf14      	ite	ne
 800a29e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a2a2:	4623      	moveq	r3, r4
 800a2a4:	9304      	str	r3, [sp, #16]
 800a2a6:	9307      	str	r3, [sp, #28]
 800a2a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a2ac:	9002      	str	r0, [sp, #8]
 800a2ae:	9006      	str	r0, [sp, #24]
 800a2b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a2b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a2b6:	ab21      	add	r3, sp, #132	; 0x84
 800a2b8:	a902      	add	r1, sp, #8
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	9301      	str	r3, [sp, #4]
 800a2be:	f001 fb6d 	bl	800b99c <_svfiprintf_r>
 800a2c2:	1c43      	adds	r3, r0, #1
 800a2c4:	bfbc      	itt	lt
 800a2c6:	238b      	movlt	r3, #139	; 0x8b
 800a2c8:	602b      	strlt	r3, [r5, #0]
 800a2ca:	2c00      	cmp	r4, #0
 800a2cc:	d0dd      	beq.n	800a28a <sniprintf+0x16>
 800a2ce:	9b02      	ldr	r3, [sp, #8]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	701a      	strb	r2, [r3, #0]
 800a2d4:	e7d9      	b.n	800a28a <sniprintf+0x16>
 800a2d6:	bf00      	nop
 800a2d8:	2000001c 	.word	0x2000001c

0800a2dc <_vsniprintf_r>:
 800a2dc:	b530      	push	{r4, r5, lr}
 800a2de:	1e14      	subs	r4, r2, #0
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	b09b      	sub	sp, #108	; 0x6c
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	da05      	bge.n	800a2f4 <_vsniprintf_r+0x18>
 800a2e8:	238b      	movs	r3, #139	; 0x8b
 800a2ea:	602b      	str	r3, [r5, #0]
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f0:	b01b      	add	sp, #108	; 0x6c
 800a2f2:	bd30      	pop	{r4, r5, pc}
 800a2f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a2f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a2fc:	bf14      	ite	ne
 800a2fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a302:	4623      	moveq	r3, r4
 800a304:	9302      	str	r3, [sp, #8]
 800a306:	9305      	str	r3, [sp, #20]
 800a308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a30c:	9100      	str	r1, [sp, #0]
 800a30e:	9104      	str	r1, [sp, #16]
 800a310:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a314:	4602      	mov	r2, r0
 800a316:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a318:	4669      	mov	r1, sp
 800a31a:	4628      	mov	r0, r5
 800a31c:	f001 fb3e 	bl	800b99c <_svfiprintf_r>
 800a320:	1c43      	adds	r3, r0, #1
 800a322:	bfbc      	itt	lt
 800a324:	238b      	movlt	r3, #139	; 0x8b
 800a326:	602b      	strlt	r3, [r5, #0]
 800a328:	2c00      	cmp	r4, #0
 800a32a:	d0e1      	beq.n	800a2f0 <_vsniprintf_r+0x14>
 800a32c:	9b00      	ldr	r3, [sp, #0]
 800a32e:	2200      	movs	r2, #0
 800a330:	701a      	strb	r2, [r3, #0]
 800a332:	e7dd      	b.n	800a2f0 <_vsniprintf_r+0x14>

0800a334 <vsniprintf>:
 800a334:	b507      	push	{r0, r1, r2, lr}
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	4613      	mov	r3, r2
 800a33a:	460a      	mov	r2, r1
 800a33c:	4601      	mov	r1, r0
 800a33e:	4803      	ldr	r0, [pc, #12]	; (800a34c <vsniprintf+0x18>)
 800a340:	6800      	ldr	r0, [r0, #0]
 800a342:	f7ff ffcb 	bl	800a2dc <_vsniprintf_r>
 800a346:	b003      	add	sp, #12
 800a348:	f85d fb04 	ldr.w	pc, [sp], #4
 800a34c:	2000001c 	.word	0x2000001c

0800a350 <quorem>:
 800a350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	6903      	ldr	r3, [r0, #16]
 800a356:	690c      	ldr	r4, [r1, #16]
 800a358:	42a3      	cmp	r3, r4
 800a35a:	4607      	mov	r7, r0
 800a35c:	f2c0 8081 	blt.w	800a462 <quorem+0x112>
 800a360:	3c01      	subs	r4, #1
 800a362:	f101 0814 	add.w	r8, r1, #20
 800a366:	f100 0514 	add.w	r5, r0, #20
 800a36a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a36e:	9301      	str	r3, [sp, #4]
 800a370:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a374:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a378:	3301      	adds	r3, #1
 800a37a:	429a      	cmp	r2, r3
 800a37c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a380:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a384:	fbb2 f6f3 	udiv	r6, r2, r3
 800a388:	d331      	bcc.n	800a3ee <quorem+0x9e>
 800a38a:	f04f 0e00 	mov.w	lr, #0
 800a38e:	4640      	mov	r0, r8
 800a390:	46ac      	mov	ip, r5
 800a392:	46f2      	mov	sl, lr
 800a394:	f850 2b04 	ldr.w	r2, [r0], #4
 800a398:	b293      	uxth	r3, r2
 800a39a:	fb06 e303 	mla	r3, r6, r3, lr
 800a39e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	ebaa 0303 	sub.w	r3, sl, r3
 800a3a8:	0c12      	lsrs	r2, r2, #16
 800a3aa:	f8dc a000 	ldr.w	sl, [ip]
 800a3ae:	fb06 e202 	mla	r2, r6, r2, lr
 800a3b2:	fa13 f38a 	uxtah	r3, r3, sl
 800a3b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a3ba:	fa1f fa82 	uxth.w	sl, r2
 800a3be:	f8dc 2000 	ldr.w	r2, [ip]
 800a3c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a3c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3d0:	4581      	cmp	r9, r0
 800a3d2:	f84c 3b04 	str.w	r3, [ip], #4
 800a3d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a3da:	d2db      	bcs.n	800a394 <quorem+0x44>
 800a3dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3e0:	b92b      	cbnz	r3, 800a3ee <quorem+0x9e>
 800a3e2:	9b01      	ldr	r3, [sp, #4]
 800a3e4:	3b04      	subs	r3, #4
 800a3e6:	429d      	cmp	r5, r3
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	d32e      	bcc.n	800a44a <quorem+0xfa>
 800a3ec:	613c      	str	r4, [r7, #16]
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	f001 f8be 	bl	800b570 <__mcmp>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	db24      	blt.n	800a442 <quorem+0xf2>
 800a3f8:	3601      	adds	r6, #1
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f04f 0c00 	mov.w	ip, #0
 800a400:	f858 2b04 	ldr.w	r2, [r8], #4
 800a404:	f8d0 e000 	ldr.w	lr, [r0]
 800a408:	b293      	uxth	r3, r2
 800a40a:	ebac 0303 	sub.w	r3, ip, r3
 800a40e:	0c12      	lsrs	r2, r2, #16
 800a410:	fa13 f38e 	uxtah	r3, r3, lr
 800a414:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a422:	45c1      	cmp	r9, r8
 800a424:	f840 3b04 	str.w	r3, [r0], #4
 800a428:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a42c:	d2e8      	bcs.n	800a400 <quorem+0xb0>
 800a42e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a436:	b922      	cbnz	r2, 800a442 <quorem+0xf2>
 800a438:	3b04      	subs	r3, #4
 800a43a:	429d      	cmp	r5, r3
 800a43c:	461a      	mov	r2, r3
 800a43e:	d30a      	bcc.n	800a456 <quorem+0x106>
 800a440:	613c      	str	r4, [r7, #16]
 800a442:	4630      	mov	r0, r6
 800a444:	b003      	add	sp, #12
 800a446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44a:	6812      	ldr	r2, [r2, #0]
 800a44c:	3b04      	subs	r3, #4
 800a44e:	2a00      	cmp	r2, #0
 800a450:	d1cc      	bne.n	800a3ec <quorem+0x9c>
 800a452:	3c01      	subs	r4, #1
 800a454:	e7c7      	b.n	800a3e6 <quorem+0x96>
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	3b04      	subs	r3, #4
 800a45a:	2a00      	cmp	r2, #0
 800a45c:	d1f0      	bne.n	800a440 <quorem+0xf0>
 800a45e:	3c01      	subs	r4, #1
 800a460:	e7eb      	b.n	800a43a <quorem+0xea>
 800a462:	2000      	movs	r0, #0
 800a464:	e7ee      	b.n	800a444 <quorem+0xf4>
	...

0800a468 <_dtoa_r>:
 800a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	ed2d 8b02 	vpush	{d8}
 800a470:	ec57 6b10 	vmov	r6, r7, d0
 800a474:	b095      	sub	sp, #84	; 0x54
 800a476:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a478:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a47c:	9105      	str	r1, [sp, #20]
 800a47e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a482:	4604      	mov	r4, r0
 800a484:	9209      	str	r2, [sp, #36]	; 0x24
 800a486:	930f      	str	r3, [sp, #60]	; 0x3c
 800a488:	b975      	cbnz	r5, 800a4a8 <_dtoa_r+0x40>
 800a48a:	2010      	movs	r0, #16
 800a48c:	f000 fddc 	bl	800b048 <malloc>
 800a490:	4602      	mov	r2, r0
 800a492:	6260      	str	r0, [r4, #36]	; 0x24
 800a494:	b920      	cbnz	r0, 800a4a0 <_dtoa_r+0x38>
 800a496:	4bb2      	ldr	r3, [pc, #712]	; (800a760 <_dtoa_r+0x2f8>)
 800a498:	21ea      	movs	r1, #234	; 0xea
 800a49a:	48b2      	ldr	r0, [pc, #712]	; (800a764 <_dtoa_r+0x2fc>)
 800a49c:	f001 fb8e 	bl	800bbbc <__assert_func>
 800a4a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a4a4:	6005      	str	r5, [r0, #0]
 800a4a6:	60c5      	str	r5, [r0, #12]
 800a4a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4aa:	6819      	ldr	r1, [r3, #0]
 800a4ac:	b151      	cbz	r1, 800a4c4 <_dtoa_r+0x5c>
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	604a      	str	r2, [r1, #4]
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4093      	lsls	r3, r2
 800a4b6:	608b      	str	r3, [r1, #8]
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 fe1b 	bl	800b0f4 <_Bfree>
 800a4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	1e3b      	subs	r3, r7, #0
 800a4c6:	bfb9      	ittee	lt
 800a4c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a4cc:	9303      	strlt	r3, [sp, #12]
 800a4ce:	2300      	movge	r3, #0
 800a4d0:	f8c8 3000 	strge.w	r3, [r8]
 800a4d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a4d8:	4ba3      	ldr	r3, [pc, #652]	; (800a768 <_dtoa_r+0x300>)
 800a4da:	bfbc      	itt	lt
 800a4dc:	2201      	movlt	r2, #1
 800a4de:	f8c8 2000 	strlt.w	r2, [r8]
 800a4e2:	ea33 0309 	bics.w	r3, r3, r9
 800a4e6:	d11b      	bne.n	800a520 <_dtoa_r+0xb8>
 800a4e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4f4:	4333      	orrs	r3, r6
 800a4f6:	f000 857a 	beq.w	800afee <_dtoa_r+0xb86>
 800a4fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4fc:	b963      	cbnz	r3, 800a518 <_dtoa_r+0xb0>
 800a4fe:	4b9b      	ldr	r3, [pc, #620]	; (800a76c <_dtoa_r+0x304>)
 800a500:	e024      	b.n	800a54c <_dtoa_r+0xe4>
 800a502:	4b9b      	ldr	r3, [pc, #620]	; (800a770 <_dtoa_r+0x308>)
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	3308      	adds	r3, #8
 800a508:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a50a:	6013      	str	r3, [r2, #0]
 800a50c:	9800      	ldr	r0, [sp, #0]
 800a50e:	b015      	add	sp, #84	; 0x54
 800a510:	ecbd 8b02 	vpop	{d8}
 800a514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a518:	4b94      	ldr	r3, [pc, #592]	; (800a76c <_dtoa_r+0x304>)
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	3303      	adds	r3, #3
 800a51e:	e7f3      	b.n	800a508 <_dtoa_r+0xa0>
 800a520:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a524:	2200      	movs	r2, #0
 800a526:	ec51 0b17 	vmov	r0, r1, d7
 800a52a:	2300      	movs	r3, #0
 800a52c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a530:	f7f6 fada 	bl	8000ae8 <__aeabi_dcmpeq>
 800a534:	4680      	mov	r8, r0
 800a536:	b158      	cbz	r0, 800a550 <_dtoa_r+0xe8>
 800a538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a53a:	2301      	movs	r3, #1
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 8551 	beq.w	800afe8 <_dtoa_r+0xb80>
 800a546:	488b      	ldr	r0, [pc, #556]	; (800a774 <_dtoa_r+0x30c>)
 800a548:	6018      	str	r0, [r3, #0]
 800a54a:	1e43      	subs	r3, r0, #1
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	e7dd      	b.n	800a50c <_dtoa_r+0xa4>
 800a550:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a554:	aa12      	add	r2, sp, #72	; 0x48
 800a556:	a913      	add	r1, sp, #76	; 0x4c
 800a558:	4620      	mov	r0, r4
 800a55a:	f001 f8ad 	bl	800b6b8 <__d2b>
 800a55e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a562:	4683      	mov	fp, r0
 800a564:	2d00      	cmp	r5, #0
 800a566:	d07c      	beq.n	800a662 <_dtoa_r+0x1fa>
 800a568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a56a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a56e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a572:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a576:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a57a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a57e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a582:	4b7d      	ldr	r3, [pc, #500]	; (800a778 <_dtoa_r+0x310>)
 800a584:	2200      	movs	r2, #0
 800a586:	4630      	mov	r0, r6
 800a588:	4639      	mov	r1, r7
 800a58a:	f7f5 fe8d 	bl	80002a8 <__aeabi_dsub>
 800a58e:	a36e      	add	r3, pc, #440	; (adr r3, 800a748 <_dtoa_r+0x2e0>)
 800a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a594:	f7f6 f840 	bl	8000618 <__aeabi_dmul>
 800a598:	a36d      	add	r3, pc, #436	; (adr r3, 800a750 <_dtoa_r+0x2e8>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f5 fe85 	bl	80002ac <__adddf3>
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	460f      	mov	r7, r1
 800a5a8:	f7f5 ffcc 	bl	8000544 <__aeabi_i2d>
 800a5ac:	a36a      	add	r3, pc, #424	; (adr r3, 800a758 <_dtoa_r+0x2f0>)
 800a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b2:	f7f6 f831 	bl	8000618 <__aeabi_dmul>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	4639      	mov	r1, r7
 800a5be:	f7f5 fe75 	bl	80002ac <__adddf3>
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	460f      	mov	r7, r1
 800a5c6:	f7f6 fad7 	bl	8000b78 <__aeabi_d2iz>
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	4682      	mov	sl, r0
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	f7f6 fa92 	bl	8000afc <__aeabi_dcmplt>
 800a5d8:	b148      	cbz	r0, 800a5ee <_dtoa_r+0x186>
 800a5da:	4650      	mov	r0, sl
 800a5dc:	f7f5 ffb2 	bl	8000544 <__aeabi_i2d>
 800a5e0:	4632      	mov	r2, r6
 800a5e2:	463b      	mov	r3, r7
 800a5e4:	f7f6 fa80 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5e8:	b908      	cbnz	r0, 800a5ee <_dtoa_r+0x186>
 800a5ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5ee:	f1ba 0f16 	cmp.w	sl, #22
 800a5f2:	d854      	bhi.n	800a69e <_dtoa_r+0x236>
 800a5f4:	4b61      	ldr	r3, [pc, #388]	; (800a77c <_dtoa_r+0x314>)
 800a5f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a602:	f7f6 fa7b 	bl	8000afc <__aeabi_dcmplt>
 800a606:	2800      	cmp	r0, #0
 800a608:	d04b      	beq.n	800a6a2 <_dtoa_r+0x23a>
 800a60a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a60e:	2300      	movs	r3, #0
 800a610:	930e      	str	r3, [sp, #56]	; 0x38
 800a612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a614:	1b5d      	subs	r5, r3, r5
 800a616:	1e6b      	subs	r3, r5, #1
 800a618:	9304      	str	r3, [sp, #16]
 800a61a:	bf43      	ittte	mi
 800a61c:	2300      	movmi	r3, #0
 800a61e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a622:	9304      	strmi	r3, [sp, #16]
 800a624:	f04f 0800 	movpl.w	r8, #0
 800a628:	f1ba 0f00 	cmp.w	sl, #0
 800a62c:	db3b      	blt.n	800a6a6 <_dtoa_r+0x23e>
 800a62e:	9b04      	ldr	r3, [sp, #16]
 800a630:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a634:	4453      	add	r3, sl
 800a636:	9304      	str	r3, [sp, #16]
 800a638:	2300      	movs	r3, #0
 800a63a:	9306      	str	r3, [sp, #24]
 800a63c:	9b05      	ldr	r3, [sp, #20]
 800a63e:	2b09      	cmp	r3, #9
 800a640:	d869      	bhi.n	800a716 <_dtoa_r+0x2ae>
 800a642:	2b05      	cmp	r3, #5
 800a644:	bfc4      	itt	gt
 800a646:	3b04      	subgt	r3, #4
 800a648:	9305      	strgt	r3, [sp, #20]
 800a64a:	9b05      	ldr	r3, [sp, #20]
 800a64c:	f1a3 0302 	sub.w	r3, r3, #2
 800a650:	bfcc      	ite	gt
 800a652:	2500      	movgt	r5, #0
 800a654:	2501      	movle	r5, #1
 800a656:	2b03      	cmp	r3, #3
 800a658:	d869      	bhi.n	800a72e <_dtoa_r+0x2c6>
 800a65a:	e8df f003 	tbb	[pc, r3]
 800a65e:	4e2c      	.short	0x4e2c
 800a660:	5a4c      	.short	0x5a4c
 800a662:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a666:	441d      	add	r5, r3
 800a668:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a66c:	2b20      	cmp	r3, #32
 800a66e:	bfc1      	itttt	gt
 800a670:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a674:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a678:	fa09 f303 	lslgt.w	r3, r9, r3
 800a67c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a680:	bfda      	itte	le
 800a682:	f1c3 0320 	rsble	r3, r3, #32
 800a686:	fa06 f003 	lslle.w	r0, r6, r3
 800a68a:	4318      	orrgt	r0, r3
 800a68c:	f7f5 ff4a 	bl	8000524 <__aeabi_ui2d>
 800a690:	2301      	movs	r3, #1
 800a692:	4606      	mov	r6, r0
 800a694:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a698:	3d01      	subs	r5, #1
 800a69a:	9310      	str	r3, [sp, #64]	; 0x40
 800a69c:	e771      	b.n	800a582 <_dtoa_r+0x11a>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e7b6      	b.n	800a610 <_dtoa_r+0x1a8>
 800a6a2:	900e      	str	r0, [sp, #56]	; 0x38
 800a6a4:	e7b5      	b.n	800a612 <_dtoa_r+0x1aa>
 800a6a6:	f1ca 0300 	rsb	r3, sl, #0
 800a6aa:	9306      	str	r3, [sp, #24]
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	eba8 080a 	sub.w	r8, r8, sl
 800a6b2:	930d      	str	r3, [sp, #52]	; 0x34
 800a6b4:	e7c2      	b.n	800a63c <_dtoa_r+0x1d4>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	9308      	str	r3, [sp, #32]
 800a6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	dc39      	bgt.n	800a734 <_dtoa_r+0x2cc>
 800a6c0:	f04f 0901 	mov.w	r9, #1
 800a6c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6c8:	464b      	mov	r3, r9
 800a6ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a6ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	6042      	str	r2, [r0, #4]
 800a6d4:	2204      	movs	r2, #4
 800a6d6:	f102 0614 	add.w	r6, r2, #20
 800a6da:	429e      	cmp	r6, r3
 800a6dc:	6841      	ldr	r1, [r0, #4]
 800a6de:	d92f      	bls.n	800a740 <_dtoa_r+0x2d8>
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f000 fcc7 	bl	800b074 <_Balloc>
 800a6e6:	9000      	str	r0, [sp, #0]
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d14b      	bne.n	800a784 <_dtoa_r+0x31c>
 800a6ec:	4b24      	ldr	r3, [pc, #144]	; (800a780 <_dtoa_r+0x318>)
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6f4:	e6d1      	b.n	800a49a <_dtoa_r+0x32>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e7de      	b.n	800a6b8 <_dtoa_r+0x250>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9308      	str	r3, [sp, #32]
 800a6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a700:	eb0a 0903 	add.w	r9, sl, r3
 800a704:	f109 0301 	add.w	r3, r9, #1
 800a708:	2b01      	cmp	r3, #1
 800a70a:	9301      	str	r3, [sp, #4]
 800a70c:	bfb8      	it	lt
 800a70e:	2301      	movlt	r3, #1
 800a710:	e7dd      	b.n	800a6ce <_dtoa_r+0x266>
 800a712:	2301      	movs	r3, #1
 800a714:	e7f2      	b.n	800a6fc <_dtoa_r+0x294>
 800a716:	2501      	movs	r5, #1
 800a718:	2300      	movs	r3, #0
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	9508      	str	r5, [sp, #32]
 800a71e:	f04f 39ff 	mov.w	r9, #4294967295
 800a722:	2200      	movs	r2, #0
 800a724:	f8cd 9004 	str.w	r9, [sp, #4]
 800a728:	2312      	movs	r3, #18
 800a72a:	9209      	str	r2, [sp, #36]	; 0x24
 800a72c:	e7cf      	b.n	800a6ce <_dtoa_r+0x266>
 800a72e:	2301      	movs	r3, #1
 800a730:	9308      	str	r3, [sp, #32]
 800a732:	e7f4      	b.n	800a71e <_dtoa_r+0x2b6>
 800a734:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a738:	f8cd 9004 	str.w	r9, [sp, #4]
 800a73c:	464b      	mov	r3, r9
 800a73e:	e7c6      	b.n	800a6ce <_dtoa_r+0x266>
 800a740:	3101      	adds	r1, #1
 800a742:	6041      	str	r1, [r0, #4]
 800a744:	0052      	lsls	r2, r2, #1
 800a746:	e7c6      	b.n	800a6d6 <_dtoa_r+0x26e>
 800a748:	636f4361 	.word	0x636f4361
 800a74c:	3fd287a7 	.word	0x3fd287a7
 800a750:	8b60c8b3 	.word	0x8b60c8b3
 800a754:	3fc68a28 	.word	0x3fc68a28
 800a758:	509f79fb 	.word	0x509f79fb
 800a75c:	3fd34413 	.word	0x3fd34413
 800a760:	0800cd55 	.word	0x0800cd55
 800a764:	0800cd6c 	.word	0x0800cd6c
 800a768:	7ff00000 	.word	0x7ff00000
 800a76c:	0800cd51 	.word	0x0800cd51
 800a770:	0800cd48 	.word	0x0800cd48
 800a774:	0800cd25 	.word	0x0800cd25
 800a778:	3ff80000 	.word	0x3ff80000
 800a77c:	0800ce68 	.word	0x0800ce68
 800a780:	0800cdcb 	.word	0x0800cdcb
 800a784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a786:	9a00      	ldr	r2, [sp, #0]
 800a788:	601a      	str	r2, [r3, #0]
 800a78a:	9b01      	ldr	r3, [sp, #4]
 800a78c:	2b0e      	cmp	r3, #14
 800a78e:	f200 80ad 	bhi.w	800a8ec <_dtoa_r+0x484>
 800a792:	2d00      	cmp	r5, #0
 800a794:	f000 80aa 	beq.w	800a8ec <_dtoa_r+0x484>
 800a798:	f1ba 0f00 	cmp.w	sl, #0
 800a79c:	dd36      	ble.n	800a80c <_dtoa_r+0x3a4>
 800a79e:	4ac3      	ldr	r2, [pc, #780]	; (800aaac <_dtoa_r+0x644>)
 800a7a0:	f00a 030f 	and.w	r3, sl, #15
 800a7a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a7a8:	ed93 7b00 	vldr	d7, [r3]
 800a7ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a7b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a7b4:	eeb0 8a47 	vmov.f32	s16, s14
 800a7b8:	eef0 8a67 	vmov.f32	s17, s15
 800a7bc:	d016      	beq.n	800a7ec <_dtoa_r+0x384>
 800a7be:	4bbc      	ldr	r3, [pc, #752]	; (800aab0 <_dtoa_r+0x648>)
 800a7c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7c8:	f7f6 f850 	bl	800086c <__aeabi_ddiv>
 800a7cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7d0:	f007 070f 	and.w	r7, r7, #15
 800a7d4:	2503      	movs	r5, #3
 800a7d6:	4eb6      	ldr	r6, [pc, #728]	; (800aab0 <_dtoa_r+0x648>)
 800a7d8:	b957      	cbnz	r7, 800a7f0 <_dtoa_r+0x388>
 800a7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7de:	ec53 2b18 	vmov	r2, r3, d8
 800a7e2:	f7f6 f843 	bl	800086c <__aeabi_ddiv>
 800a7e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7ea:	e029      	b.n	800a840 <_dtoa_r+0x3d8>
 800a7ec:	2502      	movs	r5, #2
 800a7ee:	e7f2      	b.n	800a7d6 <_dtoa_r+0x36e>
 800a7f0:	07f9      	lsls	r1, r7, #31
 800a7f2:	d508      	bpl.n	800a806 <_dtoa_r+0x39e>
 800a7f4:	ec51 0b18 	vmov	r0, r1, d8
 800a7f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7fc:	f7f5 ff0c 	bl	8000618 <__aeabi_dmul>
 800a800:	ec41 0b18 	vmov	d8, r0, r1
 800a804:	3501      	adds	r5, #1
 800a806:	107f      	asrs	r7, r7, #1
 800a808:	3608      	adds	r6, #8
 800a80a:	e7e5      	b.n	800a7d8 <_dtoa_r+0x370>
 800a80c:	f000 80a6 	beq.w	800a95c <_dtoa_r+0x4f4>
 800a810:	f1ca 0600 	rsb	r6, sl, #0
 800a814:	4ba5      	ldr	r3, [pc, #660]	; (800aaac <_dtoa_r+0x644>)
 800a816:	4fa6      	ldr	r7, [pc, #664]	; (800aab0 <_dtoa_r+0x648>)
 800a818:	f006 020f 	and.w	r2, r6, #15
 800a81c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a828:	f7f5 fef6 	bl	8000618 <__aeabi_dmul>
 800a82c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a830:	1136      	asrs	r6, r6, #4
 800a832:	2300      	movs	r3, #0
 800a834:	2502      	movs	r5, #2
 800a836:	2e00      	cmp	r6, #0
 800a838:	f040 8085 	bne.w	800a946 <_dtoa_r+0x4de>
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1d2      	bne.n	800a7e6 <_dtoa_r+0x37e>
 800a840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 808c 	beq.w	800a960 <_dtoa_r+0x4f8>
 800a848:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a84c:	4b99      	ldr	r3, [pc, #612]	; (800aab4 <_dtoa_r+0x64c>)
 800a84e:	2200      	movs	r2, #0
 800a850:	4630      	mov	r0, r6
 800a852:	4639      	mov	r1, r7
 800a854:	f7f6 f952 	bl	8000afc <__aeabi_dcmplt>
 800a858:	2800      	cmp	r0, #0
 800a85a:	f000 8081 	beq.w	800a960 <_dtoa_r+0x4f8>
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d07d      	beq.n	800a960 <_dtoa_r+0x4f8>
 800a864:	f1b9 0f00 	cmp.w	r9, #0
 800a868:	dd3c      	ble.n	800a8e4 <_dtoa_r+0x47c>
 800a86a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a86e:	9307      	str	r3, [sp, #28]
 800a870:	2200      	movs	r2, #0
 800a872:	4b91      	ldr	r3, [pc, #580]	; (800aab8 <_dtoa_r+0x650>)
 800a874:	4630      	mov	r0, r6
 800a876:	4639      	mov	r1, r7
 800a878:	f7f5 fece 	bl	8000618 <__aeabi_dmul>
 800a87c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a880:	3501      	adds	r5, #1
 800a882:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a886:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a88a:	4628      	mov	r0, r5
 800a88c:	f7f5 fe5a 	bl	8000544 <__aeabi_i2d>
 800a890:	4632      	mov	r2, r6
 800a892:	463b      	mov	r3, r7
 800a894:	f7f5 fec0 	bl	8000618 <__aeabi_dmul>
 800a898:	4b88      	ldr	r3, [pc, #544]	; (800aabc <_dtoa_r+0x654>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	f7f5 fd06 	bl	80002ac <__adddf3>
 800a8a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a8a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8a8:	9303      	str	r3, [sp, #12]
 800a8aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d15c      	bne.n	800a96a <_dtoa_r+0x502>
 800a8b0:	4b83      	ldr	r3, [pc, #524]	; (800aac0 <_dtoa_r+0x658>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	f7f5 fcf6 	bl	80002a8 <__aeabi_dsub>
 800a8bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	460f      	mov	r7, r1
 800a8c4:	f7f6 f938 	bl	8000b38 <__aeabi_dcmpgt>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	f040 8296 	bne.w	800adfa <_dtoa_r+0x992>
 800a8ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8d8:	4639      	mov	r1, r7
 800a8da:	f7f6 f90f 	bl	8000afc <__aeabi_dcmplt>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	f040 8288 	bne.w	800adf4 <_dtoa_r+0x98c>
 800a8e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f2c0 8158 	blt.w	800aba4 <_dtoa_r+0x73c>
 800a8f4:	f1ba 0f0e 	cmp.w	sl, #14
 800a8f8:	f300 8154 	bgt.w	800aba4 <_dtoa_r+0x73c>
 800a8fc:	4b6b      	ldr	r3, [pc, #428]	; (800aaac <_dtoa_r+0x644>)
 800a8fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a902:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f280 80e3 	bge.w	800aad4 <_dtoa_r+0x66c>
 800a90e:	9b01      	ldr	r3, [sp, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f300 80df 	bgt.w	800aad4 <_dtoa_r+0x66c>
 800a916:	f040 826d 	bne.w	800adf4 <_dtoa_r+0x98c>
 800a91a:	4b69      	ldr	r3, [pc, #420]	; (800aac0 <_dtoa_r+0x658>)
 800a91c:	2200      	movs	r2, #0
 800a91e:	4640      	mov	r0, r8
 800a920:	4649      	mov	r1, r9
 800a922:	f7f5 fe79 	bl	8000618 <__aeabi_dmul>
 800a926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a92a:	f7f6 f8fb 	bl	8000b24 <__aeabi_dcmpge>
 800a92e:	9e01      	ldr	r6, [sp, #4]
 800a930:	4637      	mov	r7, r6
 800a932:	2800      	cmp	r0, #0
 800a934:	f040 8243 	bne.w	800adbe <_dtoa_r+0x956>
 800a938:	9d00      	ldr	r5, [sp, #0]
 800a93a:	2331      	movs	r3, #49	; 0x31
 800a93c:	f805 3b01 	strb.w	r3, [r5], #1
 800a940:	f10a 0a01 	add.w	sl, sl, #1
 800a944:	e23f      	b.n	800adc6 <_dtoa_r+0x95e>
 800a946:	07f2      	lsls	r2, r6, #31
 800a948:	d505      	bpl.n	800a956 <_dtoa_r+0x4ee>
 800a94a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a94e:	f7f5 fe63 	bl	8000618 <__aeabi_dmul>
 800a952:	3501      	adds	r5, #1
 800a954:	2301      	movs	r3, #1
 800a956:	1076      	asrs	r6, r6, #1
 800a958:	3708      	adds	r7, #8
 800a95a:	e76c      	b.n	800a836 <_dtoa_r+0x3ce>
 800a95c:	2502      	movs	r5, #2
 800a95e:	e76f      	b.n	800a840 <_dtoa_r+0x3d8>
 800a960:	9b01      	ldr	r3, [sp, #4]
 800a962:	f8cd a01c 	str.w	sl, [sp, #28]
 800a966:	930c      	str	r3, [sp, #48]	; 0x30
 800a968:	e78d      	b.n	800a886 <_dtoa_r+0x41e>
 800a96a:	9900      	ldr	r1, [sp, #0]
 800a96c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a96e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a970:	4b4e      	ldr	r3, [pc, #312]	; (800aaac <_dtoa_r+0x644>)
 800a972:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a976:	4401      	add	r1, r0
 800a978:	9102      	str	r1, [sp, #8]
 800a97a:	9908      	ldr	r1, [sp, #32]
 800a97c:	eeb0 8a47 	vmov.f32	s16, s14
 800a980:	eef0 8a67 	vmov.f32	s17, s15
 800a984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a988:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a98c:	2900      	cmp	r1, #0
 800a98e:	d045      	beq.n	800aa1c <_dtoa_r+0x5b4>
 800a990:	494c      	ldr	r1, [pc, #304]	; (800aac4 <_dtoa_r+0x65c>)
 800a992:	2000      	movs	r0, #0
 800a994:	f7f5 ff6a 	bl	800086c <__aeabi_ddiv>
 800a998:	ec53 2b18 	vmov	r2, r3, d8
 800a99c:	f7f5 fc84 	bl	80002a8 <__aeabi_dsub>
 800a9a0:	9d00      	ldr	r5, [sp, #0]
 800a9a2:	ec41 0b18 	vmov	d8, r0, r1
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f7f6 f8e5 	bl	8000b78 <__aeabi_d2iz>
 800a9ae:	900c      	str	r0, [sp, #48]	; 0x30
 800a9b0:	f7f5 fdc8 	bl	8000544 <__aeabi_i2d>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	f7f5 fc74 	bl	80002a8 <__aeabi_dsub>
 800a9c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9c2:	3330      	adds	r3, #48	; 0x30
 800a9c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a9c8:	ec53 2b18 	vmov	r2, r3, d8
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	460f      	mov	r7, r1
 800a9d0:	f7f6 f894 	bl	8000afc <__aeabi_dcmplt>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d165      	bne.n	800aaa4 <_dtoa_r+0x63c>
 800a9d8:	4632      	mov	r2, r6
 800a9da:	463b      	mov	r3, r7
 800a9dc:	4935      	ldr	r1, [pc, #212]	; (800aab4 <_dtoa_r+0x64c>)
 800a9de:	2000      	movs	r0, #0
 800a9e0:	f7f5 fc62 	bl	80002a8 <__aeabi_dsub>
 800a9e4:	ec53 2b18 	vmov	r2, r3, d8
 800a9e8:	f7f6 f888 	bl	8000afc <__aeabi_dcmplt>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	f040 80b9 	bne.w	800ab64 <_dtoa_r+0x6fc>
 800a9f2:	9b02      	ldr	r3, [sp, #8]
 800a9f4:	429d      	cmp	r5, r3
 800a9f6:	f43f af75 	beq.w	800a8e4 <_dtoa_r+0x47c>
 800a9fa:	4b2f      	ldr	r3, [pc, #188]	; (800aab8 <_dtoa_r+0x650>)
 800a9fc:	ec51 0b18 	vmov	r0, r1, d8
 800aa00:	2200      	movs	r2, #0
 800aa02:	f7f5 fe09 	bl	8000618 <__aeabi_dmul>
 800aa06:	4b2c      	ldr	r3, [pc, #176]	; (800aab8 <_dtoa_r+0x650>)
 800aa08:	ec41 0b18 	vmov	d8, r0, r1
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4630      	mov	r0, r6
 800aa10:	4639      	mov	r1, r7
 800aa12:	f7f5 fe01 	bl	8000618 <__aeabi_dmul>
 800aa16:	4606      	mov	r6, r0
 800aa18:	460f      	mov	r7, r1
 800aa1a:	e7c4      	b.n	800a9a6 <_dtoa_r+0x53e>
 800aa1c:	ec51 0b17 	vmov	r0, r1, d7
 800aa20:	f7f5 fdfa 	bl	8000618 <__aeabi_dmul>
 800aa24:	9b02      	ldr	r3, [sp, #8]
 800aa26:	9d00      	ldr	r5, [sp, #0]
 800aa28:	930c      	str	r3, [sp, #48]	; 0x30
 800aa2a:	ec41 0b18 	vmov	d8, r0, r1
 800aa2e:	4639      	mov	r1, r7
 800aa30:	4630      	mov	r0, r6
 800aa32:	f7f6 f8a1 	bl	8000b78 <__aeabi_d2iz>
 800aa36:	9011      	str	r0, [sp, #68]	; 0x44
 800aa38:	f7f5 fd84 	bl	8000544 <__aeabi_i2d>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4630      	mov	r0, r6
 800aa42:	4639      	mov	r1, r7
 800aa44:	f7f5 fc30 	bl	80002a8 <__aeabi_dsub>
 800aa48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa4a:	3330      	adds	r3, #48	; 0x30
 800aa4c:	f805 3b01 	strb.w	r3, [r5], #1
 800aa50:	9b02      	ldr	r3, [sp, #8]
 800aa52:	429d      	cmp	r5, r3
 800aa54:	4606      	mov	r6, r0
 800aa56:	460f      	mov	r7, r1
 800aa58:	f04f 0200 	mov.w	r2, #0
 800aa5c:	d134      	bne.n	800aac8 <_dtoa_r+0x660>
 800aa5e:	4b19      	ldr	r3, [pc, #100]	; (800aac4 <_dtoa_r+0x65c>)
 800aa60:	ec51 0b18 	vmov	r0, r1, d8
 800aa64:	f7f5 fc22 	bl	80002ac <__adddf3>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	4639      	mov	r1, r7
 800aa70:	f7f6 f862 	bl	8000b38 <__aeabi_dcmpgt>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d175      	bne.n	800ab64 <_dtoa_r+0x6fc>
 800aa78:	ec53 2b18 	vmov	r2, r3, d8
 800aa7c:	4911      	ldr	r1, [pc, #68]	; (800aac4 <_dtoa_r+0x65c>)
 800aa7e:	2000      	movs	r0, #0
 800aa80:	f7f5 fc12 	bl	80002a8 <__aeabi_dsub>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	f7f6 f836 	bl	8000afc <__aeabi_dcmplt>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	f43f af27 	beq.w	800a8e4 <_dtoa_r+0x47c>
 800aa96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa98:	1e6b      	subs	r3, r5, #1
 800aa9a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aaa0:	2b30      	cmp	r3, #48	; 0x30
 800aaa2:	d0f8      	beq.n	800aa96 <_dtoa_r+0x62e>
 800aaa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aaa8:	e04a      	b.n	800ab40 <_dtoa_r+0x6d8>
 800aaaa:	bf00      	nop
 800aaac:	0800ce68 	.word	0x0800ce68
 800aab0:	0800ce40 	.word	0x0800ce40
 800aab4:	3ff00000 	.word	0x3ff00000
 800aab8:	40240000 	.word	0x40240000
 800aabc:	401c0000 	.word	0x401c0000
 800aac0:	40140000 	.word	0x40140000
 800aac4:	3fe00000 	.word	0x3fe00000
 800aac8:	4baf      	ldr	r3, [pc, #700]	; (800ad88 <_dtoa_r+0x920>)
 800aaca:	f7f5 fda5 	bl	8000618 <__aeabi_dmul>
 800aace:	4606      	mov	r6, r0
 800aad0:	460f      	mov	r7, r1
 800aad2:	e7ac      	b.n	800aa2e <_dtoa_r+0x5c6>
 800aad4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aad8:	9d00      	ldr	r5, [sp, #0]
 800aada:	4642      	mov	r2, r8
 800aadc:	464b      	mov	r3, r9
 800aade:	4630      	mov	r0, r6
 800aae0:	4639      	mov	r1, r7
 800aae2:	f7f5 fec3 	bl	800086c <__aeabi_ddiv>
 800aae6:	f7f6 f847 	bl	8000b78 <__aeabi_d2iz>
 800aaea:	9002      	str	r0, [sp, #8]
 800aaec:	f7f5 fd2a 	bl	8000544 <__aeabi_i2d>
 800aaf0:	4642      	mov	r2, r8
 800aaf2:	464b      	mov	r3, r9
 800aaf4:	f7f5 fd90 	bl	8000618 <__aeabi_dmul>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4630      	mov	r0, r6
 800aafe:	4639      	mov	r1, r7
 800ab00:	f7f5 fbd2 	bl	80002a8 <__aeabi_dsub>
 800ab04:	9e02      	ldr	r6, [sp, #8]
 800ab06:	9f01      	ldr	r7, [sp, #4]
 800ab08:	3630      	adds	r6, #48	; 0x30
 800ab0a:	f805 6b01 	strb.w	r6, [r5], #1
 800ab0e:	9e00      	ldr	r6, [sp, #0]
 800ab10:	1bae      	subs	r6, r5, r6
 800ab12:	42b7      	cmp	r7, r6
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	d137      	bne.n	800ab8a <_dtoa_r+0x722>
 800ab1a:	f7f5 fbc7 	bl	80002ac <__adddf3>
 800ab1e:	4642      	mov	r2, r8
 800ab20:	464b      	mov	r3, r9
 800ab22:	4606      	mov	r6, r0
 800ab24:	460f      	mov	r7, r1
 800ab26:	f7f6 f807 	bl	8000b38 <__aeabi_dcmpgt>
 800ab2a:	b9c8      	cbnz	r0, 800ab60 <_dtoa_r+0x6f8>
 800ab2c:	4642      	mov	r2, r8
 800ab2e:	464b      	mov	r3, r9
 800ab30:	4630      	mov	r0, r6
 800ab32:	4639      	mov	r1, r7
 800ab34:	f7f5 ffd8 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab38:	b110      	cbz	r0, 800ab40 <_dtoa_r+0x6d8>
 800ab3a:	9b02      	ldr	r3, [sp, #8]
 800ab3c:	07d9      	lsls	r1, r3, #31
 800ab3e:	d40f      	bmi.n	800ab60 <_dtoa_r+0x6f8>
 800ab40:	4620      	mov	r0, r4
 800ab42:	4659      	mov	r1, fp
 800ab44:	f000 fad6 	bl	800b0f4 <_Bfree>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	702b      	strb	r3, [r5, #0]
 800ab4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab4e:	f10a 0001 	add.w	r0, sl, #1
 800ab52:	6018      	str	r0, [r3, #0]
 800ab54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f43f acd8 	beq.w	800a50c <_dtoa_r+0xa4>
 800ab5c:	601d      	str	r5, [r3, #0]
 800ab5e:	e4d5      	b.n	800a50c <_dtoa_r+0xa4>
 800ab60:	f8cd a01c 	str.w	sl, [sp, #28]
 800ab64:	462b      	mov	r3, r5
 800ab66:	461d      	mov	r5, r3
 800ab68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab6c:	2a39      	cmp	r2, #57	; 0x39
 800ab6e:	d108      	bne.n	800ab82 <_dtoa_r+0x71a>
 800ab70:	9a00      	ldr	r2, [sp, #0]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d1f7      	bne.n	800ab66 <_dtoa_r+0x6fe>
 800ab76:	9a07      	ldr	r2, [sp, #28]
 800ab78:	9900      	ldr	r1, [sp, #0]
 800ab7a:	3201      	adds	r2, #1
 800ab7c:	9207      	str	r2, [sp, #28]
 800ab7e:	2230      	movs	r2, #48	; 0x30
 800ab80:	700a      	strb	r2, [r1, #0]
 800ab82:	781a      	ldrb	r2, [r3, #0]
 800ab84:	3201      	adds	r2, #1
 800ab86:	701a      	strb	r2, [r3, #0]
 800ab88:	e78c      	b.n	800aaa4 <_dtoa_r+0x63c>
 800ab8a:	4b7f      	ldr	r3, [pc, #508]	; (800ad88 <_dtoa_r+0x920>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f7f5 fd43 	bl	8000618 <__aeabi_dmul>
 800ab92:	2200      	movs	r2, #0
 800ab94:	2300      	movs	r3, #0
 800ab96:	4606      	mov	r6, r0
 800ab98:	460f      	mov	r7, r1
 800ab9a:	f7f5 ffa5 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d09b      	beq.n	800aada <_dtoa_r+0x672>
 800aba2:	e7cd      	b.n	800ab40 <_dtoa_r+0x6d8>
 800aba4:	9a08      	ldr	r2, [sp, #32]
 800aba6:	2a00      	cmp	r2, #0
 800aba8:	f000 80c4 	beq.w	800ad34 <_dtoa_r+0x8cc>
 800abac:	9a05      	ldr	r2, [sp, #20]
 800abae:	2a01      	cmp	r2, #1
 800abb0:	f300 80a8 	bgt.w	800ad04 <_dtoa_r+0x89c>
 800abb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abb6:	2a00      	cmp	r2, #0
 800abb8:	f000 80a0 	beq.w	800acfc <_dtoa_r+0x894>
 800abbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800abc0:	9e06      	ldr	r6, [sp, #24]
 800abc2:	4645      	mov	r5, r8
 800abc4:	9a04      	ldr	r2, [sp, #16]
 800abc6:	2101      	movs	r1, #1
 800abc8:	441a      	add	r2, r3
 800abca:	4620      	mov	r0, r4
 800abcc:	4498      	add	r8, r3
 800abce:	9204      	str	r2, [sp, #16]
 800abd0:	f000 fb4c 	bl	800b26c <__i2b>
 800abd4:	4607      	mov	r7, r0
 800abd6:	2d00      	cmp	r5, #0
 800abd8:	dd0b      	ble.n	800abf2 <_dtoa_r+0x78a>
 800abda:	9b04      	ldr	r3, [sp, #16]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	dd08      	ble.n	800abf2 <_dtoa_r+0x78a>
 800abe0:	42ab      	cmp	r3, r5
 800abe2:	9a04      	ldr	r2, [sp, #16]
 800abe4:	bfa8      	it	ge
 800abe6:	462b      	movge	r3, r5
 800abe8:	eba8 0803 	sub.w	r8, r8, r3
 800abec:	1aed      	subs	r5, r5, r3
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	9304      	str	r3, [sp, #16]
 800abf2:	9b06      	ldr	r3, [sp, #24]
 800abf4:	b1fb      	cbz	r3, 800ac36 <_dtoa_r+0x7ce>
 800abf6:	9b08      	ldr	r3, [sp, #32]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 809f 	beq.w	800ad3c <_dtoa_r+0x8d4>
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	dd11      	ble.n	800ac26 <_dtoa_r+0x7be>
 800ac02:	4639      	mov	r1, r7
 800ac04:	4632      	mov	r2, r6
 800ac06:	4620      	mov	r0, r4
 800ac08:	f000 fbec 	bl	800b3e4 <__pow5mult>
 800ac0c:	465a      	mov	r2, fp
 800ac0e:	4601      	mov	r1, r0
 800ac10:	4607      	mov	r7, r0
 800ac12:	4620      	mov	r0, r4
 800ac14:	f000 fb40 	bl	800b298 <__multiply>
 800ac18:	4659      	mov	r1, fp
 800ac1a:	9007      	str	r0, [sp, #28]
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fa69 	bl	800b0f4 <_Bfree>
 800ac22:	9b07      	ldr	r3, [sp, #28]
 800ac24:	469b      	mov	fp, r3
 800ac26:	9b06      	ldr	r3, [sp, #24]
 800ac28:	1b9a      	subs	r2, r3, r6
 800ac2a:	d004      	beq.n	800ac36 <_dtoa_r+0x7ce>
 800ac2c:	4659      	mov	r1, fp
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 fbd8 	bl	800b3e4 <__pow5mult>
 800ac34:	4683      	mov	fp, r0
 800ac36:	2101      	movs	r1, #1
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 fb17 	bl	800b26c <__i2b>
 800ac3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	4606      	mov	r6, r0
 800ac44:	dd7c      	ble.n	800ad40 <_dtoa_r+0x8d8>
 800ac46:	461a      	mov	r2, r3
 800ac48:	4601      	mov	r1, r0
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 fbca 	bl	800b3e4 <__pow5mult>
 800ac50:	9b05      	ldr	r3, [sp, #20]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	4606      	mov	r6, r0
 800ac56:	dd76      	ble.n	800ad46 <_dtoa_r+0x8de>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	9306      	str	r3, [sp, #24]
 800ac5c:	6933      	ldr	r3, [r6, #16]
 800ac5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ac62:	6918      	ldr	r0, [r3, #16]
 800ac64:	f000 fab2 	bl	800b1cc <__hi0bits>
 800ac68:	f1c0 0020 	rsb	r0, r0, #32
 800ac6c:	9b04      	ldr	r3, [sp, #16]
 800ac6e:	4418      	add	r0, r3
 800ac70:	f010 001f 	ands.w	r0, r0, #31
 800ac74:	f000 8086 	beq.w	800ad84 <_dtoa_r+0x91c>
 800ac78:	f1c0 0320 	rsb	r3, r0, #32
 800ac7c:	2b04      	cmp	r3, #4
 800ac7e:	dd7f      	ble.n	800ad80 <_dtoa_r+0x918>
 800ac80:	f1c0 001c 	rsb	r0, r0, #28
 800ac84:	9b04      	ldr	r3, [sp, #16]
 800ac86:	4403      	add	r3, r0
 800ac88:	4480      	add	r8, r0
 800ac8a:	4405      	add	r5, r0
 800ac8c:	9304      	str	r3, [sp, #16]
 800ac8e:	f1b8 0f00 	cmp.w	r8, #0
 800ac92:	dd05      	ble.n	800aca0 <_dtoa_r+0x838>
 800ac94:	4659      	mov	r1, fp
 800ac96:	4642      	mov	r2, r8
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 fbfd 	bl	800b498 <__lshift>
 800ac9e:	4683      	mov	fp, r0
 800aca0:	9b04      	ldr	r3, [sp, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dd05      	ble.n	800acb2 <_dtoa_r+0x84a>
 800aca6:	4631      	mov	r1, r6
 800aca8:	461a      	mov	r2, r3
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 fbf4 	bl	800b498 <__lshift>
 800acb0:	4606      	mov	r6, r0
 800acb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d069      	beq.n	800ad8c <_dtoa_r+0x924>
 800acb8:	4631      	mov	r1, r6
 800acba:	4658      	mov	r0, fp
 800acbc:	f000 fc58 	bl	800b570 <__mcmp>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	da63      	bge.n	800ad8c <_dtoa_r+0x924>
 800acc4:	2300      	movs	r3, #0
 800acc6:	4659      	mov	r1, fp
 800acc8:	220a      	movs	r2, #10
 800acca:	4620      	mov	r0, r4
 800accc:	f000 fa34 	bl	800b138 <__multadd>
 800acd0:	9b08      	ldr	r3, [sp, #32]
 800acd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acd6:	4683      	mov	fp, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f000 818f 	beq.w	800affc <_dtoa_r+0xb94>
 800acde:	4639      	mov	r1, r7
 800ace0:	2300      	movs	r3, #0
 800ace2:	220a      	movs	r2, #10
 800ace4:	4620      	mov	r0, r4
 800ace6:	f000 fa27 	bl	800b138 <__multadd>
 800acea:	f1b9 0f00 	cmp.w	r9, #0
 800acee:	4607      	mov	r7, r0
 800acf0:	f300 808e 	bgt.w	800ae10 <_dtoa_r+0x9a8>
 800acf4:	9b05      	ldr	r3, [sp, #20]
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	dc50      	bgt.n	800ad9c <_dtoa_r+0x934>
 800acfa:	e089      	b.n	800ae10 <_dtoa_r+0x9a8>
 800acfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ad02:	e75d      	b.n	800abc0 <_dtoa_r+0x758>
 800ad04:	9b01      	ldr	r3, [sp, #4]
 800ad06:	1e5e      	subs	r6, r3, #1
 800ad08:	9b06      	ldr	r3, [sp, #24]
 800ad0a:	42b3      	cmp	r3, r6
 800ad0c:	bfbf      	itttt	lt
 800ad0e:	9b06      	ldrlt	r3, [sp, #24]
 800ad10:	9606      	strlt	r6, [sp, #24]
 800ad12:	1af2      	sublt	r2, r6, r3
 800ad14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ad16:	bfb6      	itet	lt
 800ad18:	189b      	addlt	r3, r3, r2
 800ad1a:	1b9e      	subge	r6, r3, r6
 800ad1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	bfb8      	it	lt
 800ad22:	2600      	movlt	r6, #0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	bfb5      	itete	lt
 800ad28:	eba8 0503 	sublt.w	r5, r8, r3
 800ad2c:	9b01      	ldrge	r3, [sp, #4]
 800ad2e:	2300      	movlt	r3, #0
 800ad30:	4645      	movge	r5, r8
 800ad32:	e747      	b.n	800abc4 <_dtoa_r+0x75c>
 800ad34:	9e06      	ldr	r6, [sp, #24]
 800ad36:	9f08      	ldr	r7, [sp, #32]
 800ad38:	4645      	mov	r5, r8
 800ad3a:	e74c      	b.n	800abd6 <_dtoa_r+0x76e>
 800ad3c:	9a06      	ldr	r2, [sp, #24]
 800ad3e:	e775      	b.n	800ac2c <_dtoa_r+0x7c4>
 800ad40:	9b05      	ldr	r3, [sp, #20]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	dc18      	bgt.n	800ad78 <_dtoa_r+0x910>
 800ad46:	9b02      	ldr	r3, [sp, #8]
 800ad48:	b9b3      	cbnz	r3, 800ad78 <_dtoa_r+0x910>
 800ad4a:	9b03      	ldr	r3, [sp, #12]
 800ad4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad50:	b9a3      	cbnz	r3, 800ad7c <_dtoa_r+0x914>
 800ad52:	9b03      	ldr	r3, [sp, #12]
 800ad54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad58:	0d1b      	lsrs	r3, r3, #20
 800ad5a:	051b      	lsls	r3, r3, #20
 800ad5c:	b12b      	cbz	r3, 800ad6a <_dtoa_r+0x902>
 800ad5e:	9b04      	ldr	r3, [sp, #16]
 800ad60:	3301      	adds	r3, #1
 800ad62:	9304      	str	r3, [sp, #16]
 800ad64:	f108 0801 	add.w	r8, r8, #1
 800ad68:	2301      	movs	r3, #1
 800ad6a:	9306      	str	r3, [sp, #24]
 800ad6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f47f af74 	bne.w	800ac5c <_dtoa_r+0x7f4>
 800ad74:	2001      	movs	r0, #1
 800ad76:	e779      	b.n	800ac6c <_dtoa_r+0x804>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	e7f6      	b.n	800ad6a <_dtoa_r+0x902>
 800ad7c:	9b02      	ldr	r3, [sp, #8]
 800ad7e:	e7f4      	b.n	800ad6a <_dtoa_r+0x902>
 800ad80:	d085      	beq.n	800ac8e <_dtoa_r+0x826>
 800ad82:	4618      	mov	r0, r3
 800ad84:	301c      	adds	r0, #28
 800ad86:	e77d      	b.n	800ac84 <_dtoa_r+0x81c>
 800ad88:	40240000 	.word	0x40240000
 800ad8c:	9b01      	ldr	r3, [sp, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	dc38      	bgt.n	800ae04 <_dtoa_r+0x99c>
 800ad92:	9b05      	ldr	r3, [sp, #20]
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	dd35      	ble.n	800ae04 <_dtoa_r+0x99c>
 800ad98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ad9c:	f1b9 0f00 	cmp.w	r9, #0
 800ada0:	d10d      	bne.n	800adbe <_dtoa_r+0x956>
 800ada2:	4631      	mov	r1, r6
 800ada4:	464b      	mov	r3, r9
 800ada6:	2205      	movs	r2, #5
 800ada8:	4620      	mov	r0, r4
 800adaa:	f000 f9c5 	bl	800b138 <__multadd>
 800adae:	4601      	mov	r1, r0
 800adb0:	4606      	mov	r6, r0
 800adb2:	4658      	mov	r0, fp
 800adb4:	f000 fbdc 	bl	800b570 <__mcmp>
 800adb8:	2800      	cmp	r0, #0
 800adba:	f73f adbd 	bgt.w	800a938 <_dtoa_r+0x4d0>
 800adbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc0:	9d00      	ldr	r5, [sp, #0]
 800adc2:	ea6f 0a03 	mvn.w	sl, r3
 800adc6:	f04f 0800 	mov.w	r8, #0
 800adca:	4631      	mov	r1, r6
 800adcc:	4620      	mov	r0, r4
 800adce:	f000 f991 	bl	800b0f4 <_Bfree>
 800add2:	2f00      	cmp	r7, #0
 800add4:	f43f aeb4 	beq.w	800ab40 <_dtoa_r+0x6d8>
 800add8:	f1b8 0f00 	cmp.w	r8, #0
 800addc:	d005      	beq.n	800adea <_dtoa_r+0x982>
 800adde:	45b8      	cmp	r8, r7
 800ade0:	d003      	beq.n	800adea <_dtoa_r+0x982>
 800ade2:	4641      	mov	r1, r8
 800ade4:	4620      	mov	r0, r4
 800ade6:	f000 f985 	bl	800b0f4 <_Bfree>
 800adea:	4639      	mov	r1, r7
 800adec:	4620      	mov	r0, r4
 800adee:	f000 f981 	bl	800b0f4 <_Bfree>
 800adf2:	e6a5      	b.n	800ab40 <_dtoa_r+0x6d8>
 800adf4:	2600      	movs	r6, #0
 800adf6:	4637      	mov	r7, r6
 800adf8:	e7e1      	b.n	800adbe <_dtoa_r+0x956>
 800adfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800adfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ae00:	4637      	mov	r7, r6
 800ae02:	e599      	b.n	800a938 <_dtoa_r+0x4d0>
 800ae04:	9b08      	ldr	r3, [sp, #32]
 800ae06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 80fd 	beq.w	800b00a <_dtoa_r+0xba2>
 800ae10:	2d00      	cmp	r5, #0
 800ae12:	dd05      	ble.n	800ae20 <_dtoa_r+0x9b8>
 800ae14:	4639      	mov	r1, r7
 800ae16:	462a      	mov	r2, r5
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f000 fb3d 	bl	800b498 <__lshift>
 800ae1e:	4607      	mov	r7, r0
 800ae20:	9b06      	ldr	r3, [sp, #24]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d05c      	beq.n	800aee0 <_dtoa_r+0xa78>
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f000 f923 	bl	800b074 <_Balloc>
 800ae2e:	4605      	mov	r5, r0
 800ae30:	b928      	cbnz	r0, 800ae3e <_dtoa_r+0x9d6>
 800ae32:	4b80      	ldr	r3, [pc, #512]	; (800b034 <_dtoa_r+0xbcc>)
 800ae34:	4602      	mov	r2, r0
 800ae36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ae3a:	f7ff bb2e 	b.w	800a49a <_dtoa_r+0x32>
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	3202      	adds	r2, #2
 800ae42:	0092      	lsls	r2, r2, #2
 800ae44:	f107 010c 	add.w	r1, r7, #12
 800ae48:	300c      	adds	r0, #12
 800ae4a:	f000 f905 	bl	800b058 <memcpy>
 800ae4e:	2201      	movs	r2, #1
 800ae50:	4629      	mov	r1, r5
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 fb20 	bl	800b498 <__lshift>
 800ae58:	9b00      	ldr	r3, [sp, #0]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	9b00      	ldr	r3, [sp, #0]
 800ae60:	444b      	add	r3, r9
 800ae62:	9307      	str	r3, [sp, #28]
 800ae64:	9b02      	ldr	r3, [sp, #8]
 800ae66:	f003 0301 	and.w	r3, r3, #1
 800ae6a:	46b8      	mov	r8, r7
 800ae6c:	9306      	str	r3, [sp, #24]
 800ae6e:	4607      	mov	r7, r0
 800ae70:	9b01      	ldr	r3, [sp, #4]
 800ae72:	4631      	mov	r1, r6
 800ae74:	3b01      	subs	r3, #1
 800ae76:	4658      	mov	r0, fp
 800ae78:	9302      	str	r3, [sp, #8]
 800ae7a:	f7ff fa69 	bl	800a350 <quorem>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	3330      	adds	r3, #48	; 0x30
 800ae82:	9004      	str	r0, [sp, #16]
 800ae84:	4641      	mov	r1, r8
 800ae86:	4658      	mov	r0, fp
 800ae88:	9308      	str	r3, [sp, #32]
 800ae8a:	f000 fb71 	bl	800b570 <__mcmp>
 800ae8e:	463a      	mov	r2, r7
 800ae90:	4681      	mov	r9, r0
 800ae92:	4631      	mov	r1, r6
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 fb87 	bl	800b5a8 <__mdiff>
 800ae9a:	68c2      	ldr	r2, [r0, #12]
 800ae9c:	9b08      	ldr	r3, [sp, #32]
 800ae9e:	4605      	mov	r5, r0
 800aea0:	bb02      	cbnz	r2, 800aee4 <_dtoa_r+0xa7c>
 800aea2:	4601      	mov	r1, r0
 800aea4:	4658      	mov	r0, fp
 800aea6:	f000 fb63 	bl	800b570 <__mcmp>
 800aeaa:	9b08      	ldr	r3, [sp, #32]
 800aeac:	4602      	mov	r2, r0
 800aeae:	4629      	mov	r1, r5
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800aeb6:	f000 f91d 	bl	800b0f4 <_Bfree>
 800aeba:	9b05      	ldr	r3, [sp, #20]
 800aebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aebe:	9d01      	ldr	r5, [sp, #4]
 800aec0:	ea43 0102 	orr.w	r1, r3, r2
 800aec4:	9b06      	ldr	r3, [sp, #24]
 800aec6:	430b      	orrs	r3, r1
 800aec8:	9b08      	ldr	r3, [sp, #32]
 800aeca:	d10d      	bne.n	800aee8 <_dtoa_r+0xa80>
 800aecc:	2b39      	cmp	r3, #57	; 0x39
 800aece:	d029      	beq.n	800af24 <_dtoa_r+0xabc>
 800aed0:	f1b9 0f00 	cmp.w	r9, #0
 800aed4:	dd01      	ble.n	800aeda <_dtoa_r+0xa72>
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	3331      	adds	r3, #49	; 0x31
 800aeda:	9a02      	ldr	r2, [sp, #8]
 800aedc:	7013      	strb	r3, [r2, #0]
 800aede:	e774      	b.n	800adca <_dtoa_r+0x962>
 800aee0:	4638      	mov	r0, r7
 800aee2:	e7b9      	b.n	800ae58 <_dtoa_r+0x9f0>
 800aee4:	2201      	movs	r2, #1
 800aee6:	e7e2      	b.n	800aeae <_dtoa_r+0xa46>
 800aee8:	f1b9 0f00 	cmp.w	r9, #0
 800aeec:	db06      	blt.n	800aefc <_dtoa_r+0xa94>
 800aeee:	9905      	ldr	r1, [sp, #20]
 800aef0:	ea41 0909 	orr.w	r9, r1, r9
 800aef4:	9906      	ldr	r1, [sp, #24]
 800aef6:	ea59 0101 	orrs.w	r1, r9, r1
 800aefa:	d120      	bne.n	800af3e <_dtoa_r+0xad6>
 800aefc:	2a00      	cmp	r2, #0
 800aefe:	ddec      	ble.n	800aeda <_dtoa_r+0xa72>
 800af00:	4659      	mov	r1, fp
 800af02:	2201      	movs	r2, #1
 800af04:	4620      	mov	r0, r4
 800af06:	9301      	str	r3, [sp, #4]
 800af08:	f000 fac6 	bl	800b498 <__lshift>
 800af0c:	4631      	mov	r1, r6
 800af0e:	4683      	mov	fp, r0
 800af10:	f000 fb2e 	bl	800b570 <__mcmp>
 800af14:	2800      	cmp	r0, #0
 800af16:	9b01      	ldr	r3, [sp, #4]
 800af18:	dc02      	bgt.n	800af20 <_dtoa_r+0xab8>
 800af1a:	d1de      	bne.n	800aeda <_dtoa_r+0xa72>
 800af1c:	07da      	lsls	r2, r3, #31
 800af1e:	d5dc      	bpl.n	800aeda <_dtoa_r+0xa72>
 800af20:	2b39      	cmp	r3, #57	; 0x39
 800af22:	d1d8      	bne.n	800aed6 <_dtoa_r+0xa6e>
 800af24:	9a02      	ldr	r2, [sp, #8]
 800af26:	2339      	movs	r3, #57	; 0x39
 800af28:	7013      	strb	r3, [r2, #0]
 800af2a:	462b      	mov	r3, r5
 800af2c:	461d      	mov	r5, r3
 800af2e:	3b01      	subs	r3, #1
 800af30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af34:	2a39      	cmp	r2, #57	; 0x39
 800af36:	d050      	beq.n	800afda <_dtoa_r+0xb72>
 800af38:	3201      	adds	r2, #1
 800af3a:	701a      	strb	r2, [r3, #0]
 800af3c:	e745      	b.n	800adca <_dtoa_r+0x962>
 800af3e:	2a00      	cmp	r2, #0
 800af40:	dd03      	ble.n	800af4a <_dtoa_r+0xae2>
 800af42:	2b39      	cmp	r3, #57	; 0x39
 800af44:	d0ee      	beq.n	800af24 <_dtoa_r+0xabc>
 800af46:	3301      	adds	r3, #1
 800af48:	e7c7      	b.n	800aeda <_dtoa_r+0xa72>
 800af4a:	9a01      	ldr	r2, [sp, #4]
 800af4c:	9907      	ldr	r1, [sp, #28]
 800af4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800af52:	428a      	cmp	r2, r1
 800af54:	d02a      	beq.n	800afac <_dtoa_r+0xb44>
 800af56:	4659      	mov	r1, fp
 800af58:	2300      	movs	r3, #0
 800af5a:	220a      	movs	r2, #10
 800af5c:	4620      	mov	r0, r4
 800af5e:	f000 f8eb 	bl	800b138 <__multadd>
 800af62:	45b8      	cmp	r8, r7
 800af64:	4683      	mov	fp, r0
 800af66:	f04f 0300 	mov.w	r3, #0
 800af6a:	f04f 020a 	mov.w	r2, #10
 800af6e:	4641      	mov	r1, r8
 800af70:	4620      	mov	r0, r4
 800af72:	d107      	bne.n	800af84 <_dtoa_r+0xb1c>
 800af74:	f000 f8e0 	bl	800b138 <__multadd>
 800af78:	4680      	mov	r8, r0
 800af7a:	4607      	mov	r7, r0
 800af7c:	9b01      	ldr	r3, [sp, #4]
 800af7e:	3301      	adds	r3, #1
 800af80:	9301      	str	r3, [sp, #4]
 800af82:	e775      	b.n	800ae70 <_dtoa_r+0xa08>
 800af84:	f000 f8d8 	bl	800b138 <__multadd>
 800af88:	4639      	mov	r1, r7
 800af8a:	4680      	mov	r8, r0
 800af8c:	2300      	movs	r3, #0
 800af8e:	220a      	movs	r2, #10
 800af90:	4620      	mov	r0, r4
 800af92:	f000 f8d1 	bl	800b138 <__multadd>
 800af96:	4607      	mov	r7, r0
 800af98:	e7f0      	b.n	800af7c <_dtoa_r+0xb14>
 800af9a:	f1b9 0f00 	cmp.w	r9, #0
 800af9e:	9a00      	ldr	r2, [sp, #0]
 800afa0:	bfcc      	ite	gt
 800afa2:	464d      	movgt	r5, r9
 800afa4:	2501      	movle	r5, #1
 800afa6:	4415      	add	r5, r2
 800afa8:	f04f 0800 	mov.w	r8, #0
 800afac:	4659      	mov	r1, fp
 800afae:	2201      	movs	r2, #1
 800afb0:	4620      	mov	r0, r4
 800afb2:	9301      	str	r3, [sp, #4]
 800afb4:	f000 fa70 	bl	800b498 <__lshift>
 800afb8:	4631      	mov	r1, r6
 800afba:	4683      	mov	fp, r0
 800afbc:	f000 fad8 	bl	800b570 <__mcmp>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	dcb2      	bgt.n	800af2a <_dtoa_r+0xac2>
 800afc4:	d102      	bne.n	800afcc <_dtoa_r+0xb64>
 800afc6:	9b01      	ldr	r3, [sp, #4]
 800afc8:	07db      	lsls	r3, r3, #31
 800afca:	d4ae      	bmi.n	800af2a <_dtoa_r+0xac2>
 800afcc:	462b      	mov	r3, r5
 800afce:	461d      	mov	r5, r3
 800afd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afd4:	2a30      	cmp	r2, #48	; 0x30
 800afd6:	d0fa      	beq.n	800afce <_dtoa_r+0xb66>
 800afd8:	e6f7      	b.n	800adca <_dtoa_r+0x962>
 800afda:	9a00      	ldr	r2, [sp, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d1a5      	bne.n	800af2c <_dtoa_r+0xac4>
 800afe0:	f10a 0a01 	add.w	sl, sl, #1
 800afe4:	2331      	movs	r3, #49	; 0x31
 800afe6:	e779      	b.n	800aedc <_dtoa_r+0xa74>
 800afe8:	4b13      	ldr	r3, [pc, #76]	; (800b038 <_dtoa_r+0xbd0>)
 800afea:	f7ff baaf 	b.w	800a54c <_dtoa_r+0xe4>
 800afee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f47f aa86 	bne.w	800a502 <_dtoa_r+0x9a>
 800aff6:	4b11      	ldr	r3, [pc, #68]	; (800b03c <_dtoa_r+0xbd4>)
 800aff8:	f7ff baa8 	b.w	800a54c <_dtoa_r+0xe4>
 800affc:	f1b9 0f00 	cmp.w	r9, #0
 800b000:	dc03      	bgt.n	800b00a <_dtoa_r+0xba2>
 800b002:	9b05      	ldr	r3, [sp, #20]
 800b004:	2b02      	cmp	r3, #2
 800b006:	f73f aec9 	bgt.w	800ad9c <_dtoa_r+0x934>
 800b00a:	9d00      	ldr	r5, [sp, #0]
 800b00c:	4631      	mov	r1, r6
 800b00e:	4658      	mov	r0, fp
 800b010:	f7ff f99e 	bl	800a350 <quorem>
 800b014:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b018:	f805 3b01 	strb.w	r3, [r5], #1
 800b01c:	9a00      	ldr	r2, [sp, #0]
 800b01e:	1aaa      	subs	r2, r5, r2
 800b020:	4591      	cmp	r9, r2
 800b022:	ddba      	ble.n	800af9a <_dtoa_r+0xb32>
 800b024:	4659      	mov	r1, fp
 800b026:	2300      	movs	r3, #0
 800b028:	220a      	movs	r2, #10
 800b02a:	4620      	mov	r0, r4
 800b02c:	f000 f884 	bl	800b138 <__multadd>
 800b030:	4683      	mov	fp, r0
 800b032:	e7eb      	b.n	800b00c <_dtoa_r+0xba4>
 800b034:	0800cdcb 	.word	0x0800cdcb
 800b038:	0800cd24 	.word	0x0800cd24
 800b03c:	0800cd48 	.word	0x0800cd48

0800b040 <_localeconv_r>:
 800b040:	4800      	ldr	r0, [pc, #0]	; (800b044 <_localeconv_r+0x4>)
 800b042:	4770      	bx	lr
 800b044:	20000170 	.word	0x20000170

0800b048 <malloc>:
 800b048:	4b02      	ldr	r3, [pc, #8]	; (800b054 <malloc+0xc>)
 800b04a:	4601      	mov	r1, r0
 800b04c:	6818      	ldr	r0, [r3, #0]
 800b04e:	f000 bbef 	b.w	800b830 <_malloc_r>
 800b052:	bf00      	nop
 800b054:	2000001c 	.word	0x2000001c

0800b058 <memcpy>:
 800b058:	440a      	add	r2, r1
 800b05a:	4291      	cmp	r1, r2
 800b05c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b060:	d100      	bne.n	800b064 <memcpy+0xc>
 800b062:	4770      	bx	lr
 800b064:	b510      	push	{r4, lr}
 800b066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b06a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b06e:	4291      	cmp	r1, r2
 800b070:	d1f9      	bne.n	800b066 <memcpy+0xe>
 800b072:	bd10      	pop	{r4, pc}

0800b074 <_Balloc>:
 800b074:	b570      	push	{r4, r5, r6, lr}
 800b076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b078:	4604      	mov	r4, r0
 800b07a:	460d      	mov	r5, r1
 800b07c:	b976      	cbnz	r6, 800b09c <_Balloc+0x28>
 800b07e:	2010      	movs	r0, #16
 800b080:	f7ff ffe2 	bl	800b048 <malloc>
 800b084:	4602      	mov	r2, r0
 800b086:	6260      	str	r0, [r4, #36]	; 0x24
 800b088:	b920      	cbnz	r0, 800b094 <_Balloc+0x20>
 800b08a:	4b18      	ldr	r3, [pc, #96]	; (800b0ec <_Balloc+0x78>)
 800b08c:	4818      	ldr	r0, [pc, #96]	; (800b0f0 <_Balloc+0x7c>)
 800b08e:	2166      	movs	r1, #102	; 0x66
 800b090:	f000 fd94 	bl	800bbbc <__assert_func>
 800b094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b098:	6006      	str	r6, [r0, #0]
 800b09a:	60c6      	str	r6, [r0, #12]
 800b09c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b09e:	68f3      	ldr	r3, [r6, #12]
 800b0a0:	b183      	cbz	r3, 800b0c4 <_Balloc+0x50>
 800b0a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0aa:	b9b8      	cbnz	r0, 800b0dc <_Balloc+0x68>
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	fa01 f605 	lsl.w	r6, r1, r5
 800b0b2:	1d72      	adds	r2, r6, #5
 800b0b4:	0092      	lsls	r2, r2, #2
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f000 fb5a 	bl	800b770 <_calloc_r>
 800b0bc:	b160      	cbz	r0, 800b0d8 <_Balloc+0x64>
 800b0be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0c2:	e00e      	b.n	800b0e2 <_Balloc+0x6e>
 800b0c4:	2221      	movs	r2, #33	; 0x21
 800b0c6:	2104      	movs	r1, #4
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 fb51 	bl	800b770 <_calloc_r>
 800b0ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0d0:	60f0      	str	r0, [r6, #12]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1e4      	bne.n	800b0a2 <_Balloc+0x2e>
 800b0d8:	2000      	movs	r0, #0
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	6802      	ldr	r2, [r0, #0]
 800b0de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0e8:	e7f7      	b.n	800b0da <_Balloc+0x66>
 800b0ea:	bf00      	nop
 800b0ec:	0800cd55 	.word	0x0800cd55
 800b0f0:	0800cddc 	.word	0x0800cddc

0800b0f4 <_Bfree>:
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b0f8:	4605      	mov	r5, r0
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	b976      	cbnz	r6, 800b11c <_Bfree+0x28>
 800b0fe:	2010      	movs	r0, #16
 800b100:	f7ff ffa2 	bl	800b048 <malloc>
 800b104:	4602      	mov	r2, r0
 800b106:	6268      	str	r0, [r5, #36]	; 0x24
 800b108:	b920      	cbnz	r0, 800b114 <_Bfree+0x20>
 800b10a:	4b09      	ldr	r3, [pc, #36]	; (800b130 <_Bfree+0x3c>)
 800b10c:	4809      	ldr	r0, [pc, #36]	; (800b134 <_Bfree+0x40>)
 800b10e:	218a      	movs	r1, #138	; 0x8a
 800b110:	f000 fd54 	bl	800bbbc <__assert_func>
 800b114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b118:	6006      	str	r6, [r0, #0]
 800b11a:	60c6      	str	r6, [r0, #12]
 800b11c:	b13c      	cbz	r4, 800b12e <_Bfree+0x3a>
 800b11e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b120:	6862      	ldr	r2, [r4, #4]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b128:	6021      	str	r1, [r4, #0]
 800b12a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b12e:	bd70      	pop	{r4, r5, r6, pc}
 800b130:	0800cd55 	.word	0x0800cd55
 800b134:	0800cddc 	.word	0x0800cddc

0800b138 <__multadd>:
 800b138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b13c:	690e      	ldr	r6, [r1, #16]
 800b13e:	4607      	mov	r7, r0
 800b140:	4698      	mov	r8, r3
 800b142:	460c      	mov	r4, r1
 800b144:	f101 0014 	add.w	r0, r1, #20
 800b148:	2300      	movs	r3, #0
 800b14a:	6805      	ldr	r5, [r0, #0]
 800b14c:	b2a9      	uxth	r1, r5
 800b14e:	fb02 8101 	mla	r1, r2, r1, r8
 800b152:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b156:	0c2d      	lsrs	r5, r5, #16
 800b158:	fb02 c505 	mla	r5, r2, r5, ip
 800b15c:	b289      	uxth	r1, r1
 800b15e:	3301      	adds	r3, #1
 800b160:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b164:	429e      	cmp	r6, r3
 800b166:	f840 1b04 	str.w	r1, [r0], #4
 800b16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b16e:	dcec      	bgt.n	800b14a <__multadd+0x12>
 800b170:	f1b8 0f00 	cmp.w	r8, #0
 800b174:	d022      	beq.n	800b1bc <__multadd+0x84>
 800b176:	68a3      	ldr	r3, [r4, #8]
 800b178:	42b3      	cmp	r3, r6
 800b17a:	dc19      	bgt.n	800b1b0 <__multadd+0x78>
 800b17c:	6861      	ldr	r1, [r4, #4]
 800b17e:	4638      	mov	r0, r7
 800b180:	3101      	adds	r1, #1
 800b182:	f7ff ff77 	bl	800b074 <_Balloc>
 800b186:	4605      	mov	r5, r0
 800b188:	b928      	cbnz	r0, 800b196 <__multadd+0x5e>
 800b18a:	4602      	mov	r2, r0
 800b18c:	4b0d      	ldr	r3, [pc, #52]	; (800b1c4 <__multadd+0x8c>)
 800b18e:	480e      	ldr	r0, [pc, #56]	; (800b1c8 <__multadd+0x90>)
 800b190:	21b5      	movs	r1, #181	; 0xb5
 800b192:	f000 fd13 	bl	800bbbc <__assert_func>
 800b196:	6922      	ldr	r2, [r4, #16]
 800b198:	3202      	adds	r2, #2
 800b19a:	f104 010c 	add.w	r1, r4, #12
 800b19e:	0092      	lsls	r2, r2, #2
 800b1a0:	300c      	adds	r0, #12
 800b1a2:	f7ff ff59 	bl	800b058 <memcpy>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4638      	mov	r0, r7
 800b1aa:	f7ff ffa3 	bl	800b0f4 <_Bfree>
 800b1ae:	462c      	mov	r4, r5
 800b1b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b1b4:	3601      	adds	r6, #1
 800b1b6:	f8c3 8014 	str.w	r8, [r3, #20]
 800b1ba:	6126      	str	r6, [r4, #16]
 800b1bc:	4620      	mov	r0, r4
 800b1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c2:	bf00      	nop
 800b1c4:	0800cdcb 	.word	0x0800cdcb
 800b1c8:	0800cddc 	.word	0x0800cddc

0800b1cc <__hi0bits>:
 800b1cc:	0c03      	lsrs	r3, r0, #16
 800b1ce:	041b      	lsls	r3, r3, #16
 800b1d0:	b9d3      	cbnz	r3, 800b208 <__hi0bits+0x3c>
 800b1d2:	0400      	lsls	r0, r0, #16
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b1da:	bf04      	itt	eq
 800b1dc:	0200      	lsleq	r0, r0, #8
 800b1de:	3308      	addeq	r3, #8
 800b1e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1e4:	bf04      	itt	eq
 800b1e6:	0100      	lsleq	r0, r0, #4
 800b1e8:	3304      	addeq	r3, #4
 800b1ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1ee:	bf04      	itt	eq
 800b1f0:	0080      	lsleq	r0, r0, #2
 800b1f2:	3302      	addeq	r3, #2
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	db05      	blt.n	800b204 <__hi0bits+0x38>
 800b1f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1fc:	f103 0301 	add.w	r3, r3, #1
 800b200:	bf08      	it	eq
 800b202:	2320      	moveq	r3, #32
 800b204:	4618      	mov	r0, r3
 800b206:	4770      	bx	lr
 800b208:	2300      	movs	r3, #0
 800b20a:	e7e4      	b.n	800b1d6 <__hi0bits+0xa>

0800b20c <__lo0bits>:
 800b20c:	6803      	ldr	r3, [r0, #0]
 800b20e:	f013 0207 	ands.w	r2, r3, #7
 800b212:	4601      	mov	r1, r0
 800b214:	d00b      	beq.n	800b22e <__lo0bits+0x22>
 800b216:	07da      	lsls	r2, r3, #31
 800b218:	d424      	bmi.n	800b264 <__lo0bits+0x58>
 800b21a:	0798      	lsls	r0, r3, #30
 800b21c:	bf49      	itett	mi
 800b21e:	085b      	lsrmi	r3, r3, #1
 800b220:	089b      	lsrpl	r3, r3, #2
 800b222:	2001      	movmi	r0, #1
 800b224:	600b      	strmi	r3, [r1, #0]
 800b226:	bf5c      	itt	pl
 800b228:	600b      	strpl	r3, [r1, #0]
 800b22a:	2002      	movpl	r0, #2
 800b22c:	4770      	bx	lr
 800b22e:	b298      	uxth	r0, r3
 800b230:	b9b0      	cbnz	r0, 800b260 <__lo0bits+0x54>
 800b232:	0c1b      	lsrs	r3, r3, #16
 800b234:	2010      	movs	r0, #16
 800b236:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b23a:	bf04      	itt	eq
 800b23c:	0a1b      	lsreq	r3, r3, #8
 800b23e:	3008      	addeq	r0, #8
 800b240:	071a      	lsls	r2, r3, #28
 800b242:	bf04      	itt	eq
 800b244:	091b      	lsreq	r3, r3, #4
 800b246:	3004      	addeq	r0, #4
 800b248:	079a      	lsls	r2, r3, #30
 800b24a:	bf04      	itt	eq
 800b24c:	089b      	lsreq	r3, r3, #2
 800b24e:	3002      	addeq	r0, #2
 800b250:	07da      	lsls	r2, r3, #31
 800b252:	d403      	bmi.n	800b25c <__lo0bits+0x50>
 800b254:	085b      	lsrs	r3, r3, #1
 800b256:	f100 0001 	add.w	r0, r0, #1
 800b25a:	d005      	beq.n	800b268 <__lo0bits+0x5c>
 800b25c:	600b      	str	r3, [r1, #0]
 800b25e:	4770      	bx	lr
 800b260:	4610      	mov	r0, r2
 800b262:	e7e8      	b.n	800b236 <__lo0bits+0x2a>
 800b264:	2000      	movs	r0, #0
 800b266:	4770      	bx	lr
 800b268:	2020      	movs	r0, #32
 800b26a:	4770      	bx	lr

0800b26c <__i2b>:
 800b26c:	b510      	push	{r4, lr}
 800b26e:	460c      	mov	r4, r1
 800b270:	2101      	movs	r1, #1
 800b272:	f7ff feff 	bl	800b074 <_Balloc>
 800b276:	4602      	mov	r2, r0
 800b278:	b928      	cbnz	r0, 800b286 <__i2b+0x1a>
 800b27a:	4b05      	ldr	r3, [pc, #20]	; (800b290 <__i2b+0x24>)
 800b27c:	4805      	ldr	r0, [pc, #20]	; (800b294 <__i2b+0x28>)
 800b27e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b282:	f000 fc9b 	bl	800bbbc <__assert_func>
 800b286:	2301      	movs	r3, #1
 800b288:	6144      	str	r4, [r0, #20]
 800b28a:	6103      	str	r3, [r0, #16]
 800b28c:	bd10      	pop	{r4, pc}
 800b28e:	bf00      	nop
 800b290:	0800cdcb 	.word	0x0800cdcb
 800b294:	0800cddc 	.word	0x0800cddc

0800b298 <__multiply>:
 800b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	4614      	mov	r4, r2
 800b29e:	690a      	ldr	r2, [r1, #16]
 800b2a0:	6923      	ldr	r3, [r4, #16]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	bfb8      	it	lt
 800b2a6:	460b      	movlt	r3, r1
 800b2a8:	460d      	mov	r5, r1
 800b2aa:	bfbc      	itt	lt
 800b2ac:	4625      	movlt	r5, r4
 800b2ae:	461c      	movlt	r4, r3
 800b2b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b2b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b2b8:	68ab      	ldr	r3, [r5, #8]
 800b2ba:	6869      	ldr	r1, [r5, #4]
 800b2bc:	eb0a 0709 	add.w	r7, sl, r9
 800b2c0:	42bb      	cmp	r3, r7
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	bfb8      	it	lt
 800b2c6:	3101      	addlt	r1, #1
 800b2c8:	f7ff fed4 	bl	800b074 <_Balloc>
 800b2cc:	b930      	cbnz	r0, 800b2dc <__multiply+0x44>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	4b42      	ldr	r3, [pc, #264]	; (800b3dc <__multiply+0x144>)
 800b2d2:	4843      	ldr	r0, [pc, #268]	; (800b3e0 <__multiply+0x148>)
 800b2d4:	f240 115d 	movw	r1, #349	; 0x15d
 800b2d8:	f000 fc70 	bl	800bbbc <__assert_func>
 800b2dc:	f100 0614 	add.w	r6, r0, #20
 800b2e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b2e4:	4633      	mov	r3, r6
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	4543      	cmp	r3, r8
 800b2ea:	d31e      	bcc.n	800b32a <__multiply+0x92>
 800b2ec:	f105 0c14 	add.w	ip, r5, #20
 800b2f0:	f104 0314 	add.w	r3, r4, #20
 800b2f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b2f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b2fc:	9202      	str	r2, [sp, #8]
 800b2fe:	ebac 0205 	sub.w	r2, ip, r5
 800b302:	3a15      	subs	r2, #21
 800b304:	f022 0203 	bic.w	r2, r2, #3
 800b308:	3204      	adds	r2, #4
 800b30a:	f105 0115 	add.w	r1, r5, #21
 800b30e:	458c      	cmp	ip, r1
 800b310:	bf38      	it	cc
 800b312:	2204      	movcc	r2, #4
 800b314:	9201      	str	r2, [sp, #4]
 800b316:	9a02      	ldr	r2, [sp, #8]
 800b318:	9303      	str	r3, [sp, #12]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d808      	bhi.n	800b330 <__multiply+0x98>
 800b31e:	2f00      	cmp	r7, #0
 800b320:	dc55      	bgt.n	800b3ce <__multiply+0x136>
 800b322:	6107      	str	r7, [r0, #16]
 800b324:	b005      	add	sp, #20
 800b326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32a:	f843 2b04 	str.w	r2, [r3], #4
 800b32e:	e7db      	b.n	800b2e8 <__multiply+0x50>
 800b330:	f8b3 a000 	ldrh.w	sl, [r3]
 800b334:	f1ba 0f00 	cmp.w	sl, #0
 800b338:	d020      	beq.n	800b37c <__multiply+0xe4>
 800b33a:	f105 0e14 	add.w	lr, r5, #20
 800b33e:	46b1      	mov	r9, r6
 800b340:	2200      	movs	r2, #0
 800b342:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b346:	f8d9 b000 	ldr.w	fp, [r9]
 800b34a:	b2a1      	uxth	r1, r4
 800b34c:	fa1f fb8b 	uxth.w	fp, fp
 800b350:	fb0a b101 	mla	r1, sl, r1, fp
 800b354:	4411      	add	r1, r2
 800b356:	f8d9 2000 	ldr.w	r2, [r9]
 800b35a:	0c24      	lsrs	r4, r4, #16
 800b35c:	0c12      	lsrs	r2, r2, #16
 800b35e:	fb0a 2404 	mla	r4, sl, r4, r2
 800b362:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b366:	b289      	uxth	r1, r1
 800b368:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b36c:	45f4      	cmp	ip, lr
 800b36e:	f849 1b04 	str.w	r1, [r9], #4
 800b372:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b376:	d8e4      	bhi.n	800b342 <__multiply+0xaa>
 800b378:	9901      	ldr	r1, [sp, #4]
 800b37a:	5072      	str	r2, [r6, r1]
 800b37c:	9a03      	ldr	r2, [sp, #12]
 800b37e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b382:	3304      	adds	r3, #4
 800b384:	f1b9 0f00 	cmp.w	r9, #0
 800b388:	d01f      	beq.n	800b3ca <__multiply+0x132>
 800b38a:	6834      	ldr	r4, [r6, #0]
 800b38c:	f105 0114 	add.w	r1, r5, #20
 800b390:	46b6      	mov	lr, r6
 800b392:	f04f 0a00 	mov.w	sl, #0
 800b396:	880a      	ldrh	r2, [r1, #0]
 800b398:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b39c:	fb09 b202 	mla	r2, r9, r2, fp
 800b3a0:	4492      	add	sl, r2
 800b3a2:	b2a4      	uxth	r4, r4
 800b3a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b3a8:	f84e 4b04 	str.w	r4, [lr], #4
 800b3ac:	f851 4b04 	ldr.w	r4, [r1], #4
 800b3b0:	f8be 2000 	ldrh.w	r2, [lr]
 800b3b4:	0c24      	lsrs	r4, r4, #16
 800b3b6:	fb09 2404 	mla	r4, r9, r4, r2
 800b3ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b3be:	458c      	cmp	ip, r1
 800b3c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b3c4:	d8e7      	bhi.n	800b396 <__multiply+0xfe>
 800b3c6:	9a01      	ldr	r2, [sp, #4]
 800b3c8:	50b4      	str	r4, [r6, r2]
 800b3ca:	3604      	adds	r6, #4
 800b3cc:	e7a3      	b.n	800b316 <__multiply+0x7e>
 800b3ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1a5      	bne.n	800b322 <__multiply+0x8a>
 800b3d6:	3f01      	subs	r7, #1
 800b3d8:	e7a1      	b.n	800b31e <__multiply+0x86>
 800b3da:	bf00      	nop
 800b3dc:	0800cdcb 	.word	0x0800cdcb
 800b3e0:	0800cddc 	.word	0x0800cddc

0800b3e4 <__pow5mult>:
 800b3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3e8:	4615      	mov	r5, r2
 800b3ea:	f012 0203 	ands.w	r2, r2, #3
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	460f      	mov	r7, r1
 800b3f2:	d007      	beq.n	800b404 <__pow5mult+0x20>
 800b3f4:	4c25      	ldr	r4, [pc, #148]	; (800b48c <__pow5mult+0xa8>)
 800b3f6:	3a01      	subs	r2, #1
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3fe:	f7ff fe9b 	bl	800b138 <__multadd>
 800b402:	4607      	mov	r7, r0
 800b404:	10ad      	asrs	r5, r5, #2
 800b406:	d03d      	beq.n	800b484 <__pow5mult+0xa0>
 800b408:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b40a:	b97c      	cbnz	r4, 800b42c <__pow5mult+0x48>
 800b40c:	2010      	movs	r0, #16
 800b40e:	f7ff fe1b 	bl	800b048 <malloc>
 800b412:	4602      	mov	r2, r0
 800b414:	6270      	str	r0, [r6, #36]	; 0x24
 800b416:	b928      	cbnz	r0, 800b424 <__pow5mult+0x40>
 800b418:	4b1d      	ldr	r3, [pc, #116]	; (800b490 <__pow5mult+0xac>)
 800b41a:	481e      	ldr	r0, [pc, #120]	; (800b494 <__pow5mult+0xb0>)
 800b41c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b420:	f000 fbcc 	bl	800bbbc <__assert_func>
 800b424:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b428:	6004      	str	r4, [r0, #0]
 800b42a:	60c4      	str	r4, [r0, #12]
 800b42c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b430:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b434:	b94c      	cbnz	r4, 800b44a <__pow5mult+0x66>
 800b436:	f240 2171 	movw	r1, #625	; 0x271
 800b43a:	4630      	mov	r0, r6
 800b43c:	f7ff ff16 	bl	800b26c <__i2b>
 800b440:	2300      	movs	r3, #0
 800b442:	f8c8 0008 	str.w	r0, [r8, #8]
 800b446:	4604      	mov	r4, r0
 800b448:	6003      	str	r3, [r0, #0]
 800b44a:	f04f 0900 	mov.w	r9, #0
 800b44e:	07eb      	lsls	r3, r5, #31
 800b450:	d50a      	bpl.n	800b468 <__pow5mult+0x84>
 800b452:	4639      	mov	r1, r7
 800b454:	4622      	mov	r2, r4
 800b456:	4630      	mov	r0, r6
 800b458:	f7ff ff1e 	bl	800b298 <__multiply>
 800b45c:	4639      	mov	r1, r7
 800b45e:	4680      	mov	r8, r0
 800b460:	4630      	mov	r0, r6
 800b462:	f7ff fe47 	bl	800b0f4 <_Bfree>
 800b466:	4647      	mov	r7, r8
 800b468:	106d      	asrs	r5, r5, #1
 800b46a:	d00b      	beq.n	800b484 <__pow5mult+0xa0>
 800b46c:	6820      	ldr	r0, [r4, #0]
 800b46e:	b938      	cbnz	r0, 800b480 <__pow5mult+0x9c>
 800b470:	4622      	mov	r2, r4
 800b472:	4621      	mov	r1, r4
 800b474:	4630      	mov	r0, r6
 800b476:	f7ff ff0f 	bl	800b298 <__multiply>
 800b47a:	6020      	str	r0, [r4, #0]
 800b47c:	f8c0 9000 	str.w	r9, [r0]
 800b480:	4604      	mov	r4, r0
 800b482:	e7e4      	b.n	800b44e <__pow5mult+0x6a>
 800b484:	4638      	mov	r0, r7
 800b486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b48a:	bf00      	nop
 800b48c:	0800cf30 	.word	0x0800cf30
 800b490:	0800cd55 	.word	0x0800cd55
 800b494:	0800cddc 	.word	0x0800cddc

0800b498 <__lshift>:
 800b498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b49c:	460c      	mov	r4, r1
 800b49e:	6849      	ldr	r1, [r1, #4]
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b4a6:	68a3      	ldr	r3, [r4, #8]
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	4691      	mov	r9, r2
 800b4ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4b0:	f108 0601 	add.w	r6, r8, #1
 800b4b4:	42b3      	cmp	r3, r6
 800b4b6:	db0b      	blt.n	800b4d0 <__lshift+0x38>
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	f7ff fddb 	bl	800b074 <_Balloc>
 800b4be:	4605      	mov	r5, r0
 800b4c0:	b948      	cbnz	r0, 800b4d6 <__lshift+0x3e>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	4b28      	ldr	r3, [pc, #160]	; (800b568 <__lshift+0xd0>)
 800b4c6:	4829      	ldr	r0, [pc, #164]	; (800b56c <__lshift+0xd4>)
 800b4c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b4cc:	f000 fb76 	bl	800bbbc <__assert_func>
 800b4d0:	3101      	adds	r1, #1
 800b4d2:	005b      	lsls	r3, r3, #1
 800b4d4:	e7ee      	b.n	800b4b4 <__lshift+0x1c>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f100 0114 	add.w	r1, r0, #20
 800b4dc:	f100 0210 	add.w	r2, r0, #16
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	4553      	cmp	r3, sl
 800b4e4:	db33      	blt.n	800b54e <__lshift+0xb6>
 800b4e6:	6920      	ldr	r0, [r4, #16]
 800b4e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4ec:	f104 0314 	add.w	r3, r4, #20
 800b4f0:	f019 091f 	ands.w	r9, r9, #31
 800b4f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4fc:	d02b      	beq.n	800b556 <__lshift+0xbe>
 800b4fe:	f1c9 0e20 	rsb	lr, r9, #32
 800b502:	468a      	mov	sl, r1
 800b504:	2200      	movs	r2, #0
 800b506:	6818      	ldr	r0, [r3, #0]
 800b508:	fa00 f009 	lsl.w	r0, r0, r9
 800b50c:	4302      	orrs	r2, r0
 800b50e:	f84a 2b04 	str.w	r2, [sl], #4
 800b512:	f853 2b04 	ldr.w	r2, [r3], #4
 800b516:	459c      	cmp	ip, r3
 800b518:	fa22 f20e 	lsr.w	r2, r2, lr
 800b51c:	d8f3      	bhi.n	800b506 <__lshift+0x6e>
 800b51e:	ebac 0304 	sub.w	r3, ip, r4
 800b522:	3b15      	subs	r3, #21
 800b524:	f023 0303 	bic.w	r3, r3, #3
 800b528:	3304      	adds	r3, #4
 800b52a:	f104 0015 	add.w	r0, r4, #21
 800b52e:	4584      	cmp	ip, r0
 800b530:	bf38      	it	cc
 800b532:	2304      	movcc	r3, #4
 800b534:	50ca      	str	r2, [r1, r3]
 800b536:	b10a      	cbz	r2, 800b53c <__lshift+0xa4>
 800b538:	f108 0602 	add.w	r6, r8, #2
 800b53c:	3e01      	subs	r6, #1
 800b53e:	4638      	mov	r0, r7
 800b540:	612e      	str	r6, [r5, #16]
 800b542:	4621      	mov	r1, r4
 800b544:	f7ff fdd6 	bl	800b0f4 <_Bfree>
 800b548:	4628      	mov	r0, r5
 800b54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b54e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b552:	3301      	adds	r3, #1
 800b554:	e7c5      	b.n	800b4e2 <__lshift+0x4a>
 800b556:	3904      	subs	r1, #4
 800b558:	f853 2b04 	ldr.w	r2, [r3], #4
 800b55c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b560:	459c      	cmp	ip, r3
 800b562:	d8f9      	bhi.n	800b558 <__lshift+0xc0>
 800b564:	e7ea      	b.n	800b53c <__lshift+0xa4>
 800b566:	bf00      	nop
 800b568:	0800cdcb 	.word	0x0800cdcb
 800b56c:	0800cddc 	.word	0x0800cddc

0800b570 <__mcmp>:
 800b570:	b530      	push	{r4, r5, lr}
 800b572:	6902      	ldr	r2, [r0, #16]
 800b574:	690c      	ldr	r4, [r1, #16]
 800b576:	1b12      	subs	r2, r2, r4
 800b578:	d10e      	bne.n	800b598 <__mcmp+0x28>
 800b57a:	f100 0314 	add.w	r3, r0, #20
 800b57e:	3114      	adds	r1, #20
 800b580:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b584:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b588:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b58c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b590:	42a5      	cmp	r5, r4
 800b592:	d003      	beq.n	800b59c <__mcmp+0x2c>
 800b594:	d305      	bcc.n	800b5a2 <__mcmp+0x32>
 800b596:	2201      	movs	r2, #1
 800b598:	4610      	mov	r0, r2
 800b59a:	bd30      	pop	{r4, r5, pc}
 800b59c:	4283      	cmp	r3, r0
 800b59e:	d3f3      	bcc.n	800b588 <__mcmp+0x18>
 800b5a0:	e7fa      	b.n	800b598 <__mcmp+0x28>
 800b5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a6:	e7f7      	b.n	800b598 <__mcmp+0x28>

0800b5a8 <__mdiff>:
 800b5a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	4617      	mov	r7, r2
 800b5b6:	f7ff ffdb 	bl	800b570 <__mcmp>
 800b5ba:	1e05      	subs	r5, r0, #0
 800b5bc:	d110      	bne.n	800b5e0 <__mdiff+0x38>
 800b5be:	4629      	mov	r1, r5
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7ff fd57 	bl	800b074 <_Balloc>
 800b5c6:	b930      	cbnz	r0, 800b5d6 <__mdiff+0x2e>
 800b5c8:	4b39      	ldr	r3, [pc, #228]	; (800b6b0 <__mdiff+0x108>)
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	f240 2132 	movw	r1, #562	; 0x232
 800b5d0:	4838      	ldr	r0, [pc, #224]	; (800b6b4 <__mdiff+0x10c>)
 800b5d2:	f000 faf3 	bl	800bbbc <__assert_func>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e0:	bfa4      	itt	ge
 800b5e2:	463b      	movge	r3, r7
 800b5e4:	4627      	movge	r7, r4
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	6879      	ldr	r1, [r7, #4]
 800b5ea:	bfa6      	itte	ge
 800b5ec:	461c      	movge	r4, r3
 800b5ee:	2500      	movge	r5, #0
 800b5f0:	2501      	movlt	r5, #1
 800b5f2:	f7ff fd3f 	bl	800b074 <_Balloc>
 800b5f6:	b920      	cbnz	r0, 800b602 <__mdiff+0x5a>
 800b5f8:	4b2d      	ldr	r3, [pc, #180]	; (800b6b0 <__mdiff+0x108>)
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b600:	e7e6      	b.n	800b5d0 <__mdiff+0x28>
 800b602:	693e      	ldr	r6, [r7, #16]
 800b604:	60c5      	str	r5, [r0, #12]
 800b606:	6925      	ldr	r5, [r4, #16]
 800b608:	f107 0114 	add.w	r1, r7, #20
 800b60c:	f104 0914 	add.w	r9, r4, #20
 800b610:	f100 0e14 	add.w	lr, r0, #20
 800b614:	f107 0210 	add.w	r2, r7, #16
 800b618:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b61c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b620:	46f2      	mov	sl, lr
 800b622:	2700      	movs	r7, #0
 800b624:	f859 3b04 	ldr.w	r3, [r9], #4
 800b628:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b62c:	fa1f f883 	uxth.w	r8, r3
 800b630:	fa17 f78b 	uxtah	r7, r7, fp
 800b634:	0c1b      	lsrs	r3, r3, #16
 800b636:	eba7 0808 	sub.w	r8, r7, r8
 800b63a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b63e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b642:	fa1f f888 	uxth.w	r8, r8
 800b646:	141f      	asrs	r7, r3, #16
 800b648:	454d      	cmp	r5, r9
 800b64a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b64e:	f84a 3b04 	str.w	r3, [sl], #4
 800b652:	d8e7      	bhi.n	800b624 <__mdiff+0x7c>
 800b654:	1b2b      	subs	r3, r5, r4
 800b656:	3b15      	subs	r3, #21
 800b658:	f023 0303 	bic.w	r3, r3, #3
 800b65c:	3304      	adds	r3, #4
 800b65e:	3415      	adds	r4, #21
 800b660:	42a5      	cmp	r5, r4
 800b662:	bf38      	it	cc
 800b664:	2304      	movcc	r3, #4
 800b666:	4419      	add	r1, r3
 800b668:	4473      	add	r3, lr
 800b66a:	469e      	mov	lr, r3
 800b66c:	460d      	mov	r5, r1
 800b66e:	4565      	cmp	r5, ip
 800b670:	d30e      	bcc.n	800b690 <__mdiff+0xe8>
 800b672:	f10c 0203 	add.w	r2, ip, #3
 800b676:	1a52      	subs	r2, r2, r1
 800b678:	f022 0203 	bic.w	r2, r2, #3
 800b67c:	3903      	subs	r1, #3
 800b67e:	458c      	cmp	ip, r1
 800b680:	bf38      	it	cc
 800b682:	2200      	movcc	r2, #0
 800b684:	441a      	add	r2, r3
 800b686:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b68a:	b17b      	cbz	r3, 800b6ac <__mdiff+0x104>
 800b68c:	6106      	str	r6, [r0, #16]
 800b68e:	e7a5      	b.n	800b5dc <__mdiff+0x34>
 800b690:	f855 8b04 	ldr.w	r8, [r5], #4
 800b694:	fa17 f488 	uxtah	r4, r7, r8
 800b698:	1422      	asrs	r2, r4, #16
 800b69a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b69e:	b2a4      	uxth	r4, r4
 800b6a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b6a4:	f84e 4b04 	str.w	r4, [lr], #4
 800b6a8:	1417      	asrs	r7, r2, #16
 800b6aa:	e7e0      	b.n	800b66e <__mdiff+0xc6>
 800b6ac:	3e01      	subs	r6, #1
 800b6ae:	e7ea      	b.n	800b686 <__mdiff+0xde>
 800b6b0:	0800cdcb 	.word	0x0800cdcb
 800b6b4:	0800cddc 	.word	0x0800cddc

0800b6b8 <__d2b>:
 800b6b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6bc:	4689      	mov	r9, r1
 800b6be:	2101      	movs	r1, #1
 800b6c0:	ec57 6b10 	vmov	r6, r7, d0
 800b6c4:	4690      	mov	r8, r2
 800b6c6:	f7ff fcd5 	bl	800b074 <_Balloc>
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	b930      	cbnz	r0, 800b6dc <__d2b+0x24>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	4b25      	ldr	r3, [pc, #148]	; (800b768 <__d2b+0xb0>)
 800b6d2:	4826      	ldr	r0, [pc, #152]	; (800b76c <__d2b+0xb4>)
 800b6d4:	f240 310a 	movw	r1, #778	; 0x30a
 800b6d8:	f000 fa70 	bl	800bbbc <__assert_func>
 800b6dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b6e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6e4:	bb35      	cbnz	r5, 800b734 <__d2b+0x7c>
 800b6e6:	2e00      	cmp	r6, #0
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	d028      	beq.n	800b73e <__d2b+0x86>
 800b6ec:	4668      	mov	r0, sp
 800b6ee:	9600      	str	r6, [sp, #0]
 800b6f0:	f7ff fd8c 	bl	800b20c <__lo0bits>
 800b6f4:	9900      	ldr	r1, [sp, #0]
 800b6f6:	b300      	cbz	r0, 800b73a <__d2b+0x82>
 800b6f8:	9a01      	ldr	r2, [sp, #4]
 800b6fa:	f1c0 0320 	rsb	r3, r0, #32
 800b6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b702:	430b      	orrs	r3, r1
 800b704:	40c2      	lsrs	r2, r0
 800b706:	6163      	str	r3, [r4, #20]
 800b708:	9201      	str	r2, [sp, #4]
 800b70a:	9b01      	ldr	r3, [sp, #4]
 800b70c:	61a3      	str	r3, [r4, #24]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	bf14      	ite	ne
 800b712:	2202      	movne	r2, #2
 800b714:	2201      	moveq	r2, #1
 800b716:	6122      	str	r2, [r4, #16]
 800b718:	b1d5      	cbz	r5, 800b750 <__d2b+0x98>
 800b71a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b71e:	4405      	add	r5, r0
 800b720:	f8c9 5000 	str.w	r5, [r9]
 800b724:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b728:	f8c8 0000 	str.w	r0, [r8]
 800b72c:	4620      	mov	r0, r4
 800b72e:	b003      	add	sp, #12
 800b730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b738:	e7d5      	b.n	800b6e6 <__d2b+0x2e>
 800b73a:	6161      	str	r1, [r4, #20]
 800b73c:	e7e5      	b.n	800b70a <__d2b+0x52>
 800b73e:	a801      	add	r0, sp, #4
 800b740:	f7ff fd64 	bl	800b20c <__lo0bits>
 800b744:	9b01      	ldr	r3, [sp, #4]
 800b746:	6163      	str	r3, [r4, #20]
 800b748:	2201      	movs	r2, #1
 800b74a:	6122      	str	r2, [r4, #16]
 800b74c:	3020      	adds	r0, #32
 800b74e:	e7e3      	b.n	800b718 <__d2b+0x60>
 800b750:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b754:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b758:	f8c9 0000 	str.w	r0, [r9]
 800b75c:	6918      	ldr	r0, [r3, #16]
 800b75e:	f7ff fd35 	bl	800b1cc <__hi0bits>
 800b762:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b766:	e7df      	b.n	800b728 <__d2b+0x70>
 800b768:	0800cdcb 	.word	0x0800cdcb
 800b76c:	0800cddc 	.word	0x0800cddc

0800b770 <_calloc_r>:
 800b770:	b513      	push	{r0, r1, r4, lr}
 800b772:	434a      	muls	r2, r1
 800b774:	4611      	mov	r1, r2
 800b776:	9201      	str	r2, [sp, #4]
 800b778:	f000 f85a 	bl	800b830 <_malloc_r>
 800b77c:	4604      	mov	r4, r0
 800b77e:	b118      	cbz	r0, 800b788 <_calloc_r+0x18>
 800b780:	9a01      	ldr	r2, [sp, #4]
 800b782:	2100      	movs	r1, #0
 800b784:	f7fe f904 	bl	8009990 <memset>
 800b788:	4620      	mov	r0, r4
 800b78a:	b002      	add	sp, #8
 800b78c:	bd10      	pop	{r4, pc}
	...

0800b790 <_free_r>:
 800b790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b792:	2900      	cmp	r1, #0
 800b794:	d048      	beq.n	800b828 <_free_r+0x98>
 800b796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b79a:	9001      	str	r0, [sp, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f1a1 0404 	sub.w	r4, r1, #4
 800b7a2:	bfb8      	it	lt
 800b7a4:	18e4      	addlt	r4, r4, r3
 800b7a6:	f000 fa65 	bl	800bc74 <__malloc_lock>
 800b7aa:	4a20      	ldr	r2, [pc, #128]	; (800b82c <_free_r+0x9c>)
 800b7ac:	9801      	ldr	r0, [sp, #4]
 800b7ae:	6813      	ldr	r3, [r2, #0]
 800b7b0:	4615      	mov	r5, r2
 800b7b2:	b933      	cbnz	r3, 800b7c2 <_free_r+0x32>
 800b7b4:	6063      	str	r3, [r4, #4]
 800b7b6:	6014      	str	r4, [r2, #0]
 800b7b8:	b003      	add	sp, #12
 800b7ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7be:	f000 ba5f 	b.w	800bc80 <__malloc_unlock>
 800b7c2:	42a3      	cmp	r3, r4
 800b7c4:	d90b      	bls.n	800b7de <_free_r+0x4e>
 800b7c6:	6821      	ldr	r1, [r4, #0]
 800b7c8:	1862      	adds	r2, r4, r1
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	bf04      	itt	eq
 800b7ce:	681a      	ldreq	r2, [r3, #0]
 800b7d0:	685b      	ldreq	r3, [r3, #4]
 800b7d2:	6063      	str	r3, [r4, #4]
 800b7d4:	bf04      	itt	eq
 800b7d6:	1852      	addeq	r2, r2, r1
 800b7d8:	6022      	streq	r2, [r4, #0]
 800b7da:	602c      	str	r4, [r5, #0]
 800b7dc:	e7ec      	b.n	800b7b8 <_free_r+0x28>
 800b7de:	461a      	mov	r2, r3
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	b10b      	cbz	r3, 800b7e8 <_free_r+0x58>
 800b7e4:	42a3      	cmp	r3, r4
 800b7e6:	d9fa      	bls.n	800b7de <_free_r+0x4e>
 800b7e8:	6811      	ldr	r1, [r2, #0]
 800b7ea:	1855      	adds	r5, r2, r1
 800b7ec:	42a5      	cmp	r5, r4
 800b7ee:	d10b      	bne.n	800b808 <_free_r+0x78>
 800b7f0:	6824      	ldr	r4, [r4, #0]
 800b7f2:	4421      	add	r1, r4
 800b7f4:	1854      	adds	r4, r2, r1
 800b7f6:	42a3      	cmp	r3, r4
 800b7f8:	6011      	str	r1, [r2, #0]
 800b7fa:	d1dd      	bne.n	800b7b8 <_free_r+0x28>
 800b7fc:	681c      	ldr	r4, [r3, #0]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	6053      	str	r3, [r2, #4]
 800b802:	4421      	add	r1, r4
 800b804:	6011      	str	r1, [r2, #0]
 800b806:	e7d7      	b.n	800b7b8 <_free_r+0x28>
 800b808:	d902      	bls.n	800b810 <_free_r+0x80>
 800b80a:	230c      	movs	r3, #12
 800b80c:	6003      	str	r3, [r0, #0]
 800b80e:	e7d3      	b.n	800b7b8 <_free_r+0x28>
 800b810:	6825      	ldr	r5, [r4, #0]
 800b812:	1961      	adds	r1, r4, r5
 800b814:	428b      	cmp	r3, r1
 800b816:	bf04      	itt	eq
 800b818:	6819      	ldreq	r1, [r3, #0]
 800b81a:	685b      	ldreq	r3, [r3, #4]
 800b81c:	6063      	str	r3, [r4, #4]
 800b81e:	bf04      	itt	eq
 800b820:	1949      	addeq	r1, r1, r5
 800b822:	6021      	streq	r1, [r4, #0]
 800b824:	6054      	str	r4, [r2, #4]
 800b826:	e7c7      	b.n	800b7b8 <_free_r+0x28>
 800b828:	b003      	add	sp, #12
 800b82a:	bd30      	pop	{r4, r5, pc}
 800b82c:	20000238 	.word	0x20000238

0800b830 <_malloc_r>:
 800b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b832:	1ccd      	adds	r5, r1, #3
 800b834:	f025 0503 	bic.w	r5, r5, #3
 800b838:	3508      	adds	r5, #8
 800b83a:	2d0c      	cmp	r5, #12
 800b83c:	bf38      	it	cc
 800b83e:	250c      	movcc	r5, #12
 800b840:	2d00      	cmp	r5, #0
 800b842:	4606      	mov	r6, r0
 800b844:	db01      	blt.n	800b84a <_malloc_r+0x1a>
 800b846:	42a9      	cmp	r1, r5
 800b848:	d903      	bls.n	800b852 <_malloc_r+0x22>
 800b84a:	230c      	movs	r3, #12
 800b84c:	6033      	str	r3, [r6, #0]
 800b84e:	2000      	movs	r0, #0
 800b850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b852:	f000 fa0f 	bl	800bc74 <__malloc_lock>
 800b856:	4921      	ldr	r1, [pc, #132]	; (800b8dc <_malloc_r+0xac>)
 800b858:	680a      	ldr	r2, [r1, #0]
 800b85a:	4614      	mov	r4, r2
 800b85c:	b99c      	cbnz	r4, 800b886 <_malloc_r+0x56>
 800b85e:	4f20      	ldr	r7, [pc, #128]	; (800b8e0 <_malloc_r+0xb0>)
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	b923      	cbnz	r3, 800b86e <_malloc_r+0x3e>
 800b864:	4621      	mov	r1, r4
 800b866:	4630      	mov	r0, r6
 800b868:	f000 f998 	bl	800bb9c <_sbrk_r>
 800b86c:	6038      	str	r0, [r7, #0]
 800b86e:	4629      	mov	r1, r5
 800b870:	4630      	mov	r0, r6
 800b872:	f000 f993 	bl	800bb9c <_sbrk_r>
 800b876:	1c43      	adds	r3, r0, #1
 800b878:	d123      	bne.n	800b8c2 <_malloc_r+0x92>
 800b87a:	230c      	movs	r3, #12
 800b87c:	6033      	str	r3, [r6, #0]
 800b87e:	4630      	mov	r0, r6
 800b880:	f000 f9fe 	bl	800bc80 <__malloc_unlock>
 800b884:	e7e3      	b.n	800b84e <_malloc_r+0x1e>
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	1b5b      	subs	r3, r3, r5
 800b88a:	d417      	bmi.n	800b8bc <_malloc_r+0x8c>
 800b88c:	2b0b      	cmp	r3, #11
 800b88e:	d903      	bls.n	800b898 <_malloc_r+0x68>
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	441c      	add	r4, r3
 800b894:	6025      	str	r5, [r4, #0]
 800b896:	e004      	b.n	800b8a2 <_malloc_r+0x72>
 800b898:	6863      	ldr	r3, [r4, #4]
 800b89a:	42a2      	cmp	r2, r4
 800b89c:	bf0c      	ite	eq
 800b89e:	600b      	streq	r3, [r1, #0]
 800b8a0:	6053      	strne	r3, [r2, #4]
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f000 f9ec 	bl	800bc80 <__malloc_unlock>
 800b8a8:	f104 000b 	add.w	r0, r4, #11
 800b8ac:	1d23      	adds	r3, r4, #4
 800b8ae:	f020 0007 	bic.w	r0, r0, #7
 800b8b2:	1ac2      	subs	r2, r0, r3
 800b8b4:	d0cc      	beq.n	800b850 <_malloc_r+0x20>
 800b8b6:	1a1b      	subs	r3, r3, r0
 800b8b8:	50a3      	str	r3, [r4, r2]
 800b8ba:	e7c9      	b.n	800b850 <_malloc_r+0x20>
 800b8bc:	4622      	mov	r2, r4
 800b8be:	6864      	ldr	r4, [r4, #4]
 800b8c0:	e7cc      	b.n	800b85c <_malloc_r+0x2c>
 800b8c2:	1cc4      	adds	r4, r0, #3
 800b8c4:	f024 0403 	bic.w	r4, r4, #3
 800b8c8:	42a0      	cmp	r0, r4
 800b8ca:	d0e3      	beq.n	800b894 <_malloc_r+0x64>
 800b8cc:	1a21      	subs	r1, r4, r0
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f000 f964 	bl	800bb9c <_sbrk_r>
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d1dd      	bne.n	800b894 <_malloc_r+0x64>
 800b8d8:	e7cf      	b.n	800b87a <_malloc_r+0x4a>
 800b8da:	bf00      	nop
 800b8dc:	20000238 	.word	0x20000238
 800b8e0:	2000023c 	.word	0x2000023c

0800b8e4 <__ssputs_r>:
 800b8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e8:	688e      	ldr	r6, [r1, #8]
 800b8ea:	429e      	cmp	r6, r3
 800b8ec:	4682      	mov	sl, r0
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	4690      	mov	r8, r2
 800b8f2:	461f      	mov	r7, r3
 800b8f4:	d838      	bhi.n	800b968 <__ssputs_r+0x84>
 800b8f6:	898a      	ldrh	r2, [r1, #12]
 800b8f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8fc:	d032      	beq.n	800b964 <__ssputs_r+0x80>
 800b8fe:	6825      	ldr	r5, [r4, #0]
 800b900:	6909      	ldr	r1, [r1, #16]
 800b902:	eba5 0901 	sub.w	r9, r5, r1
 800b906:	6965      	ldr	r5, [r4, #20]
 800b908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b90c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b910:	3301      	adds	r3, #1
 800b912:	444b      	add	r3, r9
 800b914:	106d      	asrs	r5, r5, #1
 800b916:	429d      	cmp	r5, r3
 800b918:	bf38      	it	cc
 800b91a:	461d      	movcc	r5, r3
 800b91c:	0553      	lsls	r3, r2, #21
 800b91e:	d531      	bpl.n	800b984 <__ssputs_r+0xa0>
 800b920:	4629      	mov	r1, r5
 800b922:	f7ff ff85 	bl	800b830 <_malloc_r>
 800b926:	4606      	mov	r6, r0
 800b928:	b950      	cbnz	r0, 800b940 <__ssputs_r+0x5c>
 800b92a:	230c      	movs	r3, #12
 800b92c:	f8ca 3000 	str.w	r3, [sl]
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b936:	81a3      	strh	r3, [r4, #12]
 800b938:	f04f 30ff 	mov.w	r0, #4294967295
 800b93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b940:	6921      	ldr	r1, [r4, #16]
 800b942:	464a      	mov	r2, r9
 800b944:	f7ff fb88 	bl	800b058 <memcpy>
 800b948:	89a3      	ldrh	r3, [r4, #12]
 800b94a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b94e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b952:	81a3      	strh	r3, [r4, #12]
 800b954:	6126      	str	r6, [r4, #16]
 800b956:	6165      	str	r5, [r4, #20]
 800b958:	444e      	add	r6, r9
 800b95a:	eba5 0509 	sub.w	r5, r5, r9
 800b95e:	6026      	str	r6, [r4, #0]
 800b960:	60a5      	str	r5, [r4, #8]
 800b962:	463e      	mov	r6, r7
 800b964:	42be      	cmp	r6, r7
 800b966:	d900      	bls.n	800b96a <__ssputs_r+0x86>
 800b968:	463e      	mov	r6, r7
 800b96a:	4632      	mov	r2, r6
 800b96c:	6820      	ldr	r0, [r4, #0]
 800b96e:	4641      	mov	r1, r8
 800b970:	f000 f966 	bl	800bc40 <memmove>
 800b974:	68a3      	ldr	r3, [r4, #8]
 800b976:	6822      	ldr	r2, [r4, #0]
 800b978:	1b9b      	subs	r3, r3, r6
 800b97a:	4432      	add	r2, r6
 800b97c:	60a3      	str	r3, [r4, #8]
 800b97e:	6022      	str	r2, [r4, #0]
 800b980:	2000      	movs	r0, #0
 800b982:	e7db      	b.n	800b93c <__ssputs_r+0x58>
 800b984:	462a      	mov	r2, r5
 800b986:	f000 f981 	bl	800bc8c <_realloc_r>
 800b98a:	4606      	mov	r6, r0
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d1e1      	bne.n	800b954 <__ssputs_r+0x70>
 800b990:	6921      	ldr	r1, [r4, #16]
 800b992:	4650      	mov	r0, sl
 800b994:	f7ff fefc 	bl	800b790 <_free_r>
 800b998:	e7c7      	b.n	800b92a <__ssputs_r+0x46>
	...

0800b99c <_svfiprintf_r>:
 800b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	4698      	mov	r8, r3
 800b9a2:	898b      	ldrh	r3, [r1, #12]
 800b9a4:	061b      	lsls	r3, r3, #24
 800b9a6:	b09d      	sub	sp, #116	; 0x74
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	460d      	mov	r5, r1
 800b9ac:	4614      	mov	r4, r2
 800b9ae:	d50e      	bpl.n	800b9ce <_svfiprintf_r+0x32>
 800b9b0:	690b      	ldr	r3, [r1, #16]
 800b9b2:	b963      	cbnz	r3, 800b9ce <_svfiprintf_r+0x32>
 800b9b4:	2140      	movs	r1, #64	; 0x40
 800b9b6:	f7ff ff3b 	bl	800b830 <_malloc_r>
 800b9ba:	6028      	str	r0, [r5, #0]
 800b9bc:	6128      	str	r0, [r5, #16]
 800b9be:	b920      	cbnz	r0, 800b9ca <_svfiprintf_r+0x2e>
 800b9c0:	230c      	movs	r3, #12
 800b9c2:	603b      	str	r3, [r7, #0]
 800b9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c8:	e0d1      	b.n	800bb6e <_svfiprintf_r+0x1d2>
 800b9ca:	2340      	movs	r3, #64	; 0x40
 800b9cc:	616b      	str	r3, [r5, #20]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d2:	2320      	movs	r3, #32
 800b9d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9dc:	2330      	movs	r3, #48	; 0x30
 800b9de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb88 <_svfiprintf_r+0x1ec>
 800b9e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9e6:	f04f 0901 	mov.w	r9, #1
 800b9ea:	4623      	mov	r3, r4
 800b9ec:	469a      	mov	sl, r3
 800b9ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9f2:	b10a      	cbz	r2, 800b9f8 <_svfiprintf_r+0x5c>
 800b9f4:	2a25      	cmp	r2, #37	; 0x25
 800b9f6:	d1f9      	bne.n	800b9ec <_svfiprintf_r+0x50>
 800b9f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b9fc:	d00b      	beq.n	800ba16 <_svfiprintf_r+0x7a>
 800b9fe:	465b      	mov	r3, fp
 800ba00:	4622      	mov	r2, r4
 800ba02:	4629      	mov	r1, r5
 800ba04:	4638      	mov	r0, r7
 800ba06:	f7ff ff6d 	bl	800b8e4 <__ssputs_r>
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	f000 80aa 	beq.w	800bb64 <_svfiprintf_r+0x1c8>
 800ba10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba12:	445a      	add	r2, fp
 800ba14:	9209      	str	r2, [sp, #36]	; 0x24
 800ba16:	f89a 3000 	ldrb.w	r3, [sl]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 80a2 	beq.w	800bb64 <_svfiprintf_r+0x1c8>
 800ba20:	2300      	movs	r3, #0
 800ba22:	f04f 32ff 	mov.w	r2, #4294967295
 800ba26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba2a:	f10a 0a01 	add.w	sl, sl, #1
 800ba2e:	9304      	str	r3, [sp, #16]
 800ba30:	9307      	str	r3, [sp, #28]
 800ba32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba36:	931a      	str	r3, [sp, #104]	; 0x68
 800ba38:	4654      	mov	r4, sl
 800ba3a:	2205      	movs	r2, #5
 800ba3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba40:	4851      	ldr	r0, [pc, #324]	; (800bb88 <_svfiprintf_r+0x1ec>)
 800ba42:	f7f4 fbdd 	bl	8000200 <memchr>
 800ba46:	9a04      	ldr	r2, [sp, #16]
 800ba48:	b9d8      	cbnz	r0, 800ba82 <_svfiprintf_r+0xe6>
 800ba4a:	06d0      	lsls	r0, r2, #27
 800ba4c:	bf44      	itt	mi
 800ba4e:	2320      	movmi	r3, #32
 800ba50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba54:	0711      	lsls	r1, r2, #28
 800ba56:	bf44      	itt	mi
 800ba58:	232b      	movmi	r3, #43	; 0x2b
 800ba5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba62:	2b2a      	cmp	r3, #42	; 0x2a
 800ba64:	d015      	beq.n	800ba92 <_svfiprintf_r+0xf6>
 800ba66:	9a07      	ldr	r2, [sp, #28]
 800ba68:	4654      	mov	r4, sl
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	f04f 0c0a 	mov.w	ip, #10
 800ba70:	4621      	mov	r1, r4
 800ba72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba76:	3b30      	subs	r3, #48	; 0x30
 800ba78:	2b09      	cmp	r3, #9
 800ba7a:	d94e      	bls.n	800bb1a <_svfiprintf_r+0x17e>
 800ba7c:	b1b0      	cbz	r0, 800baac <_svfiprintf_r+0x110>
 800ba7e:	9207      	str	r2, [sp, #28]
 800ba80:	e014      	b.n	800baac <_svfiprintf_r+0x110>
 800ba82:	eba0 0308 	sub.w	r3, r0, r8
 800ba86:	fa09 f303 	lsl.w	r3, r9, r3
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	9304      	str	r3, [sp, #16]
 800ba8e:	46a2      	mov	sl, r4
 800ba90:	e7d2      	b.n	800ba38 <_svfiprintf_r+0x9c>
 800ba92:	9b03      	ldr	r3, [sp, #12]
 800ba94:	1d19      	adds	r1, r3, #4
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	9103      	str	r1, [sp, #12]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	bfbb      	ittet	lt
 800ba9e:	425b      	neglt	r3, r3
 800baa0:	f042 0202 	orrlt.w	r2, r2, #2
 800baa4:	9307      	strge	r3, [sp, #28]
 800baa6:	9307      	strlt	r3, [sp, #28]
 800baa8:	bfb8      	it	lt
 800baaa:	9204      	strlt	r2, [sp, #16]
 800baac:	7823      	ldrb	r3, [r4, #0]
 800baae:	2b2e      	cmp	r3, #46	; 0x2e
 800bab0:	d10c      	bne.n	800bacc <_svfiprintf_r+0x130>
 800bab2:	7863      	ldrb	r3, [r4, #1]
 800bab4:	2b2a      	cmp	r3, #42	; 0x2a
 800bab6:	d135      	bne.n	800bb24 <_svfiprintf_r+0x188>
 800bab8:	9b03      	ldr	r3, [sp, #12]
 800baba:	1d1a      	adds	r2, r3, #4
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	9203      	str	r2, [sp, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	bfb8      	it	lt
 800bac4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bac8:	3402      	adds	r4, #2
 800baca:	9305      	str	r3, [sp, #20]
 800bacc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb98 <_svfiprintf_r+0x1fc>
 800bad0:	7821      	ldrb	r1, [r4, #0]
 800bad2:	2203      	movs	r2, #3
 800bad4:	4650      	mov	r0, sl
 800bad6:	f7f4 fb93 	bl	8000200 <memchr>
 800bada:	b140      	cbz	r0, 800baee <_svfiprintf_r+0x152>
 800badc:	2340      	movs	r3, #64	; 0x40
 800bade:	eba0 000a 	sub.w	r0, r0, sl
 800bae2:	fa03 f000 	lsl.w	r0, r3, r0
 800bae6:	9b04      	ldr	r3, [sp, #16]
 800bae8:	4303      	orrs	r3, r0
 800baea:	3401      	adds	r4, #1
 800baec:	9304      	str	r3, [sp, #16]
 800baee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf2:	4826      	ldr	r0, [pc, #152]	; (800bb8c <_svfiprintf_r+0x1f0>)
 800baf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baf8:	2206      	movs	r2, #6
 800bafa:	f7f4 fb81 	bl	8000200 <memchr>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d038      	beq.n	800bb74 <_svfiprintf_r+0x1d8>
 800bb02:	4b23      	ldr	r3, [pc, #140]	; (800bb90 <_svfiprintf_r+0x1f4>)
 800bb04:	bb1b      	cbnz	r3, 800bb4e <_svfiprintf_r+0x1b2>
 800bb06:	9b03      	ldr	r3, [sp, #12]
 800bb08:	3307      	adds	r3, #7
 800bb0a:	f023 0307 	bic.w	r3, r3, #7
 800bb0e:	3308      	adds	r3, #8
 800bb10:	9303      	str	r3, [sp, #12]
 800bb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb14:	4433      	add	r3, r6
 800bb16:	9309      	str	r3, [sp, #36]	; 0x24
 800bb18:	e767      	b.n	800b9ea <_svfiprintf_r+0x4e>
 800bb1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb1e:	460c      	mov	r4, r1
 800bb20:	2001      	movs	r0, #1
 800bb22:	e7a5      	b.n	800ba70 <_svfiprintf_r+0xd4>
 800bb24:	2300      	movs	r3, #0
 800bb26:	3401      	adds	r4, #1
 800bb28:	9305      	str	r3, [sp, #20]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	f04f 0c0a 	mov.w	ip, #10
 800bb30:	4620      	mov	r0, r4
 800bb32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb36:	3a30      	subs	r2, #48	; 0x30
 800bb38:	2a09      	cmp	r2, #9
 800bb3a:	d903      	bls.n	800bb44 <_svfiprintf_r+0x1a8>
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d0c5      	beq.n	800bacc <_svfiprintf_r+0x130>
 800bb40:	9105      	str	r1, [sp, #20]
 800bb42:	e7c3      	b.n	800bacc <_svfiprintf_r+0x130>
 800bb44:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb48:	4604      	mov	r4, r0
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e7f0      	b.n	800bb30 <_svfiprintf_r+0x194>
 800bb4e:	ab03      	add	r3, sp, #12
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	462a      	mov	r2, r5
 800bb54:	4b0f      	ldr	r3, [pc, #60]	; (800bb94 <_svfiprintf_r+0x1f8>)
 800bb56:	a904      	add	r1, sp, #16
 800bb58:	4638      	mov	r0, r7
 800bb5a:	f7fd ffc1 	bl	8009ae0 <_printf_float>
 800bb5e:	1c42      	adds	r2, r0, #1
 800bb60:	4606      	mov	r6, r0
 800bb62:	d1d6      	bne.n	800bb12 <_svfiprintf_r+0x176>
 800bb64:	89ab      	ldrh	r3, [r5, #12]
 800bb66:	065b      	lsls	r3, r3, #25
 800bb68:	f53f af2c 	bmi.w	800b9c4 <_svfiprintf_r+0x28>
 800bb6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb6e:	b01d      	add	sp, #116	; 0x74
 800bb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb74:	ab03      	add	r3, sp, #12
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	462a      	mov	r2, r5
 800bb7a:	4b06      	ldr	r3, [pc, #24]	; (800bb94 <_svfiprintf_r+0x1f8>)
 800bb7c:	a904      	add	r1, sp, #16
 800bb7e:	4638      	mov	r0, r7
 800bb80:	f7fe fa52 	bl	800a028 <_printf_i>
 800bb84:	e7eb      	b.n	800bb5e <_svfiprintf_r+0x1c2>
 800bb86:	bf00      	nop
 800bb88:	0800cf3c 	.word	0x0800cf3c
 800bb8c:	0800cf46 	.word	0x0800cf46
 800bb90:	08009ae1 	.word	0x08009ae1
 800bb94:	0800b8e5 	.word	0x0800b8e5
 800bb98:	0800cf42 	.word	0x0800cf42

0800bb9c <_sbrk_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4d06      	ldr	r5, [pc, #24]	; (800bbb8 <_sbrk_r+0x1c>)
 800bba0:	2300      	movs	r3, #0
 800bba2:	4604      	mov	r4, r0
 800bba4:	4608      	mov	r0, r1
 800bba6:	602b      	str	r3, [r5, #0]
 800bba8:	f7f7 fc8c 	bl	80034c4 <_sbrk>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_sbrk_r+0x1a>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_sbrk_r+0x1a>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	20000e84 	.word	0x20000e84

0800bbbc <__assert_func>:
 800bbbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbbe:	4614      	mov	r4, r2
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <__assert_func+0x2c>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4605      	mov	r5, r0
 800bbc8:	68d8      	ldr	r0, [r3, #12]
 800bbca:	b14c      	cbz	r4, 800bbe0 <__assert_func+0x24>
 800bbcc:	4b07      	ldr	r3, [pc, #28]	; (800bbec <__assert_func+0x30>)
 800bbce:	9100      	str	r1, [sp, #0]
 800bbd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbd4:	4906      	ldr	r1, [pc, #24]	; (800bbf0 <__assert_func+0x34>)
 800bbd6:	462b      	mov	r3, r5
 800bbd8:	f000 f80e 	bl	800bbf8 <fiprintf>
 800bbdc:	f000 faa4 	bl	800c128 <abort>
 800bbe0:	4b04      	ldr	r3, [pc, #16]	; (800bbf4 <__assert_func+0x38>)
 800bbe2:	461c      	mov	r4, r3
 800bbe4:	e7f3      	b.n	800bbce <__assert_func+0x12>
 800bbe6:	bf00      	nop
 800bbe8:	2000001c 	.word	0x2000001c
 800bbec:	0800cf4d 	.word	0x0800cf4d
 800bbf0:	0800cf5a 	.word	0x0800cf5a
 800bbf4:	0800cf88 	.word	0x0800cf88

0800bbf8 <fiprintf>:
 800bbf8:	b40e      	push	{r1, r2, r3}
 800bbfa:	b503      	push	{r0, r1, lr}
 800bbfc:	4601      	mov	r1, r0
 800bbfe:	ab03      	add	r3, sp, #12
 800bc00:	4805      	ldr	r0, [pc, #20]	; (800bc18 <fiprintf+0x20>)
 800bc02:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc06:	6800      	ldr	r0, [r0, #0]
 800bc08:	9301      	str	r3, [sp, #4]
 800bc0a:	f000 f88f 	bl	800bd2c <_vfiprintf_r>
 800bc0e:	b002      	add	sp, #8
 800bc10:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc14:	b003      	add	sp, #12
 800bc16:	4770      	bx	lr
 800bc18:	2000001c 	.word	0x2000001c

0800bc1c <__ascii_mbtowc>:
 800bc1c:	b082      	sub	sp, #8
 800bc1e:	b901      	cbnz	r1, 800bc22 <__ascii_mbtowc+0x6>
 800bc20:	a901      	add	r1, sp, #4
 800bc22:	b142      	cbz	r2, 800bc36 <__ascii_mbtowc+0x1a>
 800bc24:	b14b      	cbz	r3, 800bc3a <__ascii_mbtowc+0x1e>
 800bc26:	7813      	ldrb	r3, [r2, #0]
 800bc28:	600b      	str	r3, [r1, #0]
 800bc2a:	7812      	ldrb	r2, [r2, #0]
 800bc2c:	1e10      	subs	r0, r2, #0
 800bc2e:	bf18      	it	ne
 800bc30:	2001      	movne	r0, #1
 800bc32:	b002      	add	sp, #8
 800bc34:	4770      	bx	lr
 800bc36:	4610      	mov	r0, r2
 800bc38:	e7fb      	b.n	800bc32 <__ascii_mbtowc+0x16>
 800bc3a:	f06f 0001 	mvn.w	r0, #1
 800bc3e:	e7f8      	b.n	800bc32 <__ascii_mbtowc+0x16>

0800bc40 <memmove>:
 800bc40:	4288      	cmp	r0, r1
 800bc42:	b510      	push	{r4, lr}
 800bc44:	eb01 0402 	add.w	r4, r1, r2
 800bc48:	d902      	bls.n	800bc50 <memmove+0x10>
 800bc4a:	4284      	cmp	r4, r0
 800bc4c:	4623      	mov	r3, r4
 800bc4e:	d807      	bhi.n	800bc60 <memmove+0x20>
 800bc50:	1e43      	subs	r3, r0, #1
 800bc52:	42a1      	cmp	r1, r4
 800bc54:	d008      	beq.n	800bc68 <memmove+0x28>
 800bc56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc5e:	e7f8      	b.n	800bc52 <memmove+0x12>
 800bc60:	4402      	add	r2, r0
 800bc62:	4601      	mov	r1, r0
 800bc64:	428a      	cmp	r2, r1
 800bc66:	d100      	bne.n	800bc6a <memmove+0x2a>
 800bc68:	bd10      	pop	{r4, pc}
 800bc6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc72:	e7f7      	b.n	800bc64 <memmove+0x24>

0800bc74 <__malloc_lock>:
 800bc74:	4801      	ldr	r0, [pc, #4]	; (800bc7c <__malloc_lock+0x8>)
 800bc76:	f000 bc17 	b.w	800c4a8 <__retarget_lock_acquire_recursive>
 800bc7a:	bf00      	nop
 800bc7c:	20000e8c 	.word	0x20000e8c

0800bc80 <__malloc_unlock>:
 800bc80:	4801      	ldr	r0, [pc, #4]	; (800bc88 <__malloc_unlock+0x8>)
 800bc82:	f000 bc12 	b.w	800c4aa <__retarget_lock_release_recursive>
 800bc86:	bf00      	nop
 800bc88:	20000e8c 	.word	0x20000e8c

0800bc8c <_realloc_r>:
 800bc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8e:	4607      	mov	r7, r0
 800bc90:	4614      	mov	r4, r2
 800bc92:	460e      	mov	r6, r1
 800bc94:	b921      	cbnz	r1, 800bca0 <_realloc_r+0x14>
 800bc96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	f7ff bdc8 	b.w	800b830 <_malloc_r>
 800bca0:	b922      	cbnz	r2, 800bcac <_realloc_r+0x20>
 800bca2:	f7ff fd75 	bl	800b790 <_free_r>
 800bca6:	4625      	mov	r5, r4
 800bca8:	4628      	mov	r0, r5
 800bcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcac:	f000 fc62 	bl	800c574 <_malloc_usable_size_r>
 800bcb0:	42a0      	cmp	r0, r4
 800bcb2:	d20f      	bcs.n	800bcd4 <_realloc_r+0x48>
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	f7ff fdba 	bl	800b830 <_malloc_r>
 800bcbc:	4605      	mov	r5, r0
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d0f2      	beq.n	800bca8 <_realloc_r+0x1c>
 800bcc2:	4631      	mov	r1, r6
 800bcc4:	4622      	mov	r2, r4
 800bcc6:	f7ff f9c7 	bl	800b058 <memcpy>
 800bcca:	4631      	mov	r1, r6
 800bccc:	4638      	mov	r0, r7
 800bcce:	f7ff fd5f 	bl	800b790 <_free_r>
 800bcd2:	e7e9      	b.n	800bca8 <_realloc_r+0x1c>
 800bcd4:	4635      	mov	r5, r6
 800bcd6:	e7e7      	b.n	800bca8 <_realloc_r+0x1c>

0800bcd8 <__sfputc_r>:
 800bcd8:	6893      	ldr	r3, [r2, #8]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	b410      	push	{r4}
 800bce0:	6093      	str	r3, [r2, #8]
 800bce2:	da08      	bge.n	800bcf6 <__sfputc_r+0x1e>
 800bce4:	6994      	ldr	r4, [r2, #24]
 800bce6:	42a3      	cmp	r3, r4
 800bce8:	db01      	blt.n	800bcee <__sfputc_r+0x16>
 800bcea:	290a      	cmp	r1, #10
 800bcec:	d103      	bne.n	800bcf6 <__sfputc_r+0x1e>
 800bcee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcf2:	f000 b94b 	b.w	800bf8c <__swbuf_r>
 800bcf6:	6813      	ldr	r3, [r2, #0]
 800bcf8:	1c58      	adds	r0, r3, #1
 800bcfa:	6010      	str	r0, [r2, #0]
 800bcfc:	7019      	strb	r1, [r3, #0]
 800bcfe:	4608      	mov	r0, r1
 800bd00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <__sfputs_r>:
 800bd06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd08:	4606      	mov	r6, r0
 800bd0a:	460f      	mov	r7, r1
 800bd0c:	4614      	mov	r4, r2
 800bd0e:	18d5      	adds	r5, r2, r3
 800bd10:	42ac      	cmp	r4, r5
 800bd12:	d101      	bne.n	800bd18 <__sfputs_r+0x12>
 800bd14:	2000      	movs	r0, #0
 800bd16:	e007      	b.n	800bd28 <__sfputs_r+0x22>
 800bd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd1c:	463a      	mov	r2, r7
 800bd1e:	4630      	mov	r0, r6
 800bd20:	f7ff ffda 	bl	800bcd8 <__sfputc_r>
 800bd24:	1c43      	adds	r3, r0, #1
 800bd26:	d1f3      	bne.n	800bd10 <__sfputs_r+0xa>
 800bd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd2c <_vfiprintf_r>:
 800bd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd30:	460d      	mov	r5, r1
 800bd32:	b09d      	sub	sp, #116	; 0x74
 800bd34:	4614      	mov	r4, r2
 800bd36:	4698      	mov	r8, r3
 800bd38:	4606      	mov	r6, r0
 800bd3a:	b118      	cbz	r0, 800bd44 <_vfiprintf_r+0x18>
 800bd3c:	6983      	ldr	r3, [r0, #24]
 800bd3e:	b90b      	cbnz	r3, 800bd44 <_vfiprintf_r+0x18>
 800bd40:	f000 fb14 	bl	800c36c <__sinit>
 800bd44:	4b89      	ldr	r3, [pc, #548]	; (800bf6c <_vfiprintf_r+0x240>)
 800bd46:	429d      	cmp	r5, r3
 800bd48:	d11b      	bne.n	800bd82 <_vfiprintf_r+0x56>
 800bd4a:	6875      	ldr	r5, [r6, #4]
 800bd4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd4e:	07d9      	lsls	r1, r3, #31
 800bd50:	d405      	bmi.n	800bd5e <_vfiprintf_r+0x32>
 800bd52:	89ab      	ldrh	r3, [r5, #12]
 800bd54:	059a      	lsls	r2, r3, #22
 800bd56:	d402      	bmi.n	800bd5e <_vfiprintf_r+0x32>
 800bd58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd5a:	f000 fba5 	bl	800c4a8 <__retarget_lock_acquire_recursive>
 800bd5e:	89ab      	ldrh	r3, [r5, #12]
 800bd60:	071b      	lsls	r3, r3, #28
 800bd62:	d501      	bpl.n	800bd68 <_vfiprintf_r+0x3c>
 800bd64:	692b      	ldr	r3, [r5, #16]
 800bd66:	b9eb      	cbnz	r3, 800bda4 <_vfiprintf_r+0x78>
 800bd68:	4629      	mov	r1, r5
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f000 f96e 	bl	800c04c <__swsetup_r>
 800bd70:	b1c0      	cbz	r0, 800bda4 <_vfiprintf_r+0x78>
 800bd72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd74:	07dc      	lsls	r4, r3, #31
 800bd76:	d50e      	bpl.n	800bd96 <_vfiprintf_r+0x6a>
 800bd78:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7c:	b01d      	add	sp, #116	; 0x74
 800bd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd82:	4b7b      	ldr	r3, [pc, #492]	; (800bf70 <_vfiprintf_r+0x244>)
 800bd84:	429d      	cmp	r5, r3
 800bd86:	d101      	bne.n	800bd8c <_vfiprintf_r+0x60>
 800bd88:	68b5      	ldr	r5, [r6, #8]
 800bd8a:	e7df      	b.n	800bd4c <_vfiprintf_r+0x20>
 800bd8c:	4b79      	ldr	r3, [pc, #484]	; (800bf74 <_vfiprintf_r+0x248>)
 800bd8e:	429d      	cmp	r5, r3
 800bd90:	bf08      	it	eq
 800bd92:	68f5      	ldreq	r5, [r6, #12]
 800bd94:	e7da      	b.n	800bd4c <_vfiprintf_r+0x20>
 800bd96:	89ab      	ldrh	r3, [r5, #12]
 800bd98:	0598      	lsls	r0, r3, #22
 800bd9a:	d4ed      	bmi.n	800bd78 <_vfiprintf_r+0x4c>
 800bd9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd9e:	f000 fb84 	bl	800c4aa <__retarget_lock_release_recursive>
 800bda2:	e7e9      	b.n	800bd78 <_vfiprintf_r+0x4c>
 800bda4:	2300      	movs	r3, #0
 800bda6:	9309      	str	r3, [sp, #36]	; 0x24
 800bda8:	2320      	movs	r3, #32
 800bdaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdb2:	2330      	movs	r3, #48	; 0x30
 800bdb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf78 <_vfiprintf_r+0x24c>
 800bdb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdbc:	f04f 0901 	mov.w	r9, #1
 800bdc0:	4623      	mov	r3, r4
 800bdc2:	469a      	mov	sl, r3
 800bdc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdc8:	b10a      	cbz	r2, 800bdce <_vfiprintf_r+0xa2>
 800bdca:	2a25      	cmp	r2, #37	; 0x25
 800bdcc:	d1f9      	bne.n	800bdc2 <_vfiprintf_r+0x96>
 800bdce:	ebba 0b04 	subs.w	fp, sl, r4
 800bdd2:	d00b      	beq.n	800bdec <_vfiprintf_r+0xc0>
 800bdd4:	465b      	mov	r3, fp
 800bdd6:	4622      	mov	r2, r4
 800bdd8:	4629      	mov	r1, r5
 800bdda:	4630      	mov	r0, r6
 800bddc:	f7ff ff93 	bl	800bd06 <__sfputs_r>
 800bde0:	3001      	adds	r0, #1
 800bde2:	f000 80aa 	beq.w	800bf3a <_vfiprintf_r+0x20e>
 800bde6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bde8:	445a      	add	r2, fp
 800bdea:	9209      	str	r2, [sp, #36]	; 0x24
 800bdec:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 80a2 	beq.w	800bf3a <_vfiprintf_r+0x20e>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be00:	f10a 0a01 	add.w	sl, sl, #1
 800be04:	9304      	str	r3, [sp, #16]
 800be06:	9307      	str	r3, [sp, #28]
 800be08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be0c:	931a      	str	r3, [sp, #104]	; 0x68
 800be0e:	4654      	mov	r4, sl
 800be10:	2205      	movs	r2, #5
 800be12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be16:	4858      	ldr	r0, [pc, #352]	; (800bf78 <_vfiprintf_r+0x24c>)
 800be18:	f7f4 f9f2 	bl	8000200 <memchr>
 800be1c:	9a04      	ldr	r2, [sp, #16]
 800be1e:	b9d8      	cbnz	r0, 800be58 <_vfiprintf_r+0x12c>
 800be20:	06d1      	lsls	r1, r2, #27
 800be22:	bf44      	itt	mi
 800be24:	2320      	movmi	r3, #32
 800be26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be2a:	0713      	lsls	r3, r2, #28
 800be2c:	bf44      	itt	mi
 800be2e:	232b      	movmi	r3, #43	; 0x2b
 800be30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be34:	f89a 3000 	ldrb.w	r3, [sl]
 800be38:	2b2a      	cmp	r3, #42	; 0x2a
 800be3a:	d015      	beq.n	800be68 <_vfiprintf_r+0x13c>
 800be3c:	9a07      	ldr	r2, [sp, #28]
 800be3e:	4654      	mov	r4, sl
 800be40:	2000      	movs	r0, #0
 800be42:	f04f 0c0a 	mov.w	ip, #10
 800be46:	4621      	mov	r1, r4
 800be48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be4c:	3b30      	subs	r3, #48	; 0x30
 800be4e:	2b09      	cmp	r3, #9
 800be50:	d94e      	bls.n	800bef0 <_vfiprintf_r+0x1c4>
 800be52:	b1b0      	cbz	r0, 800be82 <_vfiprintf_r+0x156>
 800be54:	9207      	str	r2, [sp, #28]
 800be56:	e014      	b.n	800be82 <_vfiprintf_r+0x156>
 800be58:	eba0 0308 	sub.w	r3, r0, r8
 800be5c:	fa09 f303 	lsl.w	r3, r9, r3
 800be60:	4313      	orrs	r3, r2
 800be62:	9304      	str	r3, [sp, #16]
 800be64:	46a2      	mov	sl, r4
 800be66:	e7d2      	b.n	800be0e <_vfiprintf_r+0xe2>
 800be68:	9b03      	ldr	r3, [sp, #12]
 800be6a:	1d19      	adds	r1, r3, #4
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	9103      	str	r1, [sp, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	bfbb      	ittet	lt
 800be74:	425b      	neglt	r3, r3
 800be76:	f042 0202 	orrlt.w	r2, r2, #2
 800be7a:	9307      	strge	r3, [sp, #28]
 800be7c:	9307      	strlt	r3, [sp, #28]
 800be7e:	bfb8      	it	lt
 800be80:	9204      	strlt	r2, [sp, #16]
 800be82:	7823      	ldrb	r3, [r4, #0]
 800be84:	2b2e      	cmp	r3, #46	; 0x2e
 800be86:	d10c      	bne.n	800bea2 <_vfiprintf_r+0x176>
 800be88:	7863      	ldrb	r3, [r4, #1]
 800be8a:	2b2a      	cmp	r3, #42	; 0x2a
 800be8c:	d135      	bne.n	800befa <_vfiprintf_r+0x1ce>
 800be8e:	9b03      	ldr	r3, [sp, #12]
 800be90:	1d1a      	adds	r2, r3, #4
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	9203      	str	r2, [sp, #12]
 800be96:	2b00      	cmp	r3, #0
 800be98:	bfb8      	it	lt
 800be9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800be9e:	3402      	adds	r4, #2
 800bea0:	9305      	str	r3, [sp, #20]
 800bea2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf88 <_vfiprintf_r+0x25c>
 800bea6:	7821      	ldrb	r1, [r4, #0]
 800bea8:	2203      	movs	r2, #3
 800beaa:	4650      	mov	r0, sl
 800beac:	f7f4 f9a8 	bl	8000200 <memchr>
 800beb0:	b140      	cbz	r0, 800bec4 <_vfiprintf_r+0x198>
 800beb2:	2340      	movs	r3, #64	; 0x40
 800beb4:	eba0 000a 	sub.w	r0, r0, sl
 800beb8:	fa03 f000 	lsl.w	r0, r3, r0
 800bebc:	9b04      	ldr	r3, [sp, #16]
 800bebe:	4303      	orrs	r3, r0
 800bec0:	3401      	adds	r4, #1
 800bec2:	9304      	str	r3, [sp, #16]
 800bec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bec8:	482c      	ldr	r0, [pc, #176]	; (800bf7c <_vfiprintf_r+0x250>)
 800beca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bece:	2206      	movs	r2, #6
 800bed0:	f7f4 f996 	bl	8000200 <memchr>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d03f      	beq.n	800bf58 <_vfiprintf_r+0x22c>
 800bed8:	4b29      	ldr	r3, [pc, #164]	; (800bf80 <_vfiprintf_r+0x254>)
 800beda:	bb1b      	cbnz	r3, 800bf24 <_vfiprintf_r+0x1f8>
 800bedc:	9b03      	ldr	r3, [sp, #12]
 800bede:	3307      	adds	r3, #7
 800bee0:	f023 0307 	bic.w	r3, r3, #7
 800bee4:	3308      	adds	r3, #8
 800bee6:	9303      	str	r3, [sp, #12]
 800bee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beea:	443b      	add	r3, r7
 800beec:	9309      	str	r3, [sp, #36]	; 0x24
 800beee:	e767      	b.n	800bdc0 <_vfiprintf_r+0x94>
 800bef0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bef4:	460c      	mov	r4, r1
 800bef6:	2001      	movs	r0, #1
 800bef8:	e7a5      	b.n	800be46 <_vfiprintf_r+0x11a>
 800befa:	2300      	movs	r3, #0
 800befc:	3401      	adds	r4, #1
 800befe:	9305      	str	r3, [sp, #20]
 800bf00:	4619      	mov	r1, r3
 800bf02:	f04f 0c0a 	mov.w	ip, #10
 800bf06:	4620      	mov	r0, r4
 800bf08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf0c:	3a30      	subs	r2, #48	; 0x30
 800bf0e:	2a09      	cmp	r2, #9
 800bf10:	d903      	bls.n	800bf1a <_vfiprintf_r+0x1ee>
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d0c5      	beq.n	800bea2 <_vfiprintf_r+0x176>
 800bf16:	9105      	str	r1, [sp, #20]
 800bf18:	e7c3      	b.n	800bea2 <_vfiprintf_r+0x176>
 800bf1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf1e:	4604      	mov	r4, r0
 800bf20:	2301      	movs	r3, #1
 800bf22:	e7f0      	b.n	800bf06 <_vfiprintf_r+0x1da>
 800bf24:	ab03      	add	r3, sp, #12
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	462a      	mov	r2, r5
 800bf2a:	4b16      	ldr	r3, [pc, #88]	; (800bf84 <_vfiprintf_r+0x258>)
 800bf2c:	a904      	add	r1, sp, #16
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f7fd fdd6 	bl	8009ae0 <_printf_float>
 800bf34:	4607      	mov	r7, r0
 800bf36:	1c78      	adds	r0, r7, #1
 800bf38:	d1d6      	bne.n	800bee8 <_vfiprintf_r+0x1bc>
 800bf3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf3c:	07d9      	lsls	r1, r3, #31
 800bf3e:	d405      	bmi.n	800bf4c <_vfiprintf_r+0x220>
 800bf40:	89ab      	ldrh	r3, [r5, #12]
 800bf42:	059a      	lsls	r2, r3, #22
 800bf44:	d402      	bmi.n	800bf4c <_vfiprintf_r+0x220>
 800bf46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf48:	f000 faaf 	bl	800c4aa <__retarget_lock_release_recursive>
 800bf4c:	89ab      	ldrh	r3, [r5, #12]
 800bf4e:	065b      	lsls	r3, r3, #25
 800bf50:	f53f af12 	bmi.w	800bd78 <_vfiprintf_r+0x4c>
 800bf54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf56:	e711      	b.n	800bd7c <_vfiprintf_r+0x50>
 800bf58:	ab03      	add	r3, sp, #12
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	462a      	mov	r2, r5
 800bf5e:	4b09      	ldr	r3, [pc, #36]	; (800bf84 <_vfiprintf_r+0x258>)
 800bf60:	a904      	add	r1, sp, #16
 800bf62:	4630      	mov	r0, r6
 800bf64:	f7fe f860 	bl	800a028 <_printf_i>
 800bf68:	e7e4      	b.n	800bf34 <_vfiprintf_r+0x208>
 800bf6a:	bf00      	nop
 800bf6c:	0800d0b4 	.word	0x0800d0b4
 800bf70:	0800d0d4 	.word	0x0800d0d4
 800bf74:	0800d094 	.word	0x0800d094
 800bf78:	0800cf3c 	.word	0x0800cf3c
 800bf7c:	0800cf46 	.word	0x0800cf46
 800bf80:	08009ae1 	.word	0x08009ae1
 800bf84:	0800bd07 	.word	0x0800bd07
 800bf88:	0800cf42 	.word	0x0800cf42

0800bf8c <__swbuf_r>:
 800bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8e:	460e      	mov	r6, r1
 800bf90:	4614      	mov	r4, r2
 800bf92:	4605      	mov	r5, r0
 800bf94:	b118      	cbz	r0, 800bf9e <__swbuf_r+0x12>
 800bf96:	6983      	ldr	r3, [r0, #24]
 800bf98:	b90b      	cbnz	r3, 800bf9e <__swbuf_r+0x12>
 800bf9a:	f000 f9e7 	bl	800c36c <__sinit>
 800bf9e:	4b21      	ldr	r3, [pc, #132]	; (800c024 <__swbuf_r+0x98>)
 800bfa0:	429c      	cmp	r4, r3
 800bfa2:	d12b      	bne.n	800bffc <__swbuf_r+0x70>
 800bfa4:	686c      	ldr	r4, [r5, #4]
 800bfa6:	69a3      	ldr	r3, [r4, #24]
 800bfa8:	60a3      	str	r3, [r4, #8]
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	071a      	lsls	r2, r3, #28
 800bfae:	d52f      	bpl.n	800c010 <__swbuf_r+0x84>
 800bfb0:	6923      	ldr	r3, [r4, #16]
 800bfb2:	b36b      	cbz	r3, 800c010 <__swbuf_r+0x84>
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	6820      	ldr	r0, [r4, #0]
 800bfb8:	1ac0      	subs	r0, r0, r3
 800bfba:	6963      	ldr	r3, [r4, #20]
 800bfbc:	b2f6      	uxtb	r6, r6
 800bfbe:	4283      	cmp	r3, r0
 800bfc0:	4637      	mov	r7, r6
 800bfc2:	dc04      	bgt.n	800bfce <__swbuf_r+0x42>
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f000 f93c 	bl	800c244 <_fflush_r>
 800bfcc:	bb30      	cbnz	r0, 800c01c <__swbuf_r+0x90>
 800bfce:	68a3      	ldr	r3, [r4, #8]
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	60a3      	str	r3, [r4, #8]
 800bfd4:	6823      	ldr	r3, [r4, #0]
 800bfd6:	1c5a      	adds	r2, r3, #1
 800bfd8:	6022      	str	r2, [r4, #0]
 800bfda:	701e      	strb	r6, [r3, #0]
 800bfdc:	6963      	ldr	r3, [r4, #20]
 800bfde:	3001      	adds	r0, #1
 800bfe0:	4283      	cmp	r3, r0
 800bfe2:	d004      	beq.n	800bfee <__swbuf_r+0x62>
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	07db      	lsls	r3, r3, #31
 800bfe8:	d506      	bpl.n	800bff8 <__swbuf_r+0x6c>
 800bfea:	2e0a      	cmp	r6, #10
 800bfec:	d104      	bne.n	800bff8 <__swbuf_r+0x6c>
 800bfee:	4621      	mov	r1, r4
 800bff0:	4628      	mov	r0, r5
 800bff2:	f000 f927 	bl	800c244 <_fflush_r>
 800bff6:	b988      	cbnz	r0, 800c01c <__swbuf_r+0x90>
 800bff8:	4638      	mov	r0, r7
 800bffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bffc:	4b0a      	ldr	r3, [pc, #40]	; (800c028 <__swbuf_r+0x9c>)
 800bffe:	429c      	cmp	r4, r3
 800c000:	d101      	bne.n	800c006 <__swbuf_r+0x7a>
 800c002:	68ac      	ldr	r4, [r5, #8]
 800c004:	e7cf      	b.n	800bfa6 <__swbuf_r+0x1a>
 800c006:	4b09      	ldr	r3, [pc, #36]	; (800c02c <__swbuf_r+0xa0>)
 800c008:	429c      	cmp	r4, r3
 800c00a:	bf08      	it	eq
 800c00c:	68ec      	ldreq	r4, [r5, #12]
 800c00e:	e7ca      	b.n	800bfa6 <__swbuf_r+0x1a>
 800c010:	4621      	mov	r1, r4
 800c012:	4628      	mov	r0, r5
 800c014:	f000 f81a 	bl	800c04c <__swsetup_r>
 800c018:	2800      	cmp	r0, #0
 800c01a:	d0cb      	beq.n	800bfb4 <__swbuf_r+0x28>
 800c01c:	f04f 37ff 	mov.w	r7, #4294967295
 800c020:	e7ea      	b.n	800bff8 <__swbuf_r+0x6c>
 800c022:	bf00      	nop
 800c024:	0800d0b4 	.word	0x0800d0b4
 800c028:	0800d0d4 	.word	0x0800d0d4
 800c02c:	0800d094 	.word	0x0800d094

0800c030 <__ascii_wctomb>:
 800c030:	b149      	cbz	r1, 800c046 <__ascii_wctomb+0x16>
 800c032:	2aff      	cmp	r2, #255	; 0xff
 800c034:	bf85      	ittet	hi
 800c036:	238a      	movhi	r3, #138	; 0x8a
 800c038:	6003      	strhi	r3, [r0, #0]
 800c03a:	700a      	strbls	r2, [r1, #0]
 800c03c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c040:	bf98      	it	ls
 800c042:	2001      	movls	r0, #1
 800c044:	4770      	bx	lr
 800c046:	4608      	mov	r0, r1
 800c048:	4770      	bx	lr
	...

0800c04c <__swsetup_r>:
 800c04c:	4b32      	ldr	r3, [pc, #200]	; (800c118 <__swsetup_r+0xcc>)
 800c04e:	b570      	push	{r4, r5, r6, lr}
 800c050:	681d      	ldr	r5, [r3, #0]
 800c052:	4606      	mov	r6, r0
 800c054:	460c      	mov	r4, r1
 800c056:	b125      	cbz	r5, 800c062 <__swsetup_r+0x16>
 800c058:	69ab      	ldr	r3, [r5, #24]
 800c05a:	b913      	cbnz	r3, 800c062 <__swsetup_r+0x16>
 800c05c:	4628      	mov	r0, r5
 800c05e:	f000 f985 	bl	800c36c <__sinit>
 800c062:	4b2e      	ldr	r3, [pc, #184]	; (800c11c <__swsetup_r+0xd0>)
 800c064:	429c      	cmp	r4, r3
 800c066:	d10f      	bne.n	800c088 <__swsetup_r+0x3c>
 800c068:	686c      	ldr	r4, [r5, #4]
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c070:	0719      	lsls	r1, r3, #28
 800c072:	d42c      	bmi.n	800c0ce <__swsetup_r+0x82>
 800c074:	06dd      	lsls	r5, r3, #27
 800c076:	d411      	bmi.n	800c09c <__swsetup_r+0x50>
 800c078:	2309      	movs	r3, #9
 800c07a:	6033      	str	r3, [r6, #0]
 800c07c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	f04f 30ff 	mov.w	r0, #4294967295
 800c086:	e03e      	b.n	800c106 <__swsetup_r+0xba>
 800c088:	4b25      	ldr	r3, [pc, #148]	; (800c120 <__swsetup_r+0xd4>)
 800c08a:	429c      	cmp	r4, r3
 800c08c:	d101      	bne.n	800c092 <__swsetup_r+0x46>
 800c08e:	68ac      	ldr	r4, [r5, #8]
 800c090:	e7eb      	b.n	800c06a <__swsetup_r+0x1e>
 800c092:	4b24      	ldr	r3, [pc, #144]	; (800c124 <__swsetup_r+0xd8>)
 800c094:	429c      	cmp	r4, r3
 800c096:	bf08      	it	eq
 800c098:	68ec      	ldreq	r4, [r5, #12]
 800c09a:	e7e6      	b.n	800c06a <__swsetup_r+0x1e>
 800c09c:	0758      	lsls	r0, r3, #29
 800c09e:	d512      	bpl.n	800c0c6 <__swsetup_r+0x7a>
 800c0a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0a2:	b141      	cbz	r1, 800c0b6 <__swsetup_r+0x6a>
 800c0a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0a8:	4299      	cmp	r1, r3
 800c0aa:	d002      	beq.n	800c0b2 <__swsetup_r+0x66>
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	f7ff fb6f 	bl	800b790 <_free_r>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	6363      	str	r3, [r4, #52]	; 0x34
 800c0b6:	89a3      	ldrh	r3, [r4, #12]
 800c0b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0bc:	81a3      	strh	r3, [r4, #12]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6063      	str	r3, [r4, #4]
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	89a3      	ldrh	r3, [r4, #12]
 800c0c8:	f043 0308 	orr.w	r3, r3, #8
 800c0cc:	81a3      	strh	r3, [r4, #12]
 800c0ce:	6923      	ldr	r3, [r4, #16]
 800c0d0:	b94b      	cbnz	r3, 800c0e6 <__swsetup_r+0x9a>
 800c0d2:	89a3      	ldrh	r3, [r4, #12]
 800c0d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0dc:	d003      	beq.n	800c0e6 <__swsetup_r+0x9a>
 800c0de:	4621      	mov	r1, r4
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f000 fa07 	bl	800c4f4 <__smakebuf_r>
 800c0e6:	89a0      	ldrh	r0, [r4, #12]
 800c0e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0ec:	f010 0301 	ands.w	r3, r0, #1
 800c0f0:	d00a      	beq.n	800c108 <__swsetup_r+0xbc>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60a3      	str	r3, [r4, #8]
 800c0f6:	6963      	ldr	r3, [r4, #20]
 800c0f8:	425b      	negs	r3, r3
 800c0fa:	61a3      	str	r3, [r4, #24]
 800c0fc:	6923      	ldr	r3, [r4, #16]
 800c0fe:	b943      	cbnz	r3, 800c112 <__swsetup_r+0xc6>
 800c100:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c104:	d1ba      	bne.n	800c07c <__swsetup_r+0x30>
 800c106:	bd70      	pop	{r4, r5, r6, pc}
 800c108:	0781      	lsls	r1, r0, #30
 800c10a:	bf58      	it	pl
 800c10c:	6963      	ldrpl	r3, [r4, #20]
 800c10e:	60a3      	str	r3, [r4, #8]
 800c110:	e7f4      	b.n	800c0fc <__swsetup_r+0xb0>
 800c112:	2000      	movs	r0, #0
 800c114:	e7f7      	b.n	800c106 <__swsetup_r+0xba>
 800c116:	bf00      	nop
 800c118:	2000001c 	.word	0x2000001c
 800c11c:	0800d0b4 	.word	0x0800d0b4
 800c120:	0800d0d4 	.word	0x0800d0d4
 800c124:	0800d094 	.word	0x0800d094

0800c128 <abort>:
 800c128:	b508      	push	{r3, lr}
 800c12a:	2006      	movs	r0, #6
 800c12c:	f000 fa52 	bl	800c5d4 <raise>
 800c130:	2001      	movs	r0, #1
 800c132:	f7f7 f94f 	bl	80033d4 <_exit>
	...

0800c138 <__sflush_r>:
 800c138:	898a      	ldrh	r2, [r1, #12]
 800c13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c13e:	4605      	mov	r5, r0
 800c140:	0710      	lsls	r0, r2, #28
 800c142:	460c      	mov	r4, r1
 800c144:	d458      	bmi.n	800c1f8 <__sflush_r+0xc0>
 800c146:	684b      	ldr	r3, [r1, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	dc05      	bgt.n	800c158 <__sflush_r+0x20>
 800c14c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c14e:	2b00      	cmp	r3, #0
 800c150:	dc02      	bgt.n	800c158 <__sflush_r+0x20>
 800c152:	2000      	movs	r0, #0
 800c154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c15a:	2e00      	cmp	r6, #0
 800c15c:	d0f9      	beq.n	800c152 <__sflush_r+0x1a>
 800c15e:	2300      	movs	r3, #0
 800c160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c164:	682f      	ldr	r7, [r5, #0]
 800c166:	602b      	str	r3, [r5, #0]
 800c168:	d032      	beq.n	800c1d0 <__sflush_r+0x98>
 800c16a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	075a      	lsls	r2, r3, #29
 800c170:	d505      	bpl.n	800c17e <__sflush_r+0x46>
 800c172:	6863      	ldr	r3, [r4, #4]
 800c174:	1ac0      	subs	r0, r0, r3
 800c176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c178:	b10b      	cbz	r3, 800c17e <__sflush_r+0x46>
 800c17a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c17c:	1ac0      	subs	r0, r0, r3
 800c17e:	2300      	movs	r3, #0
 800c180:	4602      	mov	r2, r0
 800c182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c184:	6a21      	ldr	r1, [r4, #32]
 800c186:	4628      	mov	r0, r5
 800c188:	47b0      	blx	r6
 800c18a:	1c43      	adds	r3, r0, #1
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	d106      	bne.n	800c19e <__sflush_r+0x66>
 800c190:	6829      	ldr	r1, [r5, #0]
 800c192:	291d      	cmp	r1, #29
 800c194:	d82c      	bhi.n	800c1f0 <__sflush_r+0xb8>
 800c196:	4a2a      	ldr	r2, [pc, #168]	; (800c240 <__sflush_r+0x108>)
 800c198:	40ca      	lsrs	r2, r1
 800c19a:	07d6      	lsls	r6, r2, #31
 800c19c:	d528      	bpl.n	800c1f0 <__sflush_r+0xb8>
 800c19e:	2200      	movs	r2, #0
 800c1a0:	6062      	str	r2, [r4, #4]
 800c1a2:	04d9      	lsls	r1, r3, #19
 800c1a4:	6922      	ldr	r2, [r4, #16]
 800c1a6:	6022      	str	r2, [r4, #0]
 800c1a8:	d504      	bpl.n	800c1b4 <__sflush_r+0x7c>
 800c1aa:	1c42      	adds	r2, r0, #1
 800c1ac:	d101      	bne.n	800c1b2 <__sflush_r+0x7a>
 800c1ae:	682b      	ldr	r3, [r5, #0]
 800c1b0:	b903      	cbnz	r3, 800c1b4 <__sflush_r+0x7c>
 800c1b2:	6560      	str	r0, [r4, #84]	; 0x54
 800c1b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1b6:	602f      	str	r7, [r5, #0]
 800c1b8:	2900      	cmp	r1, #0
 800c1ba:	d0ca      	beq.n	800c152 <__sflush_r+0x1a>
 800c1bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1c0:	4299      	cmp	r1, r3
 800c1c2:	d002      	beq.n	800c1ca <__sflush_r+0x92>
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f7ff fae3 	bl	800b790 <_free_r>
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	6360      	str	r0, [r4, #52]	; 0x34
 800c1ce:	e7c1      	b.n	800c154 <__sflush_r+0x1c>
 800c1d0:	6a21      	ldr	r1, [r4, #32]
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b0      	blx	r6
 800c1d8:	1c41      	adds	r1, r0, #1
 800c1da:	d1c7      	bne.n	800c16c <__sflush_r+0x34>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d0c4      	beq.n	800c16c <__sflush_r+0x34>
 800c1e2:	2b1d      	cmp	r3, #29
 800c1e4:	d001      	beq.n	800c1ea <__sflush_r+0xb2>
 800c1e6:	2b16      	cmp	r3, #22
 800c1e8:	d101      	bne.n	800c1ee <__sflush_r+0xb6>
 800c1ea:	602f      	str	r7, [r5, #0]
 800c1ec:	e7b1      	b.n	800c152 <__sflush_r+0x1a>
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f4:	81a3      	strh	r3, [r4, #12]
 800c1f6:	e7ad      	b.n	800c154 <__sflush_r+0x1c>
 800c1f8:	690f      	ldr	r7, [r1, #16]
 800c1fa:	2f00      	cmp	r7, #0
 800c1fc:	d0a9      	beq.n	800c152 <__sflush_r+0x1a>
 800c1fe:	0793      	lsls	r3, r2, #30
 800c200:	680e      	ldr	r6, [r1, #0]
 800c202:	bf08      	it	eq
 800c204:	694b      	ldreq	r3, [r1, #20]
 800c206:	600f      	str	r7, [r1, #0]
 800c208:	bf18      	it	ne
 800c20a:	2300      	movne	r3, #0
 800c20c:	eba6 0807 	sub.w	r8, r6, r7
 800c210:	608b      	str	r3, [r1, #8]
 800c212:	f1b8 0f00 	cmp.w	r8, #0
 800c216:	dd9c      	ble.n	800c152 <__sflush_r+0x1a>
 800c218:	6a21      	ldr	r1, [r4, #32]
 800c21a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c21c:	4643      	mov	r3, r8
 800c21e:	463a      	mov	r2, r7
 800c220:	4628      	mov	r0, r5
 800c222:	47b0      	blx	r6
 800c224:	2800      	cmp	r0, #0
 800c226:	dc06      	bgt.n	800c236 <__sflush_r+0xfe>
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c22e:	81a3      	strh	r3, [r4, #12]
 800c230:	f04f 30ff 	mov.w	r0, #4294967295
 800c234:	e78e      	b.n	800c154 <__sflush_r+0x1c>
 800c236:	4407      	add	r7, r0
 800c238:	eba8 0800 	sub.w	r8, r8, r0
 800c23c:	e7e9      	b.n	800c212 <__sflush_r+0xda>
 800c23e:	bf00      	nop
 800c240:	20400001 	.word	0x20400001

0800c244 <_fflush_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	690b      	ldr	r3, [r1, #16]
 800c248:	4605      	mov	r5, r0
 800c24a:	460c      	mov	r4, r1
 800c24c:	b913      	cbnz	r3, 800c254 <_fflush_r+0x10>
 800c24e:	2500      	movs	r5, #0
 800c250:	4628      	mov	r0, r5
 800c252:	bd38      	pop	{r3, r4, r5, pc}
 800c254:	b118      	cbz	r0, 800c25e <_fflush_r+0x1a>
 800c256:	6983      	ldr	r3, [r0, #24]
 800c258:	b90b      	cbnz	r3, 800c25e <_fflush_r+0x1a>
 800c25a:	f000 f887 	bl	800c36c <__sinit>
 800c25e:	4b14      	ldr	r3, [pc, #80]	; (800c2b0 <_fflush_r+0x6c>)
 800c260:	429c      	cmp	r4, r3
 800c262:	d11b      	bne.n	800c29c <_fflush_r+0x58>
 800c264:	686c      	ldr	r4, [r5, #4]
 800c266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d0ef      	beq.n	800c24e <_fflush_r+0xa>
 800c26e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c270:	07d0      	lsls	r0, r2, #31
 800c272:	d404      	bmi.n	800c27e <_fflush_r+0x3a>
 800c274:	0599      	lsls	r1, r3, #22
 800c276:	d402      	bmi.n	800c27e <_fflush_r+0x3a>
 800c278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c27a:	f000 f915 	bl	800c4a8 <__retarget_lock_acquire_recursive>
 800c27e:	4628      	mov	r0, r5
 800c280:	4621      	mov	r1, r4
 800c282:	f7ff ff59 	bl	800c138 <__sflush_r>
 800c286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c288:	07da      	lsls	r2, r3, #31
 800c28a:	4605      	mov	r5, r0
 800c28c:	d4e0      	bmi.n	800c250 <_fflush_r+0xc>
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	059b      	lsls	r3, r3, #22
 800c292:	d4dd      	bmi.n	800c250 <_fflush_r+0xc>
 800c294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c296:	f000 f908 	bl	800c4aa <__retarget_lock_release_recursive>
 800c29a:	e7d9      	b.n	800c250 <_fflush_r+0xc>
 800c29c:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <_fflush_r+0x70>)
 800c29e:	429c      	cmp	r4, r3
 800c2a0:	d101      	bne.n	800c2a6 <_fflush_r+0x62>
 800c2a2:	68ac      	ldr	r4, [r5, #8]
 800c2a4:	e7df      	b.n	800c266 <_fflush_r+0x22>
 800c2a6:	4b04      	ldr	r3, [pc, #16]	; (800c2b8 <_fflush_r+0x74>)
 800c2a8:	429c      	cmp	r4, r3
 800c2aa:	bf08      	it	eq
 800c2ac:	68ec      	ldreq	r4, [r5, #12]
 800c2ae:	e7da      	b.n	800c266 <_fflush_r+0x22>
 800c2b0:	0800d0b4 	.word	0x0800d0b4
 800c2b4:	0800d0d4 	.word	0x0800d0d4
 800c2b8:	0800d094 	.word	0x0800d094

0800c2bc <std>:
 800c2bc:	2300      	movs	r3, #0
 800c2be:	b510      	push	{r4, lr}
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	e9c0 3300 	strd	r3, r3, [r0]
 800c2c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2ca:	6083      	str	r3, [r0, #8]
 800c2cc:	8181      	strh	r1, [r0, #12]
 800c2ce:	6643      	str	r3, [r0, #100]	; 0x64
 800c2d0:	81c2      	strh	r2, [r0, #14]
 800c2d2:	6183      	str	r3, [r0, #24]
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	2208      	movs	r2, #8
 800c2d8:	305c      	adds	r0, #92	; 0x5c
 800c2da:	f7fd fb59 	bl	8009990 <memset>
 800c2de:	4b05      	ldr	r3, [pc, #20]	; (800c2f4 <std+0x38>)
 800c2e0:	6263      	str	r3, [r4, #36]	; 0x24
 800c2e2:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <std+0x3c>)
 800c2e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2e6:	4b05      	ldr	r3, [pc, #20]	; (800c2fc <std+0x40>)
 800c2e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2ea:	4b05      	ldr	r3, [pc, #20]	; (800c300 <std+0x44>)
 800c2ec:	6224      	str	r4, [r4, #32]
 800c2ee:	6323      	str	r3, [r4, #48]	; 0x30
 800c2f0:	bd10      	pop	{r4, pc}
 800c2f2:	bf00      	nop
 800c2f4:	0800c60d 	.word	0x0800c60d
 800c2f8:	0800c62f 	.word	0x0800c62f
 800c2fc:	0800c667 	.word	0x0800c667
 800c300:	0800c68b 	.word	0x0800c68b

0800c304 <_cleanup_r>:
 800c304:	4901      	ldr	r1, [pc, #4]	; (800c30c <_cleanup_r+0x8>)
 800c306:	f000 b8af 	b.w	800c468 <_fwalk_reent>
 800c30a:	bf00      	nop
 800c30c:	0800c245 	.word	0x0800c245

0800c310 <__sfmoreglue>:
 800c310:	b570      	push	{r4, r5, r6, lr}
 800c312:	1e4a      	subs	r2, r1, #1
 800c314:	2568      	movs	r5, #104	; 0x68
 800c316:	4355      	muls	r5, r2
 800c318:	460e      	mov	r6, r1
 800c31a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c31e:	f7ff fa87 	bl	800b830 <_malloc_r>
 800c322:	4604      	mov	r4, r0
 800c324:	b140      	cbz	r0, 800c338 <__sfmoreglue+0x28>
 800c326:	2100      	movs	r1, #0
 800c328:	e9c0 1600 	strd	r1, r6, [r0]
 800c32c:	300c      	adds	r0, #12
 800c32e:	60a0      	str	r0, [r4, #8]
 800c330:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c334:	f7fd fb2c 	bl	8009990 <memset>
 800c338:	4620      	mov	r0, r4
 800c33a:	bd70      	pop	{r4, r5, r6, pc}

0800c33c <__sfp_lock_acquire>:
 800c33c:	4801      	ldr	r0, [pc, #4]	; (800c344 <__sfp_lock_acquire+0x8>)
 800c33e:	f000 b8b3 	b.w	800c4a8 <__retarget_lock_acquire_recursive>
 800c342:	bf00      	nop
 800c344:	20000e90 	.word	0x20000e90

0800c348 <__sfp_lock_release>:
 800c348:	4801      	ldr	r0, [pc, #4]	; (800c350 <__sfp_lock_release+0x8>)
 800c34a:	f000 b8ae 	b.w	800c4aa <__retarget_lock_release_recursive>
 800c34e:	bf00      	nop
 800c350:	20000e90 	.word	0x20000e90

0800c354 <__sinit_lock_acquire>:
 800c354:	4801      	ldr	r0, [pc, #4]	; (800c35c <__sinit_lock_acquire+0x8>)
 800c356:	f000 b8a7 	b.w	800c4a8 <__retarget_lock_acquire_recursive>
 800c35a:	bf00      	nop
 800c35c:	20000e8b 	.word	0x20000e8b

0800c360 <__sinit_lock_release>:
 800c360:	4801      	ldr	r0, [pc, #4]	; (800c368 <__sinit_lock_release+0x8>)
 800c362:	f000 b8a2 	b.w	800c4aa <__retarget_lock_release_recursive>
 800c366:	bf00      	nop
 800c368:	20000e8b 	.word	0x20000e8b

0800c36c <__sinit>:
 800c36c:	b510      	push	{r4, lr}
 800c36e:	4604      	mov	r4, r0
 800c370:	f7ff fff0 	bl	800c354 <__sinit_lock_acquire>
 800c374:	69a3      	ldr	r3, [r4, #24]
 800c376:	b11b      	cbz	r3, 800c380 <__sinit+0x14>
 800c378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c37c:	f7ff bff0 	b.w	800c360 <__sinit_lock_release>
 800c380:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c384:	6523      	str	r3, [r4, #80]	; 0x50
 800c386:	4b13      	ldr	r3, [pc, #76]	; (800c3d4 <__sinit+0x68>)
 800c388:	4a13      	ldr	r2, [pc, #76]	; (800c3d8 <__sinit+0x6c>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c38e:	42a3      	cmp	r3, r4
 800c390:	bf04      	itt	eq
 800c392:	2301      	moveq	r3, #1
 800c394:	61a3      	streq	r3, [r4, #24]
 800c396:	4620      	mov	r0, r4
 800c398:	f000 f820 	bl	800c3dc <__sfp>
 800c39c:	6060      	str	r0, [r4, #4]
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f000 f81c 	bl	800c3dc <__sfp>
 800c3a4:	60a0      	str	r0, [r4, #8]
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f000 f818 	bl	800c3dc <__sfp>
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	60e0      	str	r0, [r4, #12]
 800c3b0:	2104      	movs	r1, #4
 800c3b2:	6860      	ldr	r0, [r4, #4]
 800c3b4:	f7ff ff82 	bl	800c2bc <std>
 800c3b8:	68a0      	ldr	r0, [r4, #8]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	2109      	movs	r1, #9
 800c3be:	f7ff ff7d 	bl	800c2bc <std>
 800c3c2:	68e0      	ldr	r0, [r4, #12]
 800c3c4:	2202      	movs	r2, #2
 800c3c6:	2112      	movs	r1, #18
 800c3c8:	f7ff ff78 	bl	800c2bc <std>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	61a3      	str	r3, [r4, #24]
 800c3d0:	e7d2      	b.n	800c378 <__sinit+0xc>
 800c3d2:	bf00      	nop
 800c3d4:	0800cd10 	.word	0x0800cd10
 800c3d8:	0800c305 	.word	0x0800c305

0800c3dc <__sfp>:
 800c3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3de:	4607      	mov	r7, r0
 800c3e0:	f7ff ffac 	bl	800c33c <__sfp_lock_acquire>
 800c3e4:	4b1e      	ldr	r3, [pc, #120]	; (800c460 <__sfp+0x84>)
 800c3e6:	681e      	ldr	r6, [r3, #0]
 800c3e8:	69b3      	ldr	r3, [r6, #24]
 800c3ea:	b913      	cbnz	r3, 800c3f2 <__sfp+0x16>
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	f7ff ffbd 	bl	800c36c <__sinit>
 800c3f2:	3648      	adds	r6, #72	; 0x48
 800c3f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	d503      	bpl.n	800c404 <__sfp+0x28>
 800c3fc:	6833      	ldr	r3, [r6, #0]
 800c3fe:	b30b      	cbz	r3, 800c444 <__sfp+0x68>
 800c400:	6836      	ldr	r6, [r6, #0]
 800c402:	e7f7      	b.n	800c3f4 <__sfp+0x18>
 800c404:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c408:	b9d5      	cbnz	r5, 800c440 <__sfp+0x64>
 800c40a:	4b16      	ldr	r3, [pc, #88]	; (800c464 <__sfp+0x88>)
 800c40c:	60e3      	str	r3, [r4, #12]
 800c40e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c412:	6665      	str	r5, [r4, #100]	; 0x64
 800c414:	f000 f847 	bl	800c4a6 <__retarget_lock_init_recursive>
 800c418:	f7ff ff96 	bl	800c348 <__sfp_lock_release>
 800c41c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c420:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c424:	6025      	str	r5, [r4, #0]
 800c426:	61a5      	str	r5, [r4, #24]
 800c428:	2208      	movs	r2, #8
 800c42a:	4629      	mov	r1, r5
 800c42c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c430:	f7fd faae 	bl	8009990 <memset>
 800c434:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c438:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c43c:	4620      	mov	r0, r4
 800c43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c440:	3468      	adds	r4, #104	; 0x68
 800c442:	e7d9      	b.n	800c3f8 <__sfp+0x1c>
 800c444:	2104      	movs	r1, #4
 800c446:	4638      	mov	r0, r7
 800c448:	f7ff ff62 	bl	800c310 <__sfmoreglue>
 800c44c:	4604      	mov	r4, r0
 800c44e:	6030      	str	r0, [r6, #0]
 800c450:	2800      	cmp	r0, #0
 800c452:	d1d5      	bne.n	800c400 <__sfp+0x24>
 800c454:	f7ff ff78 	bl	800c348 <__sfp_lock_release>
 800c458:	230c      	movs	r3, #12
 800c45a:	603b      	str	r3, [r7, #0]
 800c45c:	e7ee      	b.n	800c43c <__sfp+0x60>
 800c45e:	bf00      	nop
 800c460:	0800cd10 	.word	0x0800cd10
 800c464:	ffff0001 	.word	0xffff0001

0800c468 <_fwalk_reent>:
 800c468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c46c:	4606      	mov	r6, r0
 800c46e:	4688      	mov	r8, r1
 800c470:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c474:	2700      	movs	r7, #0
 800c476:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c47a:	f1b9 0901 	subs.w	r9, r9, #1
 800c47e:	d505      	bpl.n	800c48c <_fwalk_reent+0x24>
 800c480:	6824      	ldr	r4, [r4, #0]
 800c482:	2c00      	cmp	r4, #0
 800c484:	d1f7      	bne.n	800c476 <_fwalk_reent+0xe>
 800c486:	4638      	mov	r0, r7
 800c488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c48c:	89ab      	ldrh	r3, [r5, #12]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d907      	bls.n	800c4a2 <_fwalk_reent+0x3a>
 800c492:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c496:	3301      	adds	r3, #1
 800c498:	d003      	beq.n	800c4a2 <_fwalk_reent+0x3a>
 800c49a:	4629      	mov	r1, r5
 800c49c:	4630      	mov	r0, r6
 800c49e:	47c0      	blx	r8
 800c4a0:	4307      	orrs	r7, r0
 800c4a2:	3568      	adds	r5, #104	; 0x68
 800c4a4:	e7e9      	b.n	800c47a <_fwalk_reent+0x12>

0800c4a6 <__retarget_lock_init_recursive>:
 800c4a6:	4770      	bx	lr

0800c4a8 <__retarget_lock_acquire_recursive>:
 800c4a8:	4770      	bx	lr

0800c4aa <__retarget_lock_release_recursive>:
 800c4aa:	4770      	bx	lr

0800c4ac <__swhatbuf_r>:
 800c4ac:	b570      	push	{r4, r5, r6, lr}
 800c4ae:	460e      	mov	r6, r1
 800c4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b4:	2900      	cmp	r1, #0
 800c4b6:	b096      	sub	sp, #88	; 0x58
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	461d      	mov	r5, r3
 800c4bc:	da07      	bge.n	800c4ce <__swhatbuf_r+0x22>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	602b      	str	r3, [r5, #0]
 800c4c2:	89b3      	ldrh	r3, [r6, #12]
 800c4c4:	061a      	lsls	r2, r3, #24
 800c4c6:	d410      	bmi.n	800c4ea <__swhatbuf_r+0x3e>
 800c4c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4cc:	e00e      	b.n	800c4ec <__swhatbuf_r+0x40>
 800c4ce:	466a      	mov	r2, sp
 800c4d0:	f000 f902 	bl	800c6d8 <_fstat_r>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	dbf2      	blt.n	800c4be <__swhatbuf_r+0x12>
 800c4d8:	9a01      	ldr	r2, [sp, #4]
 800c4da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4e2:	425a      	negs	r2, r3
 800c4e4:	415a      	adcs	r2, r3
 800c4e6:	602a      	str	r2, [r5, #0]
 800c4e8:	e7ee      	b.n	800c4c8 <__swhatbuf_r+0x1c>
 800c4ea:	2340      	movs	r3, #64	; 0x40
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	6023      	str	r3, [r4, #0]
 800c4f0:	b016      	add	sp, #88	; 0x58
 800c4f2:	bd70      	pop	{r4, r5, r6, pc}

0800c4f4 <__smakebuf_r>:
 800c4f4:	898b      	ldrh	r3, [r1, #12]
 800c4f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4f8:	079d      	lsls	r5, r3, #30
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	460c      	mov	r4, r1
 800c4fe:	d507      	bpl.n	800c510 <__smakebuf_r+0x1c>
 800c500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	6123      	str	r3, [r4, #16]
 800c508:	2301      	movs	r3, #1
 800c50a:	6163      	str	r3, [r4, #20]
 800c50c:	b002      	add	sp, #8
 800c50e:	bd70      	pop	{r4, r5, r6, pc}
 800c510:	ab01      	add	r3, sp, #4
 800c512:	466a      	mov	r2, sp
 800c514:	f7ff ffca 	bl	800c4ac <__swhatbuf_r>
 800c518:	9900      	ldr	r1, [sp, #0]
 800c51a:	4605      	mov	r5, r0
 800c51c:	4630      	mov	r0, r6
 800c51e:	f7ff f987 	bl	800b830 <_malloc_r>
 800c522:	b948      	cbnz	r0, 800c538 <__smakebuf_r+0x44>
 800c524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c528:	059a      	lsls	r2, r3, #22
 800c52a:	d4ef      	bmi.n	800c50c <__smakebuf_r+0x18>
 800c52c:	f023 0303 	bic.w	r3, r3, #3
 800c530:	f043 0302 	orr.w	r3, r3, #2
 800c534:	81a3      	strh	r3, [r4, #12]
 800c536:	e7e3      	b.n	800c500 <__smakebuf_r+0xc>
 800c538:	4b0d      	ldr	r3, [pc, #52]	; (800c570 <__smakebuf_r+0x7c>)
 800c53a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c53c:	89a3      	ldrh	r3, [r4, #12]
 800c53e:	6020      	str	r0, [r4, #0]
 800c540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c544:	81a3      	strh	r3, [r4, #12]
 800c546:	9b00      	ldr	r3, [sp, #0]
 800c548:	6163      	str	r3, [r4, #20]
 800c54a:	9b01      	ldr	r3, [sp, #4]
 800c54c:	6120      	str	r0, [r4, #16]
 800c54e:	b15b      	cbz	r3, 800c568 <__smakebuf_r+0x74>
 800c550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c554:	4630      	mov	r0, r6
 800c556:	f000 f8d1 	bl	800c6fc <_isatty_r>
 800c55a:	b128      	cbz	r0, 800c568 <__smakebuf_r+0x74>
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	f023 0303 	bic.w	r3, r3, #3
 800c562:	f043 0301 	orr.w	r3, r3, #1
 800c566:	81a3      	strh	r3, [r4, #12]
 800c568:	89a0      	ldrh	r0, [r4, #12]
 800c56a:	4305      	orrs	r5, r0
 800c56c:	81a5      	strh	r5, [r4, #12]
 800c56e:	e7cd      	b.n	800c50c <__smakebuf_r+0x18>
 800c570:	0800c305 	.word	0x0800c305

0800c574 <_malloc_usable_size_r>:
 800c574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c578:	1f18      	subs	r0, r3, #4
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	bfbc      	itt	lt
 800c57e:	580b      	ldrlt	r3, [r1, r0]
 800c580:	18c0      	addlt	r0, r0, r3
 800c582:	4770      	bx	lr

0800c584 <_raise_r>:
 800c584:	291f      	cmp	r1, #31
 800c586:	b538      	push	{r3, r4, r5, lr}
 800c588:	4604      	mov	r4, r0
 800c58a:	460d      	mov	r5, r1
 800c58c:	d904      	bls.n	800c598 <_raise_r+0x14>
 800c58e:	2316      	movs	r3, #22
 800c590:	6003      	str	r3, [r0, #0]
 800c592:	f04f 30ff 	mov.w	r0, #4294967295
 800c596:	bd38      	pop	{r3, r4, r5, pc}
 800c598:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c59a:	b112      	cbz	r2, 800c5a2 <_raise_r+0x1e>
 800c59c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5a0:	b94b      	cbnz	r3, 800c5b6 <_raise_r+0x32>
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 f830 	bl	800c608 <_getpid_r>
 800c5a8:	462a      	mov	r2, r5
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5b2:	f000 b817 	b.w	800c5e4 <_kill_r>
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d00a      	beq.n	800c5d0 <_raise_r+0x4c>
 800c5ba:	1c59      	adds	r1, r3, #1
 800c5bc:	d103      	bne.n	800c5c6 <_raise_r+0x42>
 800c5be:	2316      	movs	r3, #22
 800c5c0:	6003      	str	r3, [r0, #0]
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	e7e7      	b.n	800c596 <_raise_r+0x12>
 800c5c6:	2400      	movs	r4, #0
 800c5c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	4798      	blx	r3
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	e7e0      	b.n	800c596 <_raise_r+0x12>

0800c5d4 <raise>:
 800c5d4:	4b02      	ldr	r3, [pc, #8]	; (800c5e0 <raise+0xc>)
 800c5d6:	4601      	mov	r1, r0
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	f7ff bfd3 	b.w	800c584 <_raise_r>
 800c5de:	bf00      	nop
 800c5e0:	2000001c 	.word	0x2000001c

0800c5e4 <_kill_r>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	4d07      	ldr	r5, [pc, #28]	; (800c604 <_kill_r+0x20>)
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	4608      	mov	r0, r1
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	602b      	str	r3, [r5, #0]
 800c5f2:	f7f6 fedf 	bl	80033b4 <_kill>
 800c5f6:	1c43      	adds	r3, r0, #1
 800c5f8:	d102      	bne.n	800c600 <_kill_r+0x1c>
 800c5fa:	682b      	ldr	r3, [r5, #0]
 800c5fc:	b103      	cbz	r3, 800c600 <_kill_r+0x1c>
 800c5fe:	6023      	str	r3, [r4, #0]
 800c600:	bd38      	pop	{r3, r4, r5, pc}
 800c602:	bf00      	nop
 800c604:	20000e84 	.word	0x20000e84

0800c608 <_getpid_r>:
 800c608:	f7f6 becc 	b.w	80033a4 <_getpid>

0800c60c <__sread>:
 800c60c:	b510      	push	{r4, lr}
 800c60e:	460c      	mov	r4, r1
 800c610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c614:	f000 f894 	bl	800c740 <_read_r>
 800c618:	2800      	cmp	r0, #0
 800c61a:	bfab      	itete	ge
 800c61c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c61e:	89a3      	ldrhlt	r3, [r4, #12]
 800c620:	181b      	addge	r3, r3, r0
 800c622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c626:	bfac      	ite	ge
 800c628:	6563      	strge	r3, [r4, #84]	; 0x54
 800c62a:	81a3      	strhlt	r3, [r4, #12]
 800c62c:	bd10      	pop	{r4, pc}

0800c62e <__swrite>:
 800c62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c632:	461f      	mov	r7, r3
 800c634:	898b      	ldrh	r3, [r1, #12]
 800c636:	05db      	lsls	r3, r3, #23
 800c638:	4605      	mov	r5, r0
 800c63a:	460c      	mov	r4, r1
 800c63c:	4616      	mov	r6, r2
 800c63e:	d505      	bpl.n	800c64c <__swrite+0x1e>
 800c640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c644:	2302      	movs	r3, #2
 800c646:	2200      	movs	r2, #0
 800c648:	f000 f868 	bl	800c71c <_lseek_r>
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c656:	81a3      	strh	r3, [r4, #12]
 800c658:	4632      	mov	r2, r6
 800c65a:	463b      	mov	r3, r7
 800c65c:	4628      	mov	r0, r5
 800c65e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c662:	f000 b817 	b.w	800c694 <_write_r>

0800c666 <__sseek>:
 800c666:	b510      	push	{r4, lr}
 800c668:	460c      	mov	r4, r1
 800c66a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c66e:	f000 f855 	bl	800c71c <_lseek_r>
 800c672:	1c43      	adds	r3, r0, #1
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	bf15      	itete	ne
 800c678:	6560      	strne	r0, [r4, #84]	; 0x54
 800c67a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c67e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c682:	81a3      	strheq	r3, [r4, #12]
 800c684:	bf18      	it	ne
 800c686:	81a3      	strhne	r3, [r4, #12]
 800c688:	bd10      	pop	{r4, pc}

0800c68a <__sclose>:
 800c68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c68e:	f000 b813 	b.w	800c6b8 <_close_r>
	...

0800c694 <_write_r>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	4d07      	ldr	r5, [pc, #28]	; (800c6b4 <_write_r+0x20>)
 800c698:	4604      	mov	r4, r0
 800c69a:	4608      	mov	r0, r1
 800c69c:	4611      	mov	r1, r2
 800c69e:	2200      	movs	r2, #0
 800c6a0:	602a      	str	r2, [r5, #0]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	f7f6 febd 	bl	8003422 <_write>
 800c6a8:	1c43      	adds	r3, r0, #1
 800c6aa:	d102      	bne.n	800c6b2 <_write_r+0x1e>
 800c6ac:	682b      	ldr	r3, [r5, #0]
 800c6ae:	b103      	cbz	r3, 800c6b2 <_write_r+0x1e>
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	bd38      	pop	{r3, r4, r5, pc}
 800c6b4:	20000e84 	.word	0x20000e84

0800c6b8 <_close_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4d06      	ldr	r5, [pc, #24]	; (800c6d4 <_close_r+0x1c>)
 800c6bc:	2300      	movs	r3, #0
 800c6be:	4604      	mov	r4, r0
 800c6c0:	4608      	mov	r0, r1
 800c6c2:	602b      	str	r3, [r5, #0]
 800c6c4:	f7f6 fec9 	bl	800345a <_close>
 800c6c8:	1c43      	adds	r3, r0, #1
 800c6ca:	d102      	bne.n	800c6d2 <_close_r+0x1a>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	b103      	cbz	r3, 800c6d2 <_close_r+0x1a>
 800c6d0:	6023      	str	r3, [r4, #0]
 800c6d2:	bd38      	pop	{r3, r4, r5, pc}
 800c6d4:	20000e84 	.word	0x20000e84

0800c6d8 <_fstat_r>:
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	4d07      	ldr	r5, [pc, #28]	; (800c6f8 <_fstat_r+0x20>)
 800c6dc:	2300      	movs	r3, #0
 800c6de:	4604      	mov	r4, r0
 800c6e0:	4608      	mov	r0, r1
 800c6e2:	4611      	mov	r1, r2
 800c6e4:	602b      	str	r3, [r5, #0]
 800c6e6:	f7f6 fec4 	bl	8003472 <_fstat>
 800c6ea:	1c43      	adds	r3, r0, #1
 800c6ec:	d102      	bne.n	800c6f4 <_fstat_r+0x1c>
 800c6ee:	682b      	ldr	r3, [r5, #0]
 800c6f0:	b103      	cbz	r3, 800c6f4 <_fstat_r+0x1c>
 800c6f2:	6023      	str	r3, [r4, #0]
 800c6f4:	bd38      	pop	{r3, r4, r5, pc}
 800c6f6:	bf00      	nop
 800c6f8:	20000e84 	.word	0x20000e84

0800c6fc <_isatty_r>:
 800c6fc:	b538      	push	{r3, r4, r5, lr}
 800c6fe:	4d06      	ldr	r5, [pc, #24]	; (800c718 <_isatty_r+0x1c>)
 800c700:	2300      	movs	r3, #0
 800c702:	4604      	mov	r4, r0
 800c704:	4608      	mov	r0, r1
 800c706:	602b      	str	r3, [r5, #0]
 800c708:	f7f6 fec3 	bl	8003492 <_isatty>
 800c70c:	1c43      	adds	r3, r0, #1
 800c70e:	d102      	bne.n	800c716 <_isatty_r+0x1a>
 800c710:	682b      	ldr	r3, [r5, #0]
 800c712:	b103      	cbz	r3, 800c716 <_isatty_r+0x1a>
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	bd38      	pop	{r3, r4, r5, pc}
 800c718:	20000e84 	.word	0x20000e84

0800c71c <_lseek_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4d07      	ldr	r5, [pc, #28]	; (800c73c <_lseek_r+0x20>)
 800c720:	4604      	mov	r4, r0
 800c722:	4608      	mov	r0, r1
 800c724:	4611      	mov	r1, r2
 800c726:	2200      	movs	r2, #0
 800c728:	602a      	str	r2, [r5, #0]
 800c72a:	461a      	mov	r2, r3
 800c72c:	f7f6 febc 	bl	80034a8 <_lseek>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_lseek_r+0x1e>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	b103      	cbz	r3, 800c73a <_lseek_r+0x1e>
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	20000e84 	.word	0x20000e84

0800c740 <_read_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d07      	ldr	r5, [pc, #28]	; (800c760 <_read_r+0x20>)
 800c744:	4604      	mov	r4, r0
 800c746:	4608      	mov	r0, r1
 800c748:	4611      	mov	r1, r2
 800c74a:	2200      	movs	r2, #0
 800c74c:	602a      	str	r2, [r5, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	f7f6 fe4a 	bl	80033e8 <_read>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_read_r+0x1e>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_read_r+0x1e>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20000e84 	.word	0x20000e84

0800c764 <_init>:
 800c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c766:	bf00      	nop
 800c768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76a:	bc08      	pop	{r3}
 800c76c:	469e      	mov	lr, r3
 800c76e:	4770      	bx	lr

0800c770 <_fini>:
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	bf00      	nop
 800c774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c776:	bc08      	pop	{r3}
 800c778:	469e      	mov	lr, r3
 800c77a:	4770      	bx	lr
